------------------------------------------------------------------------------------------------------------------------------------------
-- This SQL Script list down active Certificated Teachers

sp_columns tblEmployee
sp_columns tblSubstituteAssignment
sp_columns tblJobTitles
sp_columns tblClassifications
sp_columns tblLeaveType

select * from tblLeaveType
	order by LeaveType desc

-- douglas
select
	tblEmployee.EmployeeID,
	tblEmployee.Fullname,
	tblClassifications.ClassDescription,
	tblJobTitles.JobTitle,
	--tblJobTitles.SubRateLeaveTypeID,
	tblLeaveType.LeaveType,
	tblLeaveType.DailyRate
from tblEmployee
	inner join tblSubstituteAssignment
		on tblEmployee.EmployeeID = tblSubstituteAssignment.EmployeeID
	inner join tblJobTitles
		on tblSubstituteAssignment.JobTitleID = tblJobTitles.JobTitleID
	inner join tblClassifications
		on tblEmployee.ClassificationID = tblClassifications.ClassificationID
	inner join tblLeaveType
		on tblJobTitles.SubRateLeaveTypeID = tblLeaveType.LeaveTypeID
where  tblJobTitles.SubRateLeaveTypeID in (98,37,95)

------------------------------------------------------------------------------------------------------------------------------------------
-- get table with column
Use DatabaseName
Select * From INFORMATION_SCHEMA.COLUMNS Where column_name = 'ColName'


-- Get Username and Password select employeeid, fullname, email, [password],
SELECT 
	EmployeeID,
	Fullname,
	Email, 
	[Password] 
FROM tblEmployee 
WHERE 
	LName = 'CRAWFORD' 
	AND FName = 'CHERYL'

559-305-7035

------------------------------------------------------------------------------------------------------------------------------------------
-- Locate the request
SELECT 
	rq.Id as RequestID,
	rqtype.[Description] + ' # ' + CAST(rq.AuthorizationRequestTypePk as varchar(10)) as RequestType,
	rstat.[Description] as [Status]
FROM AuthorizationRequest rq
inner join
	DS_Global..AuthorizationRequestStatus rstat
	on rq.AuthorizationRequestStatusId = rstat.Id
inner join
	DS_Global..AuthorizationRequestType rqtype
	on rqtype.Id = rq.AuthorizationRequestTypeId
	and rqtype.[Description] = 'PCA'
	and rq.AuthorizationRequestTypePk = 2947 

/*
-----------------------------

-- stuck request
findings:

Request type: PCA (6)
Request #: 2947 (PCA #)
Current status: Approved (2)

*/


-- Show the approval list
SELECT 
	ard.id,
	ard.UserId,
	te.Fullname,
	ard.[Priority],
	arat.[Description] as actionTaken
FROM AuthorizationRequestDetail ard
inner join
	DS_Global..AuthorizationActionType arat
	on ard.AuthorizationActionTypeId = arat.Id
	and ard.AuthorizationRequestId = 28379
inner join
	tblUsers users
	on ard.UserId = users.UserID
inner join
	tblEmployee te
	on users.EmployeeID = te.EmployeeID
order by
	ard.Id asc
/*
-----------------------------
findings:

Request type: PCA (6)
Request ID #: 28379

Id		AuthorizationRequestId	UserId	Priority	ActionedByUserId	AuthorizationActionTypeId	IsNext
91085	28379					6		NULL		6					1 - created					0
91086	28379					7		-20			7					6 - notified				0
91087	28379					5		40			5					3 - approved				0
91088	28379					7		-50			7					6 - notified				0
91089	28379					39		-60			39					6 - notified				0
91090	28379					3		70			3					3 - approved				0
*/

-- check PCA Status
select 
	pca.Id,
	stat.[Description]
from pca
inner join
	DS_Global..PCAStatus stat
	on pca.StatusId = stat.Id
	and pca.Id = 2947

/*
-----------------------------
findings:

PCA #: 2947
Current status: Pending(2)

*/

-- flip the status from
-- PENDING to APPROVED
update pca
	set
		StatusId = (select Id from DS_Global..PCAStatus where [Description] = 'Approved' )
where
	Id = 2947
-------------------------------------------------------------------------------------------------------------------------------------------
-- Locate the AuthorizationRequestID (ID)
SELECT *
FROM AuthorizationRequest
WHERE AuthorizationRequestTypeId = 6
 AND AuthorizationRequestTYpePK = 8053

-- Show the approval list
SELECT *
FROM AuthorizationRequestDetail
WHERE authorizationREquestID = 55411



-- Back Step the EWA # one approval back
EXEC spReAuthorize 7805,5

select tblEmployee.employeeid, tblEmployee.fullname, tblEmployee.email, tblEmployee.[password] 
	from tblemployee
	inner join tblUsers
		on tblUsers.Employeeid = tblEmployee.employeeid
	where tblUsers.UserID = 21 -- plug the UserID here

------------------------------------------------------------------------------------------------------------------------------------------

-- check for funky values in Hours for SBA/EWA

-- Running the SQL generated by the report, gave me a 'Msg 8115, Level 16, State 8, Line 1 Arithmetic
-- overflow error converting numeric to data type numeric.' error.
-- Which indicates a value that is too big for the column its for.
-- Running the following script on the district;

-- Locate Site ID
Select * from tblSite
where SiteName = 'West Ranch High School'
-- SiteID 'West Ranch High School' = 26


-- Check for "funky" looking value on Hours
Select * from tblWorkAgreement
	where waSiteID = 26 -- Plug in here the Site ID
		and waFiscalYear = 2015
		and Authorized = 1
order by  Hours desc, WorkAgreementID asc, waCompType desc

-- This gave me EWA # 96903 with 19,801,940 max hours
-- informed user that this figure was throwing them off.

------------------------------------------------------------------------------------------------------------------------------------------
-- Re-Open Pay Period for non NET districts (no check batches)

-- Get the PayrollID of the Pay Period they want to re-open
select * from PayrollRun
	where [Description] like 'Oct 2015%' -- wildcard to catch all
	-- PayrollID = 1036

-- confirm
select * from PayrollRun
	where PayrollID = 1036 -- put PayrollID here
	
----------------------------------------------------------
-- un-closing process starts here
-- "Unclose" the PayrollRun

Update PayrollRun
	Set DateClosed = Null
	where PayrollID = 1036 -- put PayrollID here
	
-- Get the Payroll
select * from tblPayroll
	where PayrollID = 1036 -- put PayrollID here

-- Set Close to False (0)
Update tblPayroll
	Set [Closed] = 0
	where PayrollID = 1036 -- put PayrollID here

----------------------------------------------------------
-- confirm that they are open

-- 'DateClosed' should be NULL
select PayrollID, [Description], DateClosed from PayrollRun
	where PayrollID = 1036 -- put PayrollID here
	
-- 'Closed' should be 0
select PayrollID, PayPeriod, [Closed] from tblPayroll
	where PayrollID = 1036 -- put PayrollID here
	

------------------------------------------------------------------------------------------------------------------------------------------

--FOR BILLING PURPOSES FTE COUNT
--Use First Wednesday in October for that year for the BasePositionFilter @Date
------------------------------------------------------------------------------
--CRITERIA Include Vacancies,Only Classification Groups 1 and 2,Including Paid By hours worked
 
 
--Totals
SELECT DistrictID,
	DistrictAbbrev,
	DistrictTitle
FROM tblDistrict

--Totals
DECLARE @DistrictID INT
DECLARE @curFiscalYear INT
DECLARE @Date DATETIME

SET @DistrictID = (
		SELECT DistrictID
		FROM tblDistrict
		)
SET @curFiscalYear = 2017
SET @Date = CONVERT(VARCHAR(10), GETDATE(), 110)

SELECT tblClassifications.ClassDescription,
	cast(Sum(tblPositionControlDetails.FTE) AS DECIMAL(20, 3)) AS SumOfSumOfFTE
FROM tblPositionControlDetails
INNER JOIN dbo.BasePositionFilterFunc(@DistrictID, @CurFiscalYear, @Date, 0, 1) func
	ON func.PositionControlID = tblPositionControlDetails.PositionControlID
INNER JOIN tblClassifications
	ON tblPositionControlDetails.trgClassificationID = tblClassifications.ClassificationID
WHERE IsNull(tblPositionControlDetails.FTE, 0) > 0
	AND tblClassifications.ClassificationGroup IN (
		1,
		2
		)
GROUP BY tblClassifications.ClassDescription,
	tblClassifications.ClassificationID
ORDER BY tblClassifications.ClassificationID

--Details
SELECT ClassDescription,
	JobTitle,
	SiteCode,
	SlotNum,
	FTE,
	ISNULL(Fullname, '') AS Fullname,
	ISNULL(CONVERT(VARCHAR(10), effectivedate, 110), '') AS EffectiveDate,
	ISNULL(CONVERT(VARCHAR(10), inactivedate, 110), '') AS Inactivedate,
	CASE 
		WHEN authcode IS NULL
			THEN 'UNAUTH'
		ELSE ''
		END AS auth
FROM tblPositionControlDetails PC
INNER JOIN BasePositionFilterFunc(@DistrictID, @CurFiscalYear, @Date, 0, 1) func
	ON func.PositionControlID = pc.positioncontrolID
INNER JOIN tblJobTitles jt
	ON jt.JobTitleId = pc.pcJobTitleId
LEFT JOIN tblEmployee e
	ON e.employeeId = pc.employeeId
INNER JOIN tblSite s
	ON s.siteId = pc.SiteId
INNER JOIN tblClassifications c
	ON c.classificatioNid = pc.trgClassificationid
WHERE IsNull(pc.FTE, 0) > 0
	AND c.ClassificationGroup IN (
		1,
		2
		)
ORDER BY trgClassificationId,
	JobTitle,
	SiteCode,
	Fullname



------------------------------------------------------------------------------------------------------------------------------------------
-- Duplicate fundings for Audit


select * from tblaccount
	order by accountstring desc -- 3951 highest num

select * from generalledger
	where accountstring = '09-0090-0-2485-0000-2700-009-0000-XX'
	
select * from tblaccount
	where accountstring = '09-0090-0-2485-0000-2700-009-0000-XX'
	order by accountid asc
	-- (5112, 5113)
	

select * from tblfundingslotdetails
	where fsaccountid in (5112, 5113) -- none used
	order by fsaccountid desc

-- update tblfundingslotdetails set fsaccountid = 3026
	where fsaccountid = 3082
	
	
select * from pyresult
	where accountid in (5112, 5113) -- none used
	order by accountid desc
	
-- update pyresult set accountid = 3026
	where accountid in (3082, 3083)
	
select * from pypositionfunding
	where accountid in (5112, 5113) -- none used
		order by accountid desc

-- update pypositionfunding set accountid = 3026
	where accountid = 3082
	
		
select * from tblPayrollDetailComp
	where accountid in (5112, 5113) -- none used
	order by accountid desc
	
-- update tblPayrollDetailComp set accountid = 5112
	where accountid = 5113
	
select * from tblBudgetDetail 
	where accountid in (5112, 5113) -- none used
	order by accountid desc
	
-- update tblBudgetDetail set accountid = 1606
	where accountid = 2171
	
select * from tblBudgetPositionDetail 
	where accountid in (5112, 5113) -- none used
	order by accountid desc
	
-- update tblBudgetPositionDetail set accountid = 1606
	where accountid = 2171



select * from tblBenefitFunding  
	where accountid in (5112, 5113)	-- none used
	order by accountid desc

select * from PyResultAdjustment  
	where accountid in (5112, 5113)	-- none used
	order by accountid desc
	
select * from CheckDetailFunding  
	where (expenseaccountid in (5112, 5113)	or liabilityaccountid in (5112, 5113))	-- none used

select * from depositDetailfunding   
	where accountid in (5112, 5113)	-- none used
	
select * from JournalentryDetail   
	where accountid in (5112, 5113)	-- none used
	
select * from PODetailFunding   
	where accountid in (5112, 5113)	-- none used
	


---------------------		

delete from tblaccount
	where accountstring = '09-0090-0-2485-0000-2700-009-0000-XX'
	and accountid = 5113
	
delete from generalledger
	where accountstring = '09-0090-0-2485-0000-2700-009-0000-XX'
	and accountid = 5113
------------------------------------------------------------------------------------------------------------------------------------------

-- This are the steps for the ACA one time data import

-- 1) cleanup convfullname
TRUNCATE TABLE convfullname;

-- 2)copy over data from excel to the convfullname table in the following order:
-- EmployeeID, Fullname, ActionTypeID(extra), datefrom(extra2), dateto(extra3), notes(extra4), datecreated(extra5)

--3)Insert them

Select adEMployeeID, ActionTypeID, DateLast, DateNext, Comments, DCreated from tblActionDue

INSERT INTO tblActionDue
(adEMployeeID, ActionTypeID, DateLast, DateNext, Comments, DCreated)
Select EmployeeID, extra, extra2, extra3, extra4, extra5
from convfullname;

------------------------------------------------------------------------------------------------------------------------------------------

--SQL DS Power Remove Sub Transactions

Declare @TimesheetDetailID int
Set @TimesheetdetailID = 1903894
--Absence
select * FROM Tbltimesheetsdetails where timesheetdetailid =@TimesheetdetailID
--Multi Sub related
Select * FROM TblInlieu where iltimesheetdetailid = @TimesheetdetailID
--Sub
Select * FROM TblTimesheetsdetails where xrefSubTSDetailID = @TimesheetdetailID
-- Payroll
Select * FROM tblPayrolldetail where SubForTSDetailID = @TimesheetdetailID

------------------------------------------------------------------------------------

--NOTE:  Need to decide which line or Lines to run for the correct result

BEGIN TRAN

Declare @TimesheetDetailID int
Set @TimesheetdetailID = 1903894

-- (1) ---------------------------------------------------
---Remove Attendance Transaction entirely
Delete Tbltimesheetsdetails where timesheetdetailid =@TimesheetdetailID

-- (2) -------------------------------------------------
--Remove just the sub on the attendance transaction
--Update tblTimesheetsdetails 
--set SubEmployeeID = Null,NeedSub = 0,SubJobNo = Null
--Where timesheetdetailid =@TimesheetdetailID

-- (3) -------------------------------------------------
-- Delete all Multi Sub related transaction detail

Delete TblInlieu where iltimesheetdetailid = @TimesheetdetailID

-- (4) --------------------------------------------------
--Delete Sub Timesheet Transaction

Delete TblTimesheetsdetails where xrefSubTSDetailID = @TimesheetdetailID
-- (5)-------------------------------------------------
--Delete associated Payroll Transaction

Delete tblPayrolldetail where SubForTSDetailID = @TimesheetdetailID

COMMIT TRAN 

ROLLBACK 


------------------------------------------------------------------------------------------------------------------------------------------
-- SQL Find Blank Pending TimeSheet Transactions

Select * from tblpayroll 
	where FiscalYear = yyyy -- year e.g. 2015
	and PayPeriod like 'xxx%' -- Pay Period e.g. Nov 2015
	-- write down the PayrollID 
 
-- Locate the statusID using Core Suite
 
exec admcheckpayroll 10337,506 -- (StatusID, PayrollID)
 
---To find tbltimesheetsdetails
Select * from tbltimesheetsdetails where timesheetdetailid = 1287873 
	---- write down the transaction date and timesheet ID
 
---To find employee id after finding timesheetdetails
select * from tbltimesheets where timesheetid = 463276 
	-- write down the employee ID or the positioncontrolID
 
---To find employee which is causing the problem
Select * from tblemployee where employeeid = 29889
 
---To find position control ID if there isn't an employee ID
select * from tblpositioncontroldetails where positioncontrolid = 61801
 
-- In most cases if you reenter the transaction, this should clear the pending transaction.

------------------------------------------------------------------------------------------------------------------------------------------


-- Erroneous Timesheet Transactions (Audit)
select * from tblPayroll
	where PayPeriod = 'nov 2015' --2322
	

select e.fullname + ' (CONTACT DS)' as description ,
	tsd.timesheetdetailid as ID 
	from tblTimeSheetsDetails tsd  
	inner join tblTimeSheets ts  on ts.timesheetid = tsd.TsTimeSheetID  
	inner join tblEMployee e on e.employeeid  = ts.TsEmployeeid   
	where xRefSubTsDetailID not in (select timesheetdetailid from tblTimesheetsDetails)   
	and ts.TsPayroll = 2322 -- Payroll ID??
	
-- Run the following using the TimeSheetDetailID provided by the Audit

Declare @TimesheetDetailID int
Set @TimesheetdetailID = 190963
--Absence
select * FROM Tbltimesheetsdetails where timesheetdetailid =@TimesheetdetailID
--Multi Sub related
Select * FROM TblInlieu where iltimesheetdetailid = @TimesheetdetailID
--Sub
Select * FROM TblTimesheetsdetails where xrefSubTSDetailID = @TimesheetdetailID
-- Payroll
Select * FROM tblPayrolldetail where SubForTSDetailID = @TimesheetdetailID

------------------------------------------------------------------------------------

--NOTE:  Need to decide which line or Lines to run for the correct result

BEGIN TRAN

Declare @TimesheetDetailID int
Set @TimesheetdetailID = 1432216

-- (1) ---------------------------------------------------
---Remove Attendance Transaction entirely
Delete Tbltimesheetsdetails where timesheetdetailid =@TimesheetdetailID
-- (2) -------------------------------------------------
--Remove just the sub on the attendance transaction
--Update tblTimesheetsdetails 
--set SubEmployeeID = Null,NeedSub = 0,SubJobNo = Null
--Where timesheetdetailid =@TimesheetdetailID
-- (3) -------------------------------------------------
-- Delete all Multi Sub related transaction detail

--Delete TblInlieu where iltimesheetdetailid = @TimesheetdetailID
-- (4) --------------------------------------------------
--Delete Sub Timesheet Transaction

Delete TblTimesheetsdetails where xrefSubTSDetailID = @TimesheetdetailID
-- (5)-------------------------------------------------
--Delete associated Payroll Transaction

Delete tblPayrolldetail where SubForTSDetailID = @TimesheetdetailID

COMMIT TRAN 

ROLLBACK 

------------------------------------------------------------------------------------------------------------------------------------------

Select * from Tbltimesheetsdetails where tstimesheetid in(2519342) --and tsdate >'10/18/2015' and tsdate <'10/30/2015' (C)
-Find the timesheetdetail(s) records and note the timesheetdetailid(s)
-- Run the statements below for each detailid

-----------------------------------------------------------------------------------
--verification block.  Are these the right transactions
-----------------------------------------------------------------------------------
Declare @TimesheetDetailID int
Set @TimesheetdetailID =3674097

select * FROM Tbltimesheetsdetails where timesheetdetailid =@TimesheetdetailID
-- Payroll EWA
Select * FROM tblPayrolldetail where Timesheetdetailid = @TimesheetdetailID
------Select * FROM tblPayrolldetail where positioncontrolid = 54294 and payrollid = 1702
------------------------------------------------------------------------------------
--Delete block -- Remove the transactions
------------------------------------------------------------------------------------
--Select * from Tbltimesheetsdetails where tstimesheetid =2249149
Begin Tran
Declare @TimesheetDetailID int
Set @TimesheetdetailID =3674097
Delete Tbltimesheetsdetails where timesheetdetailid =@TimesheetdetailID
--Delete Payroll EWA
Delete FROM tblPayrolldetail where Timesheetdetailid = @TimesheetdetailID

Commit Tran

Rollback

------------------------------------------------------------------------------------------------------------------------------------------

(-- To find the incomplete time sheet, run the following statement.

Select * FROM tbltimesheets where Payrollstatusid = 2571631 and posted =0   "(2571631) = the payrollstatusid on the line they are referencing)"

"Enter Timesheet Id in the statement below"

BEGIN TRAN 

UPDATE TBLTIMESHEETS 

SET POSTED = 1

WHERE TIMESHEETID = 1664268 AND POSTED = 0

COMMIT TRAN )

ROLLBACK 

------------------------------------------------------------------------------------------------------------------------------------------
-- WIP with Rene pyEmployee

-- Locate the PayrollRunID
select * from PayrollRun
	Where [Description] = 'DEC 2015 Stipends'
	-- -- DEC 2015 Stipends = 81


-- Paste the employee id in ConvFullName
-- Create pyEmployee entries base on the employee id on convFullname
insert into pyEmployee 
	(
		ReferenceKey, 
		ReferenceSource,
		ReferenceExtra, 
		SSN,
		LastName,
		FirstName,
		MiddleName,
		MailingAddressId,
		HomeAddressId,
		BirthDate,
		HireDate,
		TerminateDate,
		EmploymentStatusId,
		WarrantSiteID,
		IsDeferredPay,
		PayCode,
		FedMaritalStatus,
		FedExemptions,
		FedAddAmt,
		FedEIC,
		FedSpouseEICCertificateID,
		StateMaritalStatus,
		StateExemptions,
		StateAddAmt,
		PayrollRunID
	)
select distinct
	tblEmployee.EmployeeID,
	1,
	Null,
	tblEmployee.SocSecNo,
	tblEmployee.LName,
	tblEmployee.FName,
	tblEmployee.MI,
	tblEmployee.MailingAddressId,
	tblEmployee.HomeAddressId,
	tblEmployee.DOB,
	tblEmployee.HireDate,
	tblEmployee.TerminateDate,
	tblEmployee.StatusID,
	tblEmployee.WarrantSiteID,
	tblEmployee.IsDeferredPay,
	Null,
	tblEmployee.FedMaritalStatus,
	tblEmployee.FedExemptions,
	tblEmployee.FedAddAmt,
	tblEmployee.FedEIC,
	tblEmployee.FedSpouseEICCertificateID,
	tblEmployee.StateMaritalStatus,
	tblEmployee.StateExemptions,
	tblEmployee.StateAddAmt,
	81
from tblEmployee
	Inner Join ConvFullname
		On tblEmployee.EmployeeID = ConvFullname.EmployeeID;

-- Verify they are in pyEmployee
select 
	pyEmployee.id,
	pyEmployee.ReferenceKey,
	convFullName.EmployeeID
	from pyEmployee
	inner join convFullName
		on pyEmployee.ReferenceKey = convFullName.EmployeeID
	Where (pyEmployee.PayrollRunID = 81)
	Group by
		pyEmployee.id,
		pyEmployee.ReferenceKey,
		convFullName.EmployeeID
	Order by convFullName.EmployeeID asc;
	
-- in ConvFullname, Set Extra13 = pyEmployeeID
update cf set Extra13 = py.id from pyEmployee py
	inner join convfullname cf
		on cf.employeeid = py.ReferenceKey
		where (py.PayrollRunID = 81);
		
-- create inserts for pyPosition

-- use ConvFullName.Extra3 to get PensionID
Update ConvFullName
	Set Extra14 = rc.RetireClassID from tblRetireClass rc
		inner join convFullName cf
			on cf.Extra3 = rc.RetireClass
	
-- Test the data set
select 
	convFullName.employeeID,
	convFullName.Extra13 as pyEmployeeID,
	Null as ReferenceKey,
	-1 as ReferenceSource,
	Null as ReferenceExtra,
	tblEmployee.ClassificationId,
	convFullName.extra2 as [Description],
	convFullName.Extra14 as PensionID,
	1 as HasBenefitsDeducted,
	1 as PayPercent,
	81 as PayrollRunID,
	1 as OverRidden,
	tblEmployee.WarrantSiteID as SiteID,
	tblEmployee.PayCycle as Months
from convFullName
	inner join tblEmployee
		on convFullName.employeeID = tblEmployee.EmployeeID
order by convFullName.employeeID;

-- insert them into pyPosition
Insert Into pyPosition
	(
		pyEmployeeID,
		ReferenceKey,
		ReferenceSource,
		ReferenceExtra,
		ClassificationId,
		[Description],
		PensionID,
		HasBenefitsDeducted,
		PayPercent,
		PayrollRunID,
		IsOverRidden,
		SiteID,
		Months
	)
Select
	convFullName.Extra13,
	Null,
	-1,
	Null,
	tblEmployee.ClassificationId,
	convFullName.extra2,
	convFullName.Extra14,
	1,
	1,
	81,
	1,
	tblEmployee.WarrantSiteID,
	tblEmployee.PayCycle
from convFullName
	inner join tblEmployee
		on convFullName.employeeID = tblEmployee.EmployeeID;

Select * from pyPosition pp
	inner join convFullName cf
		on cf.extra13 = pp.pyEmployeeID
		and cf.extra2 = pp.[description]
	where pp.payrollrunid = 81 
		and pp.referencesource = -1

Update cf 
	set Extra15 = pp.id -- pyPositionID
	from pyPosition pp
	inner join convFullName cf
		on cf.extra13 = pp.pyEmployeeID
		and cf.extra2 = pp.[description]
	where pp.payrollrunid = 81 
		and pp.referencesource = -1
	
--- create inserts from pyCompensation
	
select * from ds_global..pyCompensationType -- 9 Other = Stipend

-- Locate fields we need in pyCompensation
Select * from pyCompensation

-- Rate = Extra6
-- Amount = Extra9
-- from date = extra10
-- to date  = extra11
-- Referencesource = -1
-- ReferenceKey = Null
-- ReferenceExtra = Null
-- IsOverriden = 1
-- PayrollRunID = 81
-- Description = Extra4

-- Link to ConvFullName
Select
	ConvFullName.Extra13 as pyEmployeeID,
	ConvFullName.Extra15 as pyPositionID,
	9 as pyCompensationTypeID,
	ConvFullName.Extra14 as PensionCode,
	1 as HasBenefitsDeducted,
	1 as PayPercent,
	ConvFullName.Extra6 as Rate ,
	Null as ReferenceKey,
	-1 as ReferenceSource,
	Null as ReferenceExtra,
	ConvFullName.Extra9 as Amount,
	ConvFullName.Extra10 as FromDate,
	ConvFullName.Extra11 as ToDate,
	1 as IsOverRidden,
	81 as PayrollRunID,
	ConvFullName.Extra4 as [Description]
from ConvFullName
	inner join tblEmployee
		on ConvFullName.EmployeeID = tblEmployee.EmployeeID
		
-- do the insert
Insert into pyCompensation
	(
		pyEmployeeID,
		pyPositionID,
		pyCompensationTypeID,
		PensionCode,
		HasBenefitsDeducted,
		PayPercent,
		Rate ,
		ReferenceKey,
		ReferenceSource,
		ReferenceExtra,
		Amount,
		FromDate,
		ToDate,
		IsOverRidden,
		PayrollRunID,
		[Description]
	)
Select
	ConvFullName.Extra13,
	ConvFullName.Extra15,
	9,
	ConvFullName.Extra14,
	1,
	1,
	ConvFullName.Extra6,
	Null,
	-1,
	Null,
	ConvFullName.Extra9,
	ConvFullName.Extra10,
	ConvFullName.Extra11,
	1,
	81,
	ConvFullName.Extra4
from ConvFullName
	inner join tblEmployee
		on ConvFullName.EmployeeID = tblEmployee.EmployeeID
		
-- verify
select * from pyCompensation 
	where PayrollRunID = 81
	
-- Update convFullName
-- extra16 = pyCompensationID

Select * from pyCompensation pc
	inner join convFullName cf
		on cf.extra13 = pc.pyEmployeeID
		and cf.extra15 = pc.pyPositionID
	where pc.payrollrunid = 81 
		and pc.referencesource = -1

Update cf 
	set Extra16 = pc.id -- pyCompensationID
	from pyCompensation pc
	inner join convFullName cf
	on cf.extra13 = pc.pyEmployeeID
		and cf.extra15 = pc.pyPositionID
	where pc.payrollrunid = 81 
		and pc.referencesource = -1
		
-- pyPositionFunding
--		Extra15 = pyPositionID
--		AccountID = Extra17
--		Percentage = 1
--		ReferenceKey = Null
--		ReferenceSource = -1
--		IsOverriden = 1
--		PayrollRunID = 81

Update convFullName
	set Extra17 = ta.AccountID
from convFullName
	inner join tblAccount ta
		on convFullName.extra12 = ta.accountstring;
		
-- check for Nulls in ConvFullName.Extra17

select * from ConvFullName 
	Where Extra17 is Null
	
-- link it to ConvFullName
select 
	ConvFullName.Extra15 as pyPositionID,
	ConvFullName.Extra17 as AccountID,
	1 as Percentage,
	Null as ReferenceKey,
	-1 as ReferenceSource,
	1 as IsOverriden,
	81 as PayrollRunID
from ConvFullName;

-- Insert them into pyPositionFunding
Insert into pyPositionFunding
	(
		pyPositionID,
		AccountID,
		Percentage,
		ReferenceKey,
		ReferenceSource,
		IsOverridden,
		PayrollRunID
	)
select 
	ConvFullName.Extra15,
	ConvFullName.Extra17,
	1,
	Null,
	-1,
	1,
	81
from ConvFullName;

select * from pyPositionFunding
	where PayrollRunID = 81
	
select * from pyEmployee
	where ReferenceKey = 55

Update pyEmployee
	Set FedExemptions = Null
	where PayrollRunId= 81
	and FedExemptions = 0
	
select * from PayrollRun

update PayrollRun
	Set DateToBePrinted = '12/31/2015' -- should be in same year
	Where ID = 81
	
-- Try Calculating Net for one employee

		
	
------------------------------------------------------------------------------------------------------------------------------------------

-- manual import of tblCompDetails data
-- Since Rene M was using convFullName
-- decided to use ConvLookUp

-- whack whatever's there 
truncate table convLookup

-- Paste EmployeeID, SlotNum
select * from convLookup

-- Link ConvLookUp.SlotNum to tblPositionControlDetails.PositionControlID
select 
	convLookUp.SlotNum,
	tp.PositionControlID
from convLookUp
	inner join tblPositionControlDetails tp
		on convLookUp.SlotNum = tp.SlotNum
	where InActiveDate is Null;

-- Update ConvFullName Extra1 = PositionControlID
Update convLookUp
	set Extra1 = tp.PositionControlID
from convLookUp
	inner join tblPositionControlDetails tp
		on convLookUp.SlotNum = tp.SlotNum;
		
-- Get CompTypeID
-- Extra2 = SalaryMatrixID

select 
	convLookUp.Extra2,
	sm.smCompTypeID
from convLookUp
	inner join tblSalaryMatrix sm
		on convLookUp.Extra2 = sm.SalaryMatrixID;

Update convLookUp
	set Extra3 = sm.smCompTypeID -- CompTypeID
from convLookUp
	inner join tblSalaryMatrix sm
		on convLookUp.Extra2 = sm.SalaryMatrixID;
		
		
-- Get CompAmount
-- Extra2 = SalaryMatrixID

select 
	convLookUp.Extra2,
	sm.Value
from convLookUp
	inner join tblSalaryMatrix sm
		on convLookUp.Extra2 = sm.SalaryMatrixID;
		
Update convLookUp
	set Extra4 = sm.Value -- CompAmount
from convLookUp
	inner join tblSalaryMatrix sm
		on convLookUp.Extra2 = sm.SalaryMatrixID;

--- insert  into tblCompDetails
Insert into tblCompDetails
(
	FiscalYear,
	EmployeeID,
	cdPositionControlID,
	CompTypeID,
	SalaryMatrixID,
	CompAmount,
	Notes,
	DCreated,
	EffectiveDate,
	InActiveDate,
	OldID,
	trgDistrictID
)
select 
	2015,
	EmployeeID,
	Extra1,
	Extra3,
	Extra2,
	Extra4,
	Extra5,
	Extra6,
	Extra7,
	Extra8,
	Extra9,
	Extra10
from convLookUp





select * from tblSalaryMatrix
	where SalaryMatrixID = 1848

select * from tblCompDetails


------------------------------------------------------------------------------------------------------------------------------------------
-- importing leaves (ConvLeaveBalance)


Break
truncate table convLeaveBalance
  
--employeeID
Update convLeaveBalance set EmployeeID =e.employeeID from tblEmployee e inner join convLeaveBalance c on c.SSN=e.SocSecNo
Select Distinct SSN from convLeaveBalance where EmployeeID is null
--cleanup blanks
delete from convLeaveBalance where isnull(entitlement,0)=0 and isnull(rollover,0)=0
--LeaveTypeCategoryID
select distinct leaveTypeDesc from convLeaveBalance
Select ltc.LeavetypeCategoryID,  ltc.LeavetypeCategory
	from DS_global..tblLeaveTypecategory ltc inner join tblLEaveTypecategorybydistrict ltcd on ltcd.LeaveTypeCategoryID=ltc.leavetypecategoryID
  
  
  
  
update convLeaveBalance set LeaveTypeCategoryID=8 where leaveTypeDesc='Sick'--EWCSD
update convLeaveBalance set LeaveTypeCategoryID=9 where leaveTypeDesc='Vacation'--EWCSD
update convLeaveBalance set LeaveTypeCategoryID=178 where leaveTypeDesc='PN-Compelling Reason'--EWCSD
--check
select * from convLeaveBalance where leavetypecategoryid is null
--Add comments?
 --if no comments were given run first update / If some comments were given run second statement
update convLeaveBalance set comments = 'Imported'
update convLEaveBalance set comments=isnull(comments,'') + ' (Imported)'
--move comments from a dedicated comments line to "sick"
 /*   update convLeaveBalance set comments=c.comments
	from (select EmployeeID, comments from convLeaveBalance where comments is not null) c
	where c.employeeID=convLeaveBalance.EmployeeID and convLeaveBalance.leavetypecategoryID=8*/
	--show those that didn't match
	select * from convLeaveBalance where comments not in (select comments from convLeaveBalance where leavetypecategoryID=8 and comments is not null)
	  
	  
	  
--Entitlement
insert into tblLeaveEntitlement 
(
	FiscalYear, 
	EMployeeID, 
	/*slotnum,*/ 
	LeaveTypeCategoryID, 
	IsRollover, 
	Amt, 
	Comments, 
	Dcreated
)
Select 
	2015, 
	EmployeeID, 
	/*slotnum,*/ 
	LeaveTypeCategoryID, 
	0,
	Entitlement, 
	Comments, 
	getdate()
from convLeaveBalance 
	where EmployeeID is not null 
	and isnull(Entitlement,0)<>0 
	and leaveTypeCategoryID is not null
	  
	  
	
--Rollover
insert into tblLeaveEntitlement 
(
	FiscalYear, 
	EMployeeID, 
	/*slotnum, */
	LeaveTypeCategoryID, 
	IsRollover, 
	Amt, 
	Comments, 
	Dcreated
)
Select 
	2015, 
	EmployeeID, 
	/*slotnum,*/ 
	LeaveTypeCategoryID, 
	1,
	Rollover, 
	Comments, 
	getdate()
from convLeaveBalance 
	where EmployeeID is not null 
	and isnull(Rollover,0)<>0 
	and leaveTypeCategoryID is not null

	  
	  
exec spLeaveRecalc 1017,2015 ---change the district ID
  
--select * from tblDistrict
--select * from tblLeaveEntitlement
--select * from convLeaveBalance where employeeID in (3,3073)
--select fullname from tblEmployee where employeeID=3


------------------------------------------------------------------------------------------------------------------------------------------

-- -- -- -- -- -- -Update EWA rates-- -- -- -- -- -- -- -

Declare @Date datetime
Declare @CurFiscalYear int
Set @Date = '12/09/15'--Today or Date of Rate
Set @CurFiscalYear = 2015

--Review
select 
	FullName,
	WorkAgreementid, 
	Title, 
	Cast(Round(dbo.funcHourlyBySlotNumByDate(tblWorkagreement.SlotNum, @Date, tblWorkagreement.Employeeid), 3) as Dec(10, 3)) as NewRate, 
	Rate as OldRate 
FROM tblWorkagreement 
	INNER JOIN tblemployee 
		ON Tblemployee.Employeeid = tblWorkagreement.Employeeid
	where RateClassGroup = 2 
	and AutoRateAssign = 1 
	and wafiscalyear = @CurFiscalYear 
	and DateCancelled is null 
	and Authorized = 1 
	and WACompType IN(1, 6) 
	and dbo.funcHourlyBySlotNumByDate(tblWorkagreement.SlotNum, @Date, tblWorkagreement.Employeeid) > 0


--Update
Update tblWorkagreement
	Set Rate = Cast(Round(dbo.funcHourlyBySlotNumByDate(tblWorkagreement.SlotNum, @Date, tblWorkagreement.Employeeid), 3) as Dec(10, 3))
FROM tblWorkagreement INNER JOIN tblemployee ON Tblemployee.Employeeid = tblWorkagreement.Employeeid
	where RateClassGroup = 2 
	and AutoRateAssign = 1 
	and wafiscalyear = @CurFiscalYear 
	and DateCancelled is null 
	and Authorized = 1 
	and WACompType IN(1, 6) 
	and dbo.funcHourlyBySlotNumByDate(tblWorkagreement.SlotNum, @Date, tblWorkagreement.Employeeid) > 0


------------------------------------------------------------------------------------------------------------------------------------------

--Bills List
--This is the code Kathy@Schiller wants after every AP push

-- Locate the check batches are requested by Schiller
Select * from checkbatch order by Id desc
-- 605	Dec. 16, 2015-A
-- 609 Dec. 16, 2015-B
-- 606 Dec. 1, 2015

select 
	v.Companyname, 
	ponum, 
	i.invoiceNum, 
	po.Summary, 
	sum(PODT.Amount * podf.[Percent] * case when podt.POdetailTransactionTypeId = 1 then -1 else 1 end), 
	a.accountString
from PO 
	inner join poDetail pod 
		on pod.poId = po.Id
	inner join podetailfunding podf 
		on podf.PODetailId = pod.Id 
	left join tblAccount a 
		on a.accountId = podf.AccountId
	inner join podetailtransaction podt 
		on podt.PODetailId = pod.Id 
		and podt.POdetailTransactionTypeId in (5, 1) 
	inner join invoice i 
		on i.Id = podt.InvoiceId
	inner join checkdetail cd 
		on cd.Referenceid = i.Id 
		and cd.vendorId = i.VendorId 
	inner join [Check] c 
		on c.Id = cd.CheckId
	inner join vendor v 
		on v.Id = po.VendorId
	Where c.CheckBatchId = 605 -- go through the list of check batches
group by v.Companyname, 
	ponum, 
	i.invoiceNum, 
	po.Summary, 
	a.accountString
order by CompanyName

------------------------------------------------------------------------------------------------------------------------------------------


--- get teacher avg salary by site and FY




sp_columns tblEmployee
sp_columns tblPositionControlDetails
sp_columns tbljobTitles
sp_columns tblCompDetails

select * from tbljobTitles
	where calcpaybyhours = 1

select 
	tblCompDetails.FiscalYear,
	tblEmployee.SocSecNo,
	tblEmployee.FullName,
	tblEmployee.HireDate,
	tblClassifications.ClassDescription,
	tblStatus.[Status],
	tblPositionControlDetails.SlotNum,
	tblJobTitles.JobTitle,
	tblSite.SiteName,
	tblPositionControlDetails.EffectiveDate,
	tblPositionControlDetails.InActiveDate,
	tblCompDetails.CompAmount,
	tblCompDetails.Hourly,
	tblCompDetails.Monthly,
	tblCompDetails.Annual
from tblEmployee
	Inner Join tblClassifications
		on tblEmployee.ClassificationId = tblClassifications.ClassificationID
	Inner Join tblStatus
		on tblEmployee.StatusID = tblStatus.StatusID
	Inner Join tblPositionControlDetails
		on tblEmployee.EmployeeID = tblPositionControlDetails.EmployeeID
	Inner Join tblJobTitles
		on tblPositionControlDetails.pcJobTitleID = tblJobTitles.JobTitleID
	Inner Join tblSite
		on tblEmployee.WarrantSiteID = tblSite.SiteID
	Inner Join tblCompDetails
		on tblEmployee.EmployeeID = tblCompDetails.EmployeeID
	where tblCompDetails.FiscalYear = 2014
	and tblEmployee.ClassificationId = 1
	and (tblPositionControlDetails.InActiveDate between '07/01/2014' and '06/30/2015'
	or tblPositionControlDetails.InActiveDate is Null)
	and (tblPositionControlDetails.EffectiveDate <= '06/30/2015'
	or tblPositionControlDetails.EffectiveDate is Null)
Group By
	tblCompDetails.FiscalYear,
	tblEmployee.SocSecNo,
	tblEmployee.FullName,
	tblEmployee.HireDate,
	tblClassifications.ClassDescription,
	tblStatus.[Status],
	tblPositionControlDetails.SlotNum,
	tblJobTitles.JobTitle,
	tblSite.SiteName,
	tblPositionControlDetails.EffectiveDate,
	tblPositionControlDetails.InActiveDate,
	tblCompDetails.CompAmount,
	tblCompDetails.Hourly,
	tblCompDetails.Monthly,
	tblCompDetails.Annual
Order by FullName Asc;


------------------------------------------------------------------------------------------------------------------------------------------
--Beginning Balances for NCExternal
break

--whack convBudget's content
Truncate table ConvBudget

-- copy amount, and string parts to convBudget

--pad the extra 0s that we need
update convBudget set Col01=replicate('0', ac.length-len(ltrim(rtrim(isnull(col01,'')))))+ltrim(rtrim(isnull(col01,''))) from convBudget cross join tblAccountColumn ac where ac.AccountColumn=1
update convBudget set Col02=replicate('0', ac.length-len(ltrim(rtrim(isnull(col02,'')))))+ltrim(rtrim(isnull(col02,''))) from convBudget cross join tblAccountColumn ac where ac.AccountColumn=2
update convBudget set Col03=replicate('0', ac.length-len(ltrim(rtrim(isnull(col03,'')))))+ltrim(rtrim(isnull(col03,''))) from convBudget cross join tblAccountColumn ac where ac.AccountColumn=3
update convBudget set Col04=replicate('0', ac.length-len(ltrim(rtrim(isnull(col04,'')))))+ltrim(rtrim(isnull(col04,''))) from convBudget cross join tblAccountColumn ac where ac.AccountColumn=4
update convBudget set Col05=replicate('0', ac.length-len(ltrim(rtrim(isnull(col05,'')))))+ltrim(rtrim(isnull(col05,''))) from convBudget cross join tblAccountColumn ac where ac.AccountColumn=5
update convBudget set Col06=replicate('0', ac.length-len(ltrim(rtrim(isnull(col06,'')))))+ltrim(rtrim(isnull(col06,''))) from convBudget cross join tblAccountColumn ac where ac.AccountColumn=6
update convBudget set Col07=replicate('0', ac.length-len(ltrim(rtrim(isnull(col07,'')))))+ltrim(rtrim(isnull(col07,''))) from convBudget cross join tblAccountColumn ac where ac.AccountColumn=7
update convBudget set Col08=replicate('0', ac.length-len(ltrim(rtrim(isnull(col08,'')))))+ltrim(rtrim(isnull(col08,''))) from convBudget cross join tblAccountColumn ac where ac.AccountColumn=8
update convBudget set Col09=replicate('0', ac.length-len(ltrim(rtrim(isnull(col09,'')))))+ltrim(rtrim(isnull(col09,''))) from convBudget cross join tblAccountColumn ac where ac.AccountColumn=9
update convBudget set Col10=replicate('0', ac.length-len(ltrim(rtrim(isnull(col10,'')))))+ltrim(rtrim(isnull(col10,''))) from convBudget cross join tblAccountColumn ac where ac.AccountColumn=10
update convBudget set Col11=replicate('0', ac.length-len(ltrim(rtrim(isnull(col11,'')))))+ltrim(rtrim(isnull(col11,''))) from convBudget cross join tblAccountColumn ac where ac.AccountColumn=11
update convBudget set Col12=replicate('0', ac.length-len(ltrim(rtrim(isnull(col12,'')))))+ltrim(rtrim(isnull(col12,''))) from convBudget cross join tblAccountColumn ac where ac.AccountColumn=12
update convBudget set Col13=replicate('0', ac.length-len(ltrim(rtrim(isnull(col13,'')))))+ltrim(rtrim(isnull(col13,''))) from convBudget cross join tblAccountColumn ac where ac.AccountColumn=13

-- put the columns for the account string together
update convBudget set accountstring=Col01+'-'+Col02+'-'+Col03+'-'+Col04+'-'+Col05+'-'+Col06+'-'+Col07+'-'+Col08

-- check whether we have the right lengths for the strings
select distinct len(accountstring) from tblAccount
select distinct len(accountstring) from convBudget

-- get the account ids of each account string
EXEC SPBUdgetImport 0,0,0

--check the beginning balance
Select * from GeneralLedger where fiscalyearID = 2014

-- update them
UPDATE GeneralLedger 
	Set BeginningBalance = cb.Amount 
from ConvBudget Cb
	inner join GeneralLedger Gl 
		on Gl.AccountID = cb.AccountID
		and GL.FiscalYeariD = 2014

------------------------------------------------------------------------------------------------------------------------------------------
WIP

select * from PayrollRun
where [Description]like 'Dec 2015 sup%' -- 1056

select *  from tblTimeSheets ts
	where tsPayroll = 1056
		and tsTimeType in (7,8)

sp_columns tblTimeSheetsDetails
	
	
Select Distinct
	  tsd.timesheetdetailid,
	  t.timesheetid,
	  tsd.tsTimesheetid,
	  T.tsPayroll,
	  T2.timesheetid,
	  T2.tsPayroll,
	  tsd.tsdate as subdate,
	  tsd.DEntered,
	  AbsentE.FullName as AbsentEmployee,
	  AbsentP.slotNum as AbsentSlot,
	  se.FullName as SubEmployee,
	  ste.SiteName
FROM tbltimesheetsdetails tsd
INNER JOIN tbltimesheetsdetails tsd2 ON tsd.xrefsubtsdetailid = tsd2.timesheetdetailid
INNER JOIN tbltimesheets AbsentT ON AbsentT.timesheetid = tsd2.tstimesheetid
INNER JOIN tblPositioncontroldetails AbsentP ON AbsentP.Positioncontrolid = AbsentT.tsPositioncontrolid
LEFT JOIN tblemployee AbsentE ON AbsentE.Employeeid = AbsentT.tsEmployeeid
	  INNER JOIN tbltimesheets T 
			ON T.timesheetid = tsd.tstimesheetid 
	  INNER JOIN tblpayrollstatus P 
			ON T.Payrollstatusid = P.PayrollstatusID
	  INNER JOIN tblPayrollstatus P2 
			ON P2.siteid = P.Siteid and P2.statustype = P.statusType 
			and P.ClassificationGroup = P2.ClassificationGroup 
			and P2.Payrollid = 1056 -- PayrollID where they should be
	  LEFT JOIN tbltimesheets T2 
			ON T.tstimetype = T2.tstimetype 
			and T.tsemployeeid = T2.tsEmployeeid 
			and T2.tsPayroll = 1056 -- PayrollID where they should be
Inner Join tblEmployee se
	on t.tsemployeeID = se.EmployeeID
inner join tblPositionControlDetails pc
	on AbsentE.employeeID = pc.EmployeeID
Inner Join tblSite ste
	on pc.SiteID = ste.SiteID
where tsd.tsDate between '11/19/15' and '12/18/15' -- Date Range of the timesheets processed
	  and T.TsPayroll  = 1056 -- PayrollID where they are
	  and T.tstimetype IN(7,8)
	  and tsd.DEntered >= '12/15/2015'
order by AbsentE.FullName,
		tsd.tsdate;

------------------------------------------------------------------------------------------------------------------------------------------
-- Close out board meeting 
Declare @BoardDate as datetime
Declare @FiscalYear as int

Set @BoardDate = '1/12/2016'---change date

Set @FiscalYear = 2015 --- check correct year

exec spUpdateBoardDatesSUHSD @BoardDate, @Fiscalyear


------------------------------------------------------------------------------------------------------------------------------------------

-- Tax Table Extract

select
	pyw.CalendarYearId,
	dsg.[Description] as WithHoldingType,
	pyw.Name,
	ven.companyname,
	pyw.EffectiveDate,
	pyw.InactiveDate,
	pyw.[Min],
	pyw.[Max],
	DistrictRate,
	pyw.EmployeeRate,
	pyw.FiscalYearCap,
	pyw.CalendarYearCap,
	pyw.FilterId,
	pyw.DistrictExpenseAccountMask,
	pyw.DistrictLiabilityAccountMask,
	pyw.EmployeeLiabilityAccountMask,
	pyw.PayPeriodFiscalYearCap,
	pyw.Flag,
	pyw.ParentDistrictLiabilityAccountMask,
	pyw.ParentEmployeeLiabilityAccountMask,
	pyw.ParentCashAccountMask,
	pyw.IsReducedWorkload,
	pyw.IsEPMC
from pyWithholding pyw
	inner join ds_global..pyWithholdingType dsg
		on pyw.pyWithholdingtypeid = dsg.id
	inner join vendor ven
		on pyw.vendorId = ven.id
	where pyw.CalendarYearId = 2016;

------------------------------------------------------------------------------------------------------------------------------------------

-- Update Notes Tab

-- Test for one employee
select * from tblEmployeeLog 
	inner join
		(
			select 
				el.LogID as ID, 
				e.fullname, 
				el.Employeeid,
				el.EnterbyID,
				u.Employeeid as userID 
			from tblEmployeeLog el 
				inner join tblusers u 
					on u.userid = el.EnterByID
				inner join tblEMployee e 
					on e.Employeeid = el.Employeeid
			where e.Employeeid = 34479  --use for single employee
		)t1
		on t1.id = tblEmployeeLog.LogID


-- Verify if the employeeid has been changed
select 
	employeeid, 
	fullname 
from tblemployee
	where employeeid = 33856 -- enter what the employeeid should be


-- update the whole log table
UPDATE tblEmployeeLog 
	set EnterByiD = t1.UserID  
from tblEmployeeLog
	inner join
	(
		select el.LogID as ID, e.fullname, el.Employeeid,el.EnterbyID,u.Employeeid as userID from tblEmployeeLog el inner join tblusers u on u.userid = el.EnterByID
		inner join tblEMployee e on e.Employeeid = el.Employeeid
		--where e.Employeeid = 34479  --use for single employee
	)t1
	on t1.id = tblEmployeeLog.LogID


------------------------------------------------------------------------------------------------------------------------------------------



--NEW PRA REPORT
	 
	 
DECLARE @StartDate datetime
DECLARE @EndDate datetime
SET @StartDate = '1/1/2015'
SET @EndDate = '12/31/2015'
	 
SELECT
	e.lname,E.fname,
	pcd.SlotNum + ' : ' + jt.JobTitle ,
	s.Sitename,
	sum(GrossPay.Amount) as GrossPay ,
	sum(StipendPay.Amount) as StipendPay,
	sum(OvertimePay.Amount) as OverTimePay,
	sum(DistrictMedi.Amount) as DistrictMedi,
	sum(DistrictFica.Amount) as DistrictFica,
	sum(employerPaidMedical.Amount) as EmployerPaidMedical,
	sum(DistrictRetirement.Amount) as DistrictRetirement,
	sum(OPEB.Amount) as OPEB,
	sum(WorkComp.Amount) as WorkComp
from tblemployee e
	INNER JOIN tblSite s
		on e.WarrantSiteID = s.SiteId
	LEFT JOIN tblPositionControlDetails pcd
		on pcd.employeeid = e.Employeeid 
		and (pcd.EffectiveDate is null or pcd.effectivedate <= getDate()) 
		and	(pcd.Inactivedate is null or pcd.InactiveDate >= getDate())
	LEFT JOIN tblJobTitles JT
		on jt.JOBTitleid = pcd.pcJobTitleid
	INNER JOIN
		(
			--GROSS PAY
			SELECT e.referencekey,sum(c.amount) as Amount from PyCompensation c inner join PayrollRun
			pr on pr.id = c.PayrollRunID
			inner Join pyEmployee e
			on e.id = c.pyEmployeeid
			where c.Description = 'Base Pay'
			and pr.DateTobePrinted between @StartDate and @EndDate
			group by e.ReferenceKey
		)GrossPay
		on GrossPay.Referencekey = e.employeeid
	LEFT JOIN
		(--stipend
			SELECT e.Referencekey,sum(c.amount)as Amount from PyCompensation c inner join pyEmployee e
			on e.id = c.pyEmployeeid
			inner join PayrollRun pr on pr.id = e.payrollRunid
			where pr.DateTobePrinted between @StartDate and @EndDate
			and (c.Description not like '%base pay%' or c.Description is null)
			and c.pyCompensationTypeID not in (101,102,103,104)
			group by e.referencekey
		)StipendPay 
		on StipendPay.Referencekey = e.employeeid
	LEFT JOIN
		(
			SELECT e.Referencekey,sum(c.amount)as Amount from PyCompensation c inner join pyEmployee e
			on e.id = c.pyEmployeeid
			inner join PayrollRun pr on pr.id = e.payrollRunid
			where pr.DateTobePrinted between @StartDate and @EndDate
			and c.Description not like '%base pay%'
			and c.pyCompensationTypeid in (101,102,103,104)
			group by e.referencekey
		)OVERTIMEPAY
		on OverTimePay.Referencekey = e.Employeeid
	LEFT JOIN
		(
			--DiSTRICT FICA
			SELECT e.Referencekey,sum(r.amount)as Amount from pyResult r inner join pyEmployee e
			on e.id = r.pyEmployeeid
			inner join PayrollRun pr on pr.id = e.payrollRunid
			where pr.DateTobePrinted between @StartDate and @EndDate
			and r.pyResultTypeid in (53)
			group by e.ReferenceKey
		)districtFICA
		on districtFica.REferencekey = e.Employeeid
	LEFT JOIN
		(
			--District Medi
			SELECT e.Referencekey,sum(r.amount)as Amount from pyResult r inner join pyEmployee e
			on e.id = r.pyEmployeeid
			inner join PayrollRun pr on pr.id = e.payrollRunid
			where pr.DateTobePrinted between @StartDate and @EndDate
			and r.pyResultTypeid in (54)
			group by e.ReferenceKey
		)districtMedi
		on districtMedi.referencekey = e.employeeid
	LEFT JOIN
		(--Employer Paid Medical
			select e.Referencekey,sum(amount)AS Amount from pyResult r
			inner join pyEmployee e on e.id = r.pyEmployeeid
			inner join pyDeduction d on d.id = r.pyDeductionid
			inner join pyDeductionPlan dp on dp.id = d.PyDeductionPlanid
			where dp.pyDeductionTypeid in (7,8)
			and e.payrollrunid in (select id from PayrollRun where DateToBePrinted between @StartDate and @EndDate)
			and r.PyResultTypeid = 30
			group by e.referencekey
		)EmployerPaidMedical
		on employerPaidmedical.referencekey = e.employeeid
	LEFT JOIN
		(--District Retirement
			select e.Referencekey,sum(amount)AS Amount from pyResult r
			inner join pyEmployee e on e.id = r.pyEmployeeid
			and e.payrollrunid in (select id from PayrollRun where DateToBePrinted between @StartDate and @EndDate)
			and r.PyResultTypeid = 50
			group by e.referencekey
		)DistrictRetirement
		on DistrictRetirement.referencekey = e.Employeeid
	LEFT JOIN
		(
			--OPEB
			SELECT e.Referencekey,sum(r.amount)as Amount from pyResult r inner join pyEmployee e
			on e.id = r.pyEmployeeid
			inner join PayrollRun pr on pr.id = e.payrollRunid
			where pr.DateTobePrinted between @StartDate and @EndDate
			and r.pyResultTypeid in (57)
			group by e.ReferenceKey
		)OPEB
		on OPEB.referencekey = e.employeeid
	LEFT JOIN
		(
			--WorkComp
			SELECT e.Referencekey,sum(r.amount)as Amount from pyResult r inner join pyEmployee e
			on e.id = r.pyEmployeeid
			inner join PayrollRun pr on pr.id = e.payrollRunid
			where pr.DateTobePrinted between @StartDate and @EndDate
			and r.pyResultTypeid in (56)
			group by e.ReferenceKey
		)WorkComp
		on WorkComp.referencekey = e.employeeid
GROUP by 
	e.lname, e.fname,s.SiteName,pcd.Slotnum,jt.JobTitle
ORDER BY e.lname;

-----------------------------------------------------------------------------------------------------------------------------
-- Benefits/Deductions import


-- find payrollId where it will end
select * from payrollrun where [description] like 'DEC 2015%' --956

-- find payrollId where it will start
select * from payrollrun where [description] like 'JAN 2016%' --966

truncate table convfullname;

-- take out 0 from middle initial
Update convFullName 
	Set MI = Null  where MI = '0'

-- Generate the fullname
Update ConvFullName
Set FullName = (case
					When MI is Null then LName+', '+FName
					Else LName+', '+FName+' '+MI
				END)
from convFullName

--Match Employee ID's once pasted into ConvFulname with spreadsheet given
update cf 
	set employeeid = e.employeeid 
from tblemployee e 
	inner join convfullname cf
		on cf.ssn = e.socsecno

-- check for Null EmployeeIDs
select * from convFullName where EmployeeID is Null

-----------------------------------------------
-- if there are still rows with no employee ids
-- match by the fullname
-- update cf 
-- 	set employeeid = e.employeeid 
-- from tblemployee e 
-- 	inner join convfullname cf
-- 		on cf.fullname = e.fullname 
-- 	where cf.employeeid is null
-----------------------------------------------

-- get the deduction plan id
select * from pyDeductionPlan
	Where DeductionPlan like '%summer%vision%'
	--	78	Summer Deduction - Vision
	
-- set extra1 as 78	Summer Deduction - Vision
update cf set Extra = 78 from convFullName cf

-- copy amount to extra2

-- copy effective payrollid to extra3 
update cf set Extra3 = 966 from convFullName cf

-- Set typeId to extra4 (copy from old typeID)
update cf set Extra4 = 1 from convFullName cf

-- Set PyDeductionPolicyID to extra5 (copy from old PyDeductionPolicyID)
update cf set Extra5 = 133 from convFullName cf

-- Set DistrictAmount to extra6 (copy from old DistrictAmount)
update cf set Extra6 = 0 from convFullName cf

-- Set Notes to extra7
update cf set Extra7 = 'DS Admin imported 01/14/2016' from convFullName cf

-- show the old
select * from pyDeductionTemplate
	where EmployeeId in 
		(
			Select EmployeeID from convFullName
		)
	and pyDeductionPlanId = 78
	and EffectivePayrollId = 956
	--and EmployeeId = 945
order by EmployeeId

-- inactivate the old
Update pyDeductionTemplate
Set InActivePayrollId = 956,
	PayrollCap = 0,
	FiscalYearCap = 0,
	Note = 'DS Admin inactivated 1/14/2016'
	where EmployeeId in 
		(
			Select EmployeeID from convFullName
		)
	and pyDeductionPlanId = 78
	and EffectivePayrollId = 956;

-- insert the new
insert into pyDeductionTemplate 
	(
		employeeid,
		EffectivePayrollID,
		InactivePayrollId,
		PyDeductionPlanId,
		Amount,
		TypeId,
		PayrollCap,
		FiscalYearCap,
		PyDeductionPolicyId,
		DistrictAmount,
		Note
	)
	select  
		EmployeeID,
		966,
		Null,
		78,
		Cast(extra2 as decimal(10,2)),
		1,
		0,
		0,
		133,
		0,
		Extra7
	from convfullname 
		where employeeid is not null
		
-- EOF


-----------------------------------------------------------------------------------------------------

--#1245



-- locate the payroll run that we will be using
select * from payrollrun where [description ] = '2015 Q3 CANCELS'; -- 56 2015 Q3 CANCELS

-- check if its clean
select * from pySummary where PayrollRunID = 56
	and pyEmployeeID is Null

-- whack convFullName
truncate table convfullname;

-- determine the pySummaryRuleIDs
select id, [Description] from pysummaryrule
	where [Description] in (
			'Federal/State Earns',
			'Federal WH',
			'FICA Earns',
			'FICA WH',
			'Medi Earns',
			'Medi WH',
			'Gross Earns',
			'Net',
			'SUI Earns',
			'SUI WH',
			'Unemployment Paid',
			'Workers Comp Paid'
	)
	

-- insert them 
insert into pysummary (employeeid,payrollrunid,pysummaryruleid,amount, DCreated)
		select employeeid,56,2, Cast(extra as decimal(10,2)),'01/19/16' from convfullname
			where employeeid is not null and extra != '0.00'
		UNION ALL
		select employeeid,56,3, Cast(extra2 as decimal(10,2)),'01/19/16' from convfullname
			where employeeid is not null and extra2 != '0.00'
		UNION ALL
		select employeeid,56,5, Cast(extra3 as decimal(10,2)),'01/19/16' from convfullname
			where employeeid is not null and extra3 != '0.00'
		UNION ALL
		select employeeid,56,39, Cast(extra4 as decimal(10,2)),'01/19/16' from convfullname
			where employeeid is not null and extra4 != '0.00'
		UNION ALL
		select employeeid,56,6, Cast(extra5 as decimal(10,2)),'01/19/16' from convfullname
			where employeeid is not null and extra5 != '0.00'
		UNION ALL
		select employeeid,56,7, Cast(extra6 as decimal(10,2)),'01/19/16' from convfullname
			where employeeid is not null and extra6 != '0.00'
		UNION ALL
		select employeeid,56,8, Cast(extra7 as decimal(10,2)),'01/19/16' from convfullname
			where employeeid is not null and extra7 != '0.00'
		UNION ALL
		select employeeid,56,12, Cast(extra8 as decimal(10,2)),'01/19/16' from convfullname
			where employeeid is not null and extra8 != '0.00'
		UNION ALL
		select employeeid,56,11, Cast(extra9 as decimal(10,2)),'01/19/16' from convfullname
			where employeeid is not null and extra9 != '0.00'
		UNION ALL
		select employeeid,56,1, Cast(extra10 as decimal(10,2)),'01/19/16' from convfullname
			where employeeid is not null and extra10 != '0.00'
		UNION ALL
		select employeeid,56,17, Cast(extra11 as decimal(10,2)),'01/19/16' from convfullname
			where employeeid is not null and extra11 != '0.00'
		UNION ALL
		select employeeid,56,21, Cast(extra12 as decimal(10,2)),'01/19/16' from convfullname
			where employeeid is not null and extra12 != '0.00'
		--UNION ALL
		--select employeeid,92, 20, Cast(extra13 as decimal(10,2)),'01/19/16' from convfullname
		--	where employeeid is not null and extra13 != '0.00'
		--UNION ALL
		--select employeeid,92, 21, Cast(extra14 as decimal(10,2)),'01/19/16' from convfullname
		--	where employeeid is not null and extra14 != '0.00'
	
--check if they're correct
select EmployeeID, FullName from tblEmployee Where EmployeeID = 835 = 'Opdycke'

select 
	pysummary.payrollrunid, 
	pysummary.employeeid, 
	tblemployee.fullname, 
	pysummaryrule.[description], 
	pysummary.amount
from pysummary
	inner join tblemployee
		on tblemployee.employeeid = pysummary.employeeid
	inner join pysummaryrule
		on pysummaryrule.id = pysummary.pysummaryruleid
	where pysummary.payrollrunid = 55
	and tblemployee.fullname = 'Opdycke, Katie A'
	order by tblemployee.fullname asc;


------------------------------------------------------------------------------------------------------------------------------------

-- Locate the AuthorizationRequestID (ID) using the SBA #
select * from AuthorizationRequest  where AuthorizationRequestTYpePK = 10391 -- AuthorizationRequestID = 29764

-- Show what's happening to the authorization
select 
	ar.AuthorizationRequestTYpePK as SBANum,
	ard.id,
	ard.UserID,
	emp.FullName,
	aat.[Description],
	ard.ActionDate,
	ard.IsNext
from AuthorizationRequestDetail ard
	inner join AuthorizationRequest ar
		on ard.AuthorizationRequestID = ar.ID
	inner join tblUsers usr
		on ard.UserID = usr.UserID
	inner join tblEmployee emp
		on usr.EmployeeID = emp.EmployeeID
	left join ds_global..authorizationActionType aat
		on ard.AuthorizationActionTypeID = aat.id
where authorizationRequestID = 29764 -- plug the AuthorizationRequestID here
order by ard.id asc;


------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- The following SQL code is for Zendesk ticket # 1470
-- NCExternal needs to re-open a closed batch so they can renumber 
-- and re-print their checks
-- Last revision: 01/28/2016 (Teo)
--------------------------------------------------------------------------------

-- locate the AP check batch that needs to be re-opened
select * from checkbatch where [Description] = 'AP 1/27/16' order by id desc; -- 220

-- 'open' the batch in Parent
update checkbatch set IsClosed = 0 where id = 220

-- go through each active child district and 're-open' the 
-- check batch with a matching ParentID

-- find
Select * From DSNCCalistoga..checkbatch where ParentBatchID = 220
Select * From DSNCHMESD..checkbatch where ParentBatchID = 220
Select * From DSNCJPA..checkbatch where ParentBatchID = 220
Select * From DSNCNAPACOE..checkbatch where ParentBatchID = 220
Select * From DSNCNVCC..checkbatch where ParentBatchID = 220
Select * From DSNCNVUSD..checkbatch where ParentBatchID = 220
Select * From DSNCPopevalley..checkbatch where ParentBatchID = 220
Select * From DSNCStHelena..checkbatch where ParentBatchID = 220
Select * From DSNCStoneBridge..checkbatch where ParentBatchID = 220

-- open the child batches
Update DSNCCalistoga..checkbatch Set IsClosed = 0 where ParentBatchID = 220
Update DSNCHMESD..checkbatch Set IsClosed = 0 where ParentBatchID = 220
Update DSNCJPA..checkbatch Set IsClosed = 0 where ParentBatchID = 220
Update DSNCNAPACOE..checkbatch Set IsClosed = 0 where ParentBatchID = 220
Update DSNCNVCC..checkbatch Set IsClosed = 0 where ParentBatchID = 220
Update DSNCNVUSD..checkbatch Set IsClosed = 0 where ParentBatchID = 220
Update DSNCPopevalley..checkbatch Set IsClosed = 0 where ParentBatchID = 220
Update DSNCStHelena..checkbatch Set IsClosed = 0 where ParentBatchID = 220
Update DSNCStoneBridge..checkbatch Set IsClosed = 0 where ParentBatchID = 220

--------------------------------------------------------------------------------
-- UI tasks
-- have them re-number, print checks, hit NO (so no journals will be created)
-- then close every child district manually
--------------------------------------------------------------------------------

-- close them again
-- child batches
Update DSNCCalistoga..checkbatch Set IsClosed = 1 where ParentBatchID = 220
Update DSNCHMESD..checkbatch Set IsClosed = 1 where ParentBatchID = 220
Update DSNCJPA..checkbatch Set IsClosed = 1 where ParentBatchID = 220
Update DSNCNAPACOE..checkbatch Set IsClosed = 1 where ParentBatchID = 220
Update DSNCNVCC..checkbatch Set IsClosed = 1 where ParentBatchID = 220
Update DSNCNVUSD..checkbatch Set IsClosed = 1 where ParentBatchID = 220
Update DSNCPopevalley..checkbatch Set IsClosed = 1 where ParentBatchID = 220
Update DSNCStHelena..checkbatch Set IsClosed = 1 where ParentBatchID = 220
Update DSNCStoneBridge..checkbatch Set IsClosed = 1 where ParentBatchID = 220

-- verify
Select * From DSNCCalistoga..checkbatch where ParentBatchID = 220
Select * From DSNCHMESD..checkbatch where ParentBatchID = 220
Select * From DSNCJPA..checkbatch where ParentBatchID = 220
Select * From DSNCNAPACOE..checkbatch where ParentBatchID = 220
Select * From DSNCNVCC..checkbatch where ParentBatchID = 220
Select * From DSNCNVUSD..checkbatch where ParentBatchID = 220
Select * From DSNCPopevalley..checkbatch where ParentBatchID = 220
Select * From DSNCStHelena..checkbatch where ParentBatchID = 220
Select * From DSNCStoneBridge..checkbatch where ParentBatchID = 220

-- parent batch
update checkbatch set IsClosed = 1 where id = 220

-- verify
select * from checkbatch where [Description] = 'AP 1/27/16' order by id desc; -- 220

-- EOF

------------------------------------------------------------------------------------------------------

-- SQL for rolling over tblSlotCalendarByYear, tblCalendarDates and tblPayroll

----------------------------------------------------------------------------------------------------------------------------
-- check how many tracks
select Distinct TrackID from tblCalendarDates order by TrackID asc; --- 1
   
----------------------------------------------------------------------------------------------------------------------------
-- check the calendar old FY
Declare @PrevFiscalYear INT
Declare @NewFiscalYear INT
   
SET @PrevFiscalYear = 2015
SET @NewFiscalYear = 2016
select * from tblSlotCalendarByYear 
	where fiscalyear in (@PrevFiscalYear,@NewFiscalYear) 
	and (CalendarName not like 'x%' and len([CalendarName]) != 0 and len([CalendarName]) > 1)
	 
   
----------------------------------------------------------------------------------------------------------------------------
-- Roll Over calendar
Declare @PrevFiscalYear INT
Declare @NewFiscalYear INT
   
SET @PrevFiscalYear = 2015
SET @NewFiscalYear = 2016
Insert into tblSlotCalendarByYear(
		SlotCalendarID, 
		FiscalYEar,
		calendarName, 
		mthwk, 
		paiddays, 
		TrackID
	)
	select
		SlotCalendarID, 
		@NewFiscalYear, -- FY to rollover to
		calendarName, 
		mthwk, 
		paiddays, 
		TrackID
	from tblSlotCalendarByYear 
		where Fiscalyear = @PrevFiscalYear  -- FY to copy it from
		and slotCalendarId not in (
				select slotCalendarId from tblslotCalendarByYear 
				where fiscalyear = @NewFiscalYear -- FY to rollover to
				 
		)and (CalendarName not like 'x%' and len([CalendarName]) != 0 and len([CalendarName]) > 1)
		   
   
----------------------------------------------------------------------------------------------------------------------------
-- check the calendar new FY
Declare @NewFiscalYear INT
   
SET @NewFiscalYear = 2016
select * from tblSlotCalendarByYear where fiscalyear in (@NewFiscalYear) 
   
----------------------------------------------------------------------------------------------------------------------------
-- check tblCalendarDates
Declare @PrevFiscalYear INT
Declare @NewFiscalYear INT
   
SET @PrevFiscalYear = 2015
SET @NewFiscalYear = 2016
   
select * from tblCalendarDates where FiscalYear = @PrevFiscalYear -- previous FY
   
----------------------------------------------------------------------------------------------------------------------------
-- process tblCalendarDates
Declare @PrevFiscalYear INT
Declare @NewFiscalYear INT
   
SET @PrevFiscalYear = 2015
SET @NewFiscalYear = 2016
   
Insert into tblCalendarDates(
		FiscalYEar,
		CalendarDate, 
		[DayOfWeek], 
		DateTypeId,
		TrackID
	)
	select
		@NewFiscalYear,
		DateAdd(yy, 1, Cast(CalendarDate As datetime)), 
		Left(datename(dw,DateAdd(yy, 1, Cast(CalendarDate As datetime))),3), 
		(case
					When datename(dw,DateAdd(yy, 1, Cast(CalendarDate As datetime))) = 'Saturday' then 2
					When datename(dw,DateAdd(yy, 1, Cast(CalendarDate As datetime))) = 'Sunday' then 2
					Else 1
		END),
		TrackID
	from tblCalendarDates 
		where Fiscalyear = @PrevFiscalYear  -- FY to copy it from
		and CalendarDate != '02/29/2016'
   
		   
------------------------------------------------------------------------------------------------
-- verify
Declare @PrevFiscalYear INT
Declare @NewFiscalYear INT
   
SET @PrevFiscalYear = 2015
SET @NewFiscalYear = 2016
		   
select * from tblCalendarDates where FiscalYear = @NewFiscalYear -- new FY
	order by trackID asc,
		CalendarDate asc;
   
   
------------------------------------------------------------------------------------------------        
-- Get old PayPeriods
Declare @PrevFiscalYear INT
Declare @NewFiscalYear INT
   
SET @PrevFiscalYear = 2015
SET @NewFiscalYear = 2016
   
-- check for new FY entered
select * from tblPayroll where FiscalYear in (@PrevFiscalYear, @NewFiscalYear) -- previous and new FY
   
------------------------------------------------------------------------------------------------        
-- Insert new PayPeriods
Declare @PrevFiscalYear INT
Declare @NewFiscalYear INT
   
SET @PrevFiscalYear = 2015
SET @NewFiscalYear = 2016
   
Insert into tblPayroll(
		FiscalYear,
		PayPeriod,
		StartDate,
		EndDate,
		StartDateSecondary,
		EndDateSecondary,
		DistrictID,
		PayrollMonthNum,
		OldId,
		Closed,
		BenefitStart,
		BenefitEnd,
		BaseLastGenDate,
		SuppFinalDate,
		CertRetireCloseDate,
		ClassRetireCloseDate
	)
	select
		@NewFiscalYear,
		REPLACE(PayPeriod, Substring(PayPeriod,len(PayPeriod),1), convert(varchar,Cast(Substring(PayPeriod,len(PayPeriod),1)+1 as decimal(10,0)))),
		DateAdd(yy, 1, Cast(StartDate As datetime)),
		DateAdd(yy, 1, Cast(EndDate As datetime)),
		DateAdd(yy, 1, Cast(StartDateSecondary As datetime)),
		DateAdd(yy, 1, Cast(EndDateSecondary As datetime)),
		DistrictID,
		PayrollMonthNum,
		0,
		0,
		Null,
		Null,
		Null,
		Null,
		Null,
		Null
	from tblPayroll where FiscalYear in (@PrevFiscalYear) -- previous FY
	   
	   
------------------------------------------------------------------------------------------------
-- verify
Declare @PrevFiscalYear INT
Declare @NewFiscalYear INT
   
SET @PrevFiscalYear = 2015
SET @NewFiscalYear = 2016
	   
select * from tblPayroll where FiscalYear = @NewFiscalYear -- new FY
  
------------------------------------------------------------------------------------------------
-- Process PayrollRun
Declare @PrevFiscalYear INT
Declare @NewFiscalYear INT
   
SET @PrevFiscalYear = 2015
SET @NewFiscalYear = 2016
 
Insert into PayrollRun(
		PayrollID,
		PayrollRunTypeID,
		[Description],
		DateTobePrinted,
		DateRun,
		DateClosed,
		StartDate,
		EndDate,
		CompFilterID,
		TimeSheetFilterID,
		DeductionFilterID,
		TemplateDeductionFilterID,
		GenerateBegin,
		GenerateEnd
	)
select
	(select PayrollID from tblPayroll where PayPeriod = REPLACE(pr.[Description], Substring(pr.[Description],len(pr.[Description]),1), convert(varchar,Cast(Substring(pr.[Description],len(pr.[Description]),1)+1 as decimal(10,0))))),
	1,
	REPLACE(pr.[Description], Substring(pr.[Description],len(pr.[Description]),1), convert(varchar,Cast(Substring(pr.[Description],len(pr.[Description]),1)+1 as decimal(10,0)))),
	DateAdd(yy, 1, Cast(pr.DateTobePrinted As datetime)),
	Null,
	Null,
	DateAdd(yy, 1, Cast(pr.StartDate As datetime)),
	DateAdd(yy, 1, Cast(pr.EndDate As datetime)),
	pr.CompFilterID,
	pr.TimeSheetFilterID,
	pr.DeductionFilterID,
	pr.TemplateDeductionFilterID,
	Null,
	Null
from PayrollRun pr
right join tblPayroll tbpr
	on pr.PayrollID = tbpr.PayrollID
where tbpr.FiscalYear = @PrevFiscalYear
and pr.PayrollRunTypeID = 1;
	  
----------------------------------------------------------------------------------------
-- verify PayrollRun
Declare @PrevFiscalYear INT
Declare @NewFiscalYear INT
   
SET @PrevFiscalYear = 2015
SET @NewFiscalYear = 2016
select
	pr.ID,
	pr.PayrollID,
	pr.PayrollRunTypeID,
	pr.[Description],
	pr.DateToBePrinted,
	pr.DateRun,
	pr.DateClosed,
	pr.StartDate,
	pr.EndDate,
	pr.CompFilterID,
	pr.TimeSheetFilterID,
	pr.DeductionFilterID,
	pr.TemplateDeductionFilterID,
	pr.GenerateBegin,
	pr.GenerateEnd
from PayrollRun pr
right join tblPayroll tbpr
	on pr.PayrollID = tbpr.PayrollID
where tbpr.FiscalYear = @NewFiscalYear;
  
----------------------------------------------------------------------------------------
-- whack mode
-- erase what we rolled over (in case we mess up)
Declare @NewFiscalYear INT
   
SET @NewFiscalYear = 2016
   
-- whack from;
-- tblPayroll 
delete from tblPayroll where FiscalYear = @NewFiscalYear
-- tblCalendarDates 
delete from tblCalendarDates where FiscalYear = @NewFiscalYear 
-- tblSlotCalendarByYear 
delete from tblSlotCalendarByYear where Fiscalyear  = @NewFiscalYear
-- PayrollRun 
delete from PayrollRun pr
right join tblPayroll tbpr
	on pr.PayrollID = tbpr.PayrollID
where tbpr.FiscalYear = @NewFiscalYear;
   
-- EOF

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Kings Canyon Monthly Report

Select * from tblpayroll where fiscalyear = 2015     

-- Change Payroll Id in statement below.
select 
	Fullname, 
	payrolltype, 
	a.accountstring, 
	hours, 
	rate, 
	value, 
	[percent]
from tblPayrolldetail pd
inner join tblPayrollDetailComp pdc 
	on pdc.payrollDetailID=pd.payrollDetailID
left join tblEmployee e 
	on e.employeeID=pd.employeeID
where payrollID=1036 
and substring(accountstring, 38,4) ='6350'


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- AVUHSD Adult Ed report

Select * FROM tblPayroll where fiscalyear = 2015 -- Get PayrollID
Select * FROM tblDistrict -- To find DistrictID 

Declare @Fiscalyear Int
Declare @PayrollID int
Declare @DistrictID int


-------------------
set @Fiscalyear = 2015
Set @PayrollID = 1056
set @DistrictID = 24
-------------------


exec spAVAdultedSickEntitlements @FiscalYear, @PayrollID, @DistrictID

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


WIP 







-- 13-00-5310-0000-3700-2200-060-310-000


------------------------------------------------------------------------------------------------------------------------------------------------
-- Duplicate fundings for Audit



-- get the highest accountID
select * from tblaccount order by accountstring desc -- 6863

-- Locate the duplicating string
Declare @AccountString varchar(100)
Declare @FiscalYear INT

   
SET @AccountString  = '13-00-5310-0000-3700-2200-060-310-000' -- put acct string here
SET @FiscalYear = 2015 -- enter FY here

Declare @AccountIDs table(AccountID varchar(200))
Insert into @AccountIDs 
	select AccountID from generalledger	where accountstring = @AccountString and FiscalYearID = @FiscalYear

select * from @AccountIDs


----------------

----------------
	
Declare @RecordCount table(ctr INT)
Insert into @RecordCount 
select count(AccountID) as ctr from @AccountIDs

Declare @looper INT

select @looper = ctr from @RecordCount

Declare @vSQL varchar(1000)
Declare @Found INT
Declare @rows INT



--- tblfundingslotdetails
SET @Found = 0
SET @rows = 0
WHILE (@looper <> 0)
BEGIN
	select @rows =  count(*) from tblfundingslotdetails
		where fsaccountid in (select @vSQL + 'select top ' + convert(varchar, @looper) + ' * from @AccountIDs')
	IF @rows > 0  
		SET @Found = @Found + 1 
	Else 
		SET @Found = 0
	SET @looper = @looper -1
END 

IF @Found > 0
BEGIN
	Declare @tblfundingslotdetailsvalidAcctID table(validAccttblfundingslotdetails INT)
	Insert into @tblfundingslotdetailsvalidAcctID 
		select top 1 AccountID from @AccountIDs order by AccountID asc;
END

select 	validAccttblfundingslotdetails from @tblfundingslotdetailsvalidAcctID

-- pyresult
SET @vSQL = Null
SET @Found = 0
select @looper = ctr from @RecordCount
SET @rows = 0
WHILE (@looper <> 0)
BEGIN
	select @rows =  count(*)   from pyresult
		where accountid in (select @vSQL + 'select top ' + convert(varchar, @looper) + ' * from @AccountIDs')
	IF @rows > 0  
		SET @Found = @Found + 1 
	Else 
		SET @Found = 0
	SET @looper = @looper -1
END 

IF @Found > 0
BEGIN
	Declare @pyResultValidAcctID table(validAcctPyResult INT)
	Insert into @pyResultValidAcctID 
		select top 1 AccountID from @AccountIDs order by AccountID asc;
END

select 	validAcctPyResult from @pyResultValidAcctID

-- tblPayrollDetailComp
SET @vSQL = Null
SET @Found = 0
select @looper = ctr from @RecordCount
SET @rows = 0
WHILE (@looper <> 0)
BEGIN
	select @rows =  count(*)   from tblPayrollDetailComp
		where accountid in (select @vSQL + 'select top ' + convert(varchar, @looper) + ' * from @AccountIDs')
	IF @rows > 0  
		SET @Found = @Found + 1 
	Else 
		SET @Found = 0
	SET @looper = @looper -1
END 

IF @Found > 0
BEGIN
	Declare @tblPayrollDetailCompValidAcctID table(validAccttblPayrollDetailComp INT)
	Insert into @tblPayrollDetailCompValidAcctID 
		select top 1 AccountID from @AccountIDs order by AccountID asc;
END

select 	validAccttblPayrollDetailComp from @tblPayrollDetailCompValidAcctID


		
select Distinct AccountID from tblPayrollDetailComp
	where accountid in (7176,7177) -- none used
	order by accountid desc


	
-- update pyresult set accountid = 3026
	where accountid in (3082, 3083)
	
select * from pypositionfunding
	where accountid in (5112, 5113) -- none used
		order by accountid desc

-- update pypositionfunding set accountid = 3026
	where accountid = 3082
	

	
-- update tblPayrollDetailComp set accountid = 5112
	where accountid = 5113
	
select * from tblBudgetDetail 
	where accountid in (5112, 5113) -- none used
	order by accountid desc
	
-- update tblBudgetDetail set accountid = 1606
	where accountid = 2171
	
select * from tblBudgetPositionDetail 
	where accountid in (5112, 5113) -- none used
	order by accountid desc
	
-- update tblBudgetPositionDetail set accountid = 1606
	where accountid = 2171



select * from tblBenefitFunding  
	where accountid in (5112, 5113)	-- none used
	order by accountid desc

select * from PyResultAdjustment  
	where accountid in (5112, 5113)	-- none used
	order by accountid desc
	
select * from CheckDetailFunding  
	where (expenseaccountid in (5112, 5113)	or liabilityaccountid in (5112, 5113))	-- none used

select * from depositDetailfunding   
	where accountid in (5112, 5113)	-- none used
	
select * from JournalentryDetail   
	where accountid in (5112, 5113)	-- none used
	
select * from PODetailFunding   
	where accountid in (5112, 5113)	-- none used
	


---------------------		

delete from tblaccount
	where accountstring = '09-0090-0-2485-0000-2700-009-0000-XX'
	and accountid = 5113
	
delete from generalledger
	where accountstring = '09-0090-0-2485-0000-2700-009-0000-XX'
	and accountid = 5113


-----------------------------------------------------------------------------------------------



-- SQL for importing information for the Evaluation Tab


truncate table convEval;

-- Get the fullname
update ce 
	set FullName = e.FullName 
from tblemployee e 
inner join convEval ce
	on ce.SSN= e.SocSecNo where ce.employeeid is null 

--Get the EmployeeID
update ce 
	set employeeid = e.employeeid 
from tblemployee e 
inner join convEval ce
	on ce.ssn = e.socsecno
	

------------------------------------------------------------------------------------------------------------------------






-- Whack ConvFullName
truncate table convfullname;
--------------------------------------------------------------------------------------
 
 
 
-- Locate the PayrollRunID
select * from PayrollRun
	Where [Description] like 'FEB 2016%'
	-- 67 FEB 2016
  
--------------------------------------------------------------------------------------
 
-- Paste the employee id in ConvFullName
-- Create pyEmployee entries base on the employee id on convFullname
insert into pyEmployee 
	(
		ReferenceKey, 
		ReferenceSource,
		ReferenceExtra, 
		SSN,
		LastName,
		FirstName,
		MiddleName,
		MailingAddressId,
		HomeAddressId,
		BirthDate,
		HireDate,
		TerminateDate,
		EmploymentStatusId,
		WarrantSiteID,
		IsDeferredPay,
		PayCode,
		FedMaritalStatus,
		FedExemptions,
		FedAddAmt,
		FedEIC,
		FedSpouseEICCertificateID,
		StateMaritalStatus,
		StateExemptions,
		StateAddAmt,
		PayrollRunID
	)
Select Distinct
	tblEmployee.EmployeeID,
	1,
	Null,
	tblEmployee.SocSecNo,
	tblEmployee.LName,
	tblEmployee.FName,
	tblEmployee.MI,
	tblEmployee.MailingAddressId,
	tblEmployee.HomeAddressId,
	tblEmployee.DOB,
	tblEmployee.HireDate,
	tblEmployee.TerminateDate,
	tblEmployee.StatusID,
	tblEmployee.WarrantSiteID,
	tblEmployee.IsDeferredPay,
	Null,
	tblEmployee.FedMaritalStatus,
	tblEmployee.FedExemptions,
	tblEmployee.FedAddAmt,
	tblEmployee.FedEIC,
	tblEmployee.FedSpouseEICCertificateID,
	tblEmployee.StateMaritalStatus,
	tblEmployee.StateExemptions,
	tblEmployee.StateAddAmt,
	67
from ConvFullname
	Inner Join tblEmployee
		On tblEmployee.EmployeeID = ConvFullname.EmployeeID
where Extra13 is Null;
		  
--------------------------------------------------------------------------------------
-- Verify they are in pyEmployee
select
	pyEmployee.id,
	pyEmployee.ReferenceKey,
	convFullName.EmployeeID
	from pyEmployee
	inner join convFullName
		on pyEmployee.ReferenceKey = convFullName.EmployeeID
	Where (pyEmployee.PayrollRunID = 67)
	Group by
		pyEmployee.id,
		pyEmployee.ReferenceKey,
		convFullName.EmployeeID
	Order by convFullName.EmployeeID asc;
	  
-- in ConvFullname, Set Extra13 = pyEmployeeID
update cf set Extra13 = py.id from pyEmployee py
	inner join convfullname cf
		on cf.employeeid = py.ReferenceKey
		where (py.PayrollRunID = 67);
		 
		 
-- check for null in pyEmployeeID = Extra13
select * from convFullName where Extra13 is Null
		  
--------------------------------------------------------------------------------------
-- create inserts for pyPosition
Select
	cf.Extra3,
	rc.RetireClassID 
from tblRetireClass rc
		right join convFullName cf
			on cf.Extra3 = rc.RetireClass
			 
			 
			  
-- use ConvFullName.Extra3 to get PensionID
Update ConvFullName
	Set Extra14 = rc.RetireClassID from tblRetireClass rc
		inner join convFullName cf
			on cf.Extra3 = rc.RetireClass
	  
-- Test the data set
select
	convFullName.employeeID,
	convFullName.Extra13 as pyEmployeeID,
	Null as ReferenceKey,
	-1 as ReferenceSource,
	Null as ReferenceExtra,
	tblEmployee.ClassificationId,
	convFullName.extra2 as [Description],
	convFullName.Extra14 as PensionID,
	1 as HasBenefitsDeducted,
	1 as PayPercent,
	62 as PayrollRunID,
	1 as OverRidden,
	tblEmployee.WarrantSiteID as SiteID,
	tblEmployee.PayCycle as Months
from convFullName
	inner join tblEmployee
		on convFullName.employeeID = tblEmployee.EmployeeID
order by convFullName.employeeID;

select * from pyPosition

-- insert them into pyPosition
Insert Into pyPosition
	(
		pyEmployeeID,
		ReferenceKey,
		ReferenceSource,
		ReferenceExtra,
		ClassificationId,
		[Description],
		PensionID,
		HasBenefitsDeducted,
		PayPercent,
		PayrollRunID,
		IsOverRidden,
		SiteID,
		Months
	)
Select Distinct
	convFullName.Extra13,
	Null,
	-1,
	Null,
	convFullName.Extra20,
	convFullName.extra2,
	convFullName.Extra14,
	1,
	1,
	67,
	1,
	tblEmployee.WarrantSiteID,
	tblEmployee.PayCycle
from convFullName
	inner join tblEmployee
		on convFullName.employeeID = tblEmployee.EmployeeID 
		 
	 
Select * from pyPosition pp
	inner join convFullName cf
		on cf.extra13 = pp.pyEmployeeID
		and cf.extra2 = pp.[description]
	where pp.payrollrunid = 67 
		and pp.referencesource = -1
		 
		 
		 
		 
Update cf 
	set Extra15 = pp.id -- pyPositionID
	from pyPosition pp
	inner join convFullName cf
		on cf.extra13 = pp.pyEmployeeID
		and cf.extra2 = pp.[description]
		and cf.extra20 = pp.ClassificationID
	where pp.payrollrunid = 67 
		and pp.referencesource = -1
	  
--- create inserts from pyCompensation
	  
select * from ds_global..pyCompensationType -- 9 Other = Stipend
 
-- Locate fields we need in pyCompensation
Select * from pyCompensation
-- Rate = Extra6
-- Amount = Extra9
-- from date = extra10
-- to date  = extra11
-- Referencesource = -1
-- ReferenceKey = Null
-- ReferenceExtra = Null
-- IsOverriden = 1
-- PayrollRunID = 62
-- Description = Extra4
-- Link to ConvFullName
Select
	ConvFullName.Extra13 as pyEmployeeID,
	ConvFullName.Extra15 as pyPositionID,
	9 as pyCompensationTypeID,
	ConvFullName.Extra14 as PensionCode,
	1 as HasBenefitsDeducted,
	1 as PayPercent,
	ConvFullName.Extra6 as Rate ,
	Null as ReferenceKey,
	-1 as ReferenceSource,
	Null as ReferenceExtra,
	ConvFullName.Extra9 as Amount,
	ConvFullName.Extra10 as FromDate,
	ConvFullName.Extra11 as ToDate,
	1 as IsOverRidden,
	67 as PayrollRunID,
	ConvFullName.Extra4 as [Description]
from ConvFullName
	inner join tblEmployee
		on ConvFullName.EmployeeID = tblEmployee.EmployeeID
		  
-- do the insert
Insert into pyCompensation
	(
		pyEmployeeID,
		pyPositionID,
		pyCompensationTypeID,
		PensionCode,
		HasBenefitsDeducted,
		PayPercent,
		Rate ,
		ReferenceKey,
		ReferenceSource,
		ReferenceExtra,
		Amount,
		FromDate,
		ToDate,
		IsOverRidden,
		PayrollRunID,
		[Description]
	)
Select
	ConvFullName.Extra13,
	ConvFullName.Extra15,
	9,
	ConvFullName.Extra14,
	1,
	1,
	ConvFullName.Extra6,
	Null,
	-1,
	Null,
	ConvFullName.Extra9,
	ConvFullName.Extra10,
	ConvFullName.Extra11,
	1,
	67,
	ConvFullName.Extra4
from ConvFullName
	inner join tblEmployee
		on ConvFullName.EmployeeID = tblEmployee.EmployeeID
		  
-- verify
select * from pyCompensation 
	where PayrollRunID = 67 and ReferenceKey is Null
	
Update pyCompensation 
Set PayPercent = 1
	where PayrollRunID = 67 and ReferenceKey is Null
	
	
	
-- Update convFullName
-- extra16 = pyCompensationID
Select * from pyCompensation pc
	inner join convFullName cf
		on cf.extra13 = pc.pyEmployeeID
		and cf.extra15 = pc.pyPositionID
	where pc.payrollrunid = 67 
		and pc.referencesource = -1
		 
		 
Update cf 
	set Extra16 = pc.id -- pyCompensationID
	from pyCompensation pc
	inner join convFullName cf
	on cf.extra13 = pc.pyEmployeeID
		and cf.extra15 = pc.pyPositionID
	where pc.payrollrunid = 67 
		and pc.referencesource = -1
		  
-- pyPositionFunding
--      Extra15 = pyPositionID
--      AccountID = Extra17
--      Percentage = 1
--      ReferenceKey = Null
--      ReferenceSource = -1
--      IsOverriden = 1
--      PayrollRunID = 67
Update convFullName
	set Extra17 = ta.AccountID
from convFullName
	inner join tblAccount ta
		on convFullName.extra12 = ta.accountstring;
		  
-- check for Nulls in ConvFullName.Extra17
select * from ConvFullName 
	Where Extra17 is Null
	  
-- link it to ConvFullName
select
	ConvFullName.Extra15 as pyPositionID,
	ConvFullName.Extra17 as AccountID,
	ConvFullName.Extra7,
	Null as ReferenceKey,
	-1 as ReferenceSource,
	1 as IsOverriden,
	67 as PayrollRunID
from ConvFullName;

update convfullname set extra19 = (case when sums.sumValue >= 1 then cf.extra7 else '1' END)
--select * 
from convfullname cf inner join 
(
select extra15,sum(cast(extra7 as decimal(10,2))) as sumValue from convfullname 
group by extra15
) sums
on cf.extra15 = sums.extra15



-- Insert them into pyPositionFunding
Insert into pyPositionFunding
	(
		pyPositionID,
		AccountID,
		Percentage,
		ReferenceKey,
		ReferenceSource,
		IsOverridden,
		PayrollRunID
	)
select
	ConvFullName.Extra15,
	ConvFullName.Extra17,
	ConvFullName.Extra19,
	Null,
	-1,
	1,
	67
from ConvFullName
			 
select * from pyPosition
select * from pyPositionFunding
	where PayrollRunID = 67
	  
select * from pyEmployee
	where ReferenceKey = 55
	  
Select * from pyEmployee
	where PayrollRunId= 67
	and FedExemptions = 0
	 
Update pyEmployee
	Set FedExemptions = Null
	where PayrollRunId= 67
	and FedExemptions = 0
	  
select * from PayrollRun
update PayrollRun
	Set DateToBePrinted = '12/31/2015' -- should be in same year
	Where ID = 61
	  
-- Try Calculating Net for one employee
  
--***************************
-- MISC FUNCTIONS
--***************************
  
-- Get the FullName
Select
	cf.employeeid,
	em.FullName
from tblEmployee em
	inner join convfullname cf
		on cf.employeeid = em.EmployeeID
		  
-- Plug 'em in ConvFullName
update cf set FullName = em.FullName from tblEmployee em
	inner join convfullname cf
		on cf.employeeid = em.EmployeeID
  
-- Get the PensionID
Select
	cf.employeeid,
	em.ClassRetireId
from tblEmployee em
	inner join convfullname cf
		on cf.employeeid = em.EmployeeID
		  
-- Plug 'em in ConvFullName
update cf set Extra3 = em.ClassRetireId from tblEmployee em
	inner join convfullname cf
		on cf.employeeid = em.EmployeeID
		 
		 
-- Get the Job Description
select * from pyCompensation
	where PayrollRunID = 62
	 
	 
sp_columns tblEmployee
sp_columns tblPositionControlDetails
sp_columns tblJobTitles
Select
	cf.employeeid,
	job.JobTitle
from convFullName cf
	inner join tblPositionControlDetails pos
		on cf.employeeid = pos.EmployeeID
	inner join tblJobTitles job
		on pos.pcJobTitleID = job.JobTitleID
	where pos.inActiveDate is Null
	  
-- Plug 'em in ConvFullName
update cf set Extra = job.JobTitle from convFullName cf
	inner join tblPositionControlDetails pos
		on cf.employeeid = pos.EmployeeID
	inner join tblJobTitles job
		on pos.pcJobTitleID = job.JobTitleID
	where pos.inActiveDate is Null
	 
	 
--- find address ID
select * from tblEmployee where employeeid = 2891
 
-- locate retirementClass
Select * from tblRetireClass rc
-- in case we make a mess
 
select * from pyCompensation
	where ReferenceKey is Null
	and ReferenceSource = -1
	and PayrollRunID = 67
	 
select * from pyPositionFunding
	where ReferenceKey is Null
	and ReferenceSource = -1
	and PayrollRunID = 67
select * from pyPosition 
	where ReferenceKey is Null
	and ReferenceSource = -1
	and PayrollRunID = 67
	
Update convfullname
Set Extra20 = tc.classificationID
From convfullname cf
	inner join tblClassifications tc
		on cf.extra = tc.ClassDescription
		
select * from convfullname where extra20 is null and extra in ('Teacher, Middle School','Teacher, ROP')

select * from tblClassifications -- 19

Update convfullname 
	Set Extra20 = 2
	where extra20 is null and and extra in ('Teacher, Middle School','Teacher, ROP')
	 
	 
--- delete them
 
Delete from pyCompensation
	where ReferenceKey is Null
	and ReferenceSource = -1
	and PayrollRunID = 67
	 
Delete from pyPositionFunding
	where ReferenceKey is Null
	and ReferenceSource = -1
	and PayrollRunID = 67
	
Delete from pyPosition 
	where ReferenceKey is Null
	and ReferenceSource = -1
	and PayrollRunID = 67

select * from pyPosition where PayrollRunID = 67 
	and ReferenceKey is Null
	and ReferenceSource = -1
	
Update pyPosition 
	Set PensionID = cf.extra3
From pyPosition pp inner join convfullname cf
	on pp.id = cf.extra15
	where PayrollRunID = 67 
	and ReferenceKey is Null
	and ReferenceSource = -1
	
select * from pyCompensation where PayrollRunID = 67 
	and ReferenceKey is Null
	and ReferenceSource = -1
	
Update pyCompensation 
	Set PensionCode  = cf.extra14
From pyCompensation pc inner join convfullname cf
	on pc.id = cf.extra16
	where PayrollRunID = 67 
	and ReferenceKey is Null
	and ReferenceSource = -1
	

--------------------------------------------------------------------------------------------------------------------------------------------

-- Locate unposted status lines
Select * FROM tbltimesheets where Payrollstatusid = 5514 and posted =0 


-- Set the posted flag to 1
BEGIN TRAN 
	UPDATE TBLTIMESHEETS 
	SET POSTED = 1
	WHERE Payrollstatusid = 5514 AND POSTED = 0

COMMIT tran 


ROLLBACK

--------------------------------------------------------------------------------------------------------------------------------------------
-- SET 3/1 to 2/29 for journal

-- locate the payrollrun id, payroll id and check date printed ​​
select * from PayrollRun where description like '%feb 2016%'--67

--check payroll id, make sure ending date is correct 
​​select * from tblPayroll where payrollid = 956

​-- verify issued date for checks
select * from checkBatch where payrollrunid = 67

​-- locate journals, check date
select * from journalEntry where referencekey in (         
		​select id from checkBatch where payrollrunid = 67 ​    
	)
	and journalEntryTYpeid in (2,8,9)
 
-- change the date
Update journalEntry 
	Set [Date] = '02/29/16'
	where referencekey in (    
			select id from checkBatch where payrollrunid = 67 ​        
		)
	and journalEntryTYpeid in (2,8,9)


--- modified

UPDATE JournalEntry Set [Date] = (
	CASE 
		WHEN JournalEntryTYpeID in (2,8) 
			THEN pr.DateToBePrinted 
		WHEN JournalEntryTYpeID = 9 
			THEN cb.IssueDate 
	END)
--select je.id,je.journalEntryTypeID,je.Date,je.DCreated,pr.Description,pr.DateToBePrinted,cb.Description,cb.IssueDate 
from JournalEntry JE 
	inner join CheckBatch cb
		on je.Referencekey = cb.ID and cb.PayrollRunid is not null and je.JournalEntryTypeid in (2,8,9)
	inner join PayrollRun pr on pr.id = cb.PayrollRunid
where (je.Date != pr.DateToBePrinted or je.Date != cb.IssueDate)


--------------------------------------------------------------------------------------------------------------------------------------------

WIP


select * from [checkBatch] where [Description] like '9/16%'

select * from [check] where checkBatchID = 40 order by checkNum asc;

select * from journalEntry 

select * from JournalEntryDetail where FiscalYearID = 2015 and note like '%palace art%' and IsAuthorized = 1
	and JournalEntryID not in (
		select id from journalEntry 
	)


select * from checkDetail where vendorID = 434
	and checkID not in (
		select ID from [check] where checkBatchID = 40 and CheckStatusId = 2 
	)
	and AddressId = 1393
	and IsCancelled != 1
	and convert(datetime, floor(convert(float, DateDue))) between '09/01/2015' and  '09/30/2015' 
	



----------------------------------

WIP 



select * from checkBatch where id in (
	select ReferenceKey from journalEntry where id in (
			select JournalEntryID from JournalEntryDetail where note = 'Payroll: FEB 2016'
		)
	)
	
	
select * from journalEntry where id in (
			select JournalEntryID from JournalEntryDetail where note = 'Payroll: FEB 2016'
		)


---------------------------------------------------------------------------------------------------------------------------


Declare @Fiscalyear as int
set @Fiscalyear = 2015 --This is the old year, the one you are copying FROM
  
Insert into GeneralLedger (
		FiscalYearID,
		Accountid,
		AccountString,
		PseudoString,
		StateString,
		Title,
		AccountCategoryGroupID,
		Inactive
	)
Select 
	FiscalYearid + 1,
	Accountid,
	AccountString,
	PseudoString,
	StateString,
	Title,
	AccountCategoryGroupID,
	Inactive 
FROM GeneralLedger 
where fiscalyearid = @FiscalYear and isNull(Inactive,0) = 0
AND accountid NOT IN(Select AccountID FROM GeneralLedger where fiscalyearid = @Fiscalyear + 1)
 
 
--Check February in future years for correct end date
INSERT INTO GeneralLedgerMonth(
		FiscalYearID, MonthID,
		StartDate,
		EndDate
	)
Select
	FiscalYearID + 1, 
	Monthid,
	Cast(Cast(Month(StartDate)as varchar(2)) + '/' + Cast(Day(StartDate) as varchar(2)) + '/' + Cast(Year(StartDate) + 1 as Varchar(4)) as Datetime),
	Cast(Cast(Month(EndDate)as varchar(2)) + '/' + Cast(Day(EndDate) as varchar(2)) + '/' + Cast(Year(EndDate) + 1 as Varchar(4)) as Datetime)
FROM generalLedgerMonth 
Where FiscalYearid = @fiscalYear
and MonthID NOT IN(Select MonthID FROM generalLedgerMonth where fiscalyearid = @Fiscalyear + 1)


------------------------------------------------------------------------------------------------------------------
-- Password check

Select FullName,ClassDescription,email,SlotNum,SiteName,Case when Len(tblemployee.[Password]) >0 then 'Yes' else 'No' end as PasswordOnFile
FROM tblemployee 
INNER JOIN tblClassifications ON tblemployee.Classificationid = tblclassifications.Classificationid
INNER JOIN tblpositioncontroldetails P ON P.employeeid = tblemployee.employeeid
INNER JOIN tblSite ON P.siteid = tblSite.Siteid
INNER JOIN basePositionfilterfunc(71,2015,'3/4/16',0,1)PF ON PF.Positioncontrolid = P.Positioncontrolid
order by SiteName,Fullname


------------------------------------------------------------------------------------------------------------------------------------------


-- IMPORT 1099 checks

-- check for existing batch
select * from [checkBatch] where [Description] like '%1099%' and FiscalYearID = 2015 -- 1046


------------------------------------------------------------------------------------
---- if none
INSERT INTO checkBatch (
		[Description],
		CheckTypeId,
		BankAccountId,
		AuthorizationId,
		IsLocked,
		IssueDate,
		PayrollRunId,
		FiscalYearId,
		IsClosed,
		ParentBatchId,
		LockedDate
	)
VALUES (
		'1099 Imported Checks (2015)',
		2,
		2,
		NULL,
		1,
		'12/30/2015',
		NULL,
		2015,
		1,
		NULL,
		'03/09/2015'
	);

select * from [checkBatch] where [Description] like '%1099%' and FiscalYearID = 2015



------------------------------------------------------------------------------------

-- check the vendor
select 
	ID,
	PTTOO,
	DefaultPurchasingAddressId,
	DefaultRemittanceAddressId
from Vendor where ID = 3666
-- 3677	David Ruane	11235	11235
-- 3666	RYLEE SCHMIDT	11192	11192


-- get the lowest checknumber < 0 
select * from [check] where checkNum < 0 order by checkNum asc; -- -40000

-- Insert our 1099 check
INSERT INTO [check](
			CheckBatchId,
			CheckNum,
			BankAccountId,
			CheckTypeId,
			CheckTemplateId,
			PTTOO,
			Note,
			NoteInternal,
			IsDirectDeposit,
			Amount,
			HasDocuments,
			CheckStatusId,
			ReconcileStatementDate,
			EmployeeId,
			VendorId,
			AddressId
	)
VALUES (
		1046,
		-40002,
		2,
		2,
		NULL,
		'RYLEE SCHMIDT',
		'IMPORT',
		NULL,
		NULL,
		4705.00,
		NULL,
		2,
		NULL,
		NULL,
		3666,
		11192
	)
	
	
-- verify
select * from [check] where checkBatchID = 1046 and VendorID = 3666


------------------------------------------------------------------------------------------------------------------------------------------
--- Joan report

select * from PayrollRun where [Description] like 'FEB 2016%' --1076

-- get the rows
select 
	Fullname, 
	payrolltype, 
	a.accountstring, 
	[hours], 
	rate, 
	value, 
	[percent]
from tblPayrolldetail pd
	inner join tblPayrollDetailComp pdc 
		on pdc.payrollDetailID=pd.payrollDetailID
	inner join tblAccount a 
		on pdc.accountID=a.accountID
	left join tblEmployee e 
		on e.employeeID=pd.employeeID
where payrollID=1076 and substring(accountstring, 38,4)='6350'


------------------------------------------------------------------------------------------------------------------------------------------


WIP 





-- paste the EWA from spreadsheet
select * from convEWASB;

-- whack convEWASB
truncate table convEWASB;

-- find the timesheets
select 
	sum(tsd.hrs) as HoursWorked, 
	twa.[hours],
	ts.tsWorkAgreementID
into #TempTable	
from tblTimeSheetsDetails tsd
	inner join tblTimeSheets ts 
		on tsd.tsTimeSheetID = ts.TimeSheetId 
	inner join tblWorkAgreement twa
		on ts.tsWorkAgreementID = twa.WorkAgreementID
where ts.tsWorkAgreementID in (select EWASB from convEWASB)
group by
		twa.[hours], 
		ts.tsWorkAgreementID
order by ts.tsWorkAgreementID asc;

-- using a temp table

-- find the maxed out
select 
	HoursWorked,
	[hours],
	tsWorkAgreementID
from #tempTable
	where HoursWorked >= [hours] 
	
-- find the not maxed out
select 
	HoursWorked,
	[hours],
	tsWorkAgreementID
from #tempTable
	where HoursWorked < [hours]

	

	
-- inactivate
select 
	WorkAgreementID,
	CancelledBy,	
	DateCancelled,	
	ReasonCancelled
from tblWorkAgreement
	where WorkAgreementID in (
		select tsWorkAgreementID from #tempTable where HoursWorked >= [hours]
	)
	
select EmployeeID, FullName from tblEmployee where LName = 'Alvarez' -- 965

select EmployeeID, UserID from tblUsers where EmployeeID = 965 --63

Update tblWorkAgreement
	Set CancelledBy = 63,
	DateCancelled = '03/10/2016',
	ReasonCancelled = 'DS Admin inactivated - Maxxed'
where WorkAgreementID in (
		select tsWorkAgreementID from #tempTable where HoursWorked >= [hours]
	)

drop table #tempTable





------------------------------







select * from report --121

select * from tblFilters where FilterID = 121

select * from tblSIte

Update tblFilters 
	Set Filter = '<?xml version="1.0"?>
<FilterEL
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema">
	<IsDeleted>false</IsDeleted>
	<skipNextLogChange>false</skipNextLogChange>
	<Distinct>false</Distinct>
	<Select>
		<SelectLogic>
			<ID>1729.297</ID>
			<ParentID>0</ParentID>
			<EntityAlias>Check</EntityAlias>
			<SelectClause>cast(ltrim(str(81)) + ltrim(str([Check].[Id])) as int)</SelectClause>
			<As>CheckId</As>
			<Aggregate />
			<SortOrder>1</SortOrder>
		</SelectLogic>
		<SelectLogic>
			<ID>2225.302</ID>
			<ParentID>0</ParentID>
			<EntityAlias>CheckBatch</EntityAlias>
			<SelectClause>isnull([CheckBatch].[PayrollRunId],0)</SelectClause>
			<As>PayrollRunId</As>
			<Aggregate />
			<SortOrder>2</SortOrder>
		</SelectLogic>
		<SelectLogic>
			<ID>1731.297</ID>
			<ParentID>0</ParentID>
			<EntityAlias>Check</EntityAlias>
			<SelectClause>upper(isnull(convert(varchar,[Check].[CheckNum]),'''') + CHAR(13) + CHAR(10) + ''Pacific Collegiate School  3004 MIssion St  Santa Cruz, CA 95060                                                                                                                                   '')</SelectClause>
			<As>AddressFrom</As>
			<Aggregate />
			<SortOrder>3</SortOrder>
		</SelectLogic>
		<SelectLogic>
			<ID>583526133</ID>
			<ParentID>1735.297</ParentID>
			<EntityAlias>Address_Check</EntityAlias>
			<As />
			<Aggregate />
			<SortOrder>4</SortOrder>
		</SelectLogic>
		<SelectLogic>
			<ID>1044035160</ID>
			<ParentID>1735.297</ParentID>
			<EntityAlias>Address_Check</EntityAlias>
			<As />
			<Aggregate />
			<SortOrder>5</SortOrder>
		</SelectLogic>
		<SelectLogic>
			<ID>144751925</ID>
			<ParentID>1735.297</ParentID>
			<EntityAlias>Address_Check</EntityAlias>
			<As />
			<Aggregate />
			<SortOrder>6</SortOrder>
		</SelectLogic>
		<SelectLogic>
			<ID>1083548343</ID>
			<ParentID>1735.297</ParentID>
			<EntityAlias>Address_Check</EntityAlias>
			<As />
			<Aggregate />
			<SortOrder>7</SortOrder>
		</SelectLogic>
		<SelectLogic>
			<ID>247125302</ID>
			<ParentID>1735.297</ParentID>
			<EntityAlias>Address_Check</EntityAlias>
			<As />
			<Aggregate />
			<SortOrder>8</SortOrder>
		</SelectLogic>
		<SelectLogic>
			<ID>1735.297</ID>
			<ParentID>0</ParentID>
			<EntityAlias>Check</EntityAlias>
			<SelectClause>upper([Check].[PTTOO] + CHAR(13) + CHAR(10) + [Address_Check].[Address1] + CHAR(13) + CHAR(10) + case when isnull([Address_Check].[Address2],'''') = '''' then '''' else [Address_Check].[Address2] + CHAR(13) + CHAR(10) end + [Address_Check].[City]+'', ''+[Address_Check].[State]+'' ''+[Address_Check].[Zip])</SelectClause>
			<As>AddressTo</As>
			<Aggregate />
			<SortOrder>9</SortOrder>
		</SelectLogic>
	</Select>
	<Where>
		<item>
			<key>
				<decimal>1741.297</decimal>
			</key>
			<value>
				<WhereLogic>
					<_ID>1741.297</_ID>
					<EntityAlias>Check</EntityAlias>
					<WhereClause>[Check].[CheckStatusId] &lt;&gt; ''3''</WhereClause>
					<_Description>only non-void checks</_Description>
					<IsAggregate>false</IsAggregate>
					<CanBeInFromClause>true</CanBeInFromClause>
					<ID>1741.297</ID>
					<Description>only non-void checks</Description>
				</WhereLogic>
			</value>
		</item>
	</Where>
	<OuterJoin />
	<SubQuery />
	<OrderBy />
	<SelectOrder>0</SelectOrder>
	<BaseFilterLogic xsi:type="TodayFilter" />
</FilterEL>'
where FilterID = 121

---------------------------


-- Mass change Admin (SCCOE@/SCCOE) password

-- create a temp table to hold 
-- Santa Cruz CoE district Names
CREATE TABLE #tmpDatabases
(
	ID INT IDENTITY(1, 1) primary key ,
	Name NVARCHAR(100),
);
 
 
-- fill it in with the dbNames
insert into #tmpDatabases (Name)
select Name from master.dbo.sysdatabases where name like 'DSSC%'
 
 
--------------------------------------
-- procedure to update passwords
-- The idea is to have the SQL loop through
-- Santa Cruz Databases and change the Admin 
-- password as it goes
 
Declare @DistrictID int
Declare @DistrictCount int
Declare @DistrictName  as varchar(50)
Declare @NewPassword  as varchar(50)
Declare @SQLString as nvarchar(100)
Declare @UpdateSQLString as nvarchar(100)
 
-- get the max rows
select @DistrictCount = COUNT(*) from #tmpDatabases;
 
Set @DistrictID = 1
Set @NewPassword = 'adonly1212'
 
 
---------------------------------
-- Suite Plus
-- update tblEmployee
WHILE (@DistrictID <= @DistrictCount)
	 BEGIN
		select @DistrictName = name from #tmpDatabases where ID = @DistrictID
		SET @DistrictID = @DistrictID + 1
		Set @UpdateSQLString = ''
		Set @UpdateSQLString = 'Update '+@DistrictName+'..tblEmployee Set [Password] = '+''''+@NewPassword+''''+' where email like ''SCCOE@%'''
		EXECUTE sp_executesql @UpdateSQLString
	 END
 
-- verify
Set @DistrictID = 1
WHILE (@DistrictID <= @DistrictCount)
	 BEGIN
		select @DistrictName = name from #tmpDatabases where ID = @DistrictID
		SET @DistrictID = @DistrictID + 1
		Set @SQLString = ''
		Set @SQLString = 'select email, [Password] from '+@DistrictName+'..tblEmployee where email like ''SCCOE@%'''
		EXECUTE sp_executesql @SQLString
	 END
	 
 
---------------------------------
-- Core Suite
-- update tblUsers
 
Set @DistrictID = 1
WHILE (@DistrictID <= @DistrictCount)
	 BEGIN
		select @DistrictName = name from #tmpDatabases where ID = @DistrictID
		SET @DistrictID = @DistrictID + 1
		Set @UpdateSQLString = ''
		Set @UpdateSQLString = 'Update '+@DistrictName+'..tblUsers Set [Password] = '+''''+@NewPassword+''''+' where LoginName like ''SCCOE%'''
		EXECUTE sp_executesql @UpdateSQLString
	 END
 
-- verify
Set @DistrictID = 1
WHILE (@DistrictID <= @DistrictCount)
	 BEGIN
		select @DistrictName = name from #tmpDatabases where ID = @DistrictID
		SET @DistrictID = @DistrictID + 1
		Set @SQLString = ''
		Set @SQLString = 'select LoginName, [Password] from '+@DistrictName+'..tblUsers where LoginName like ''SCCOE%'''
		EXECUTE sp_executesql @SQLString
	 END 
 
-- cleanup
drop table #tmpDatabases

-- EOF  (╯°□°)╯︵ ┻━┻



-----------------------------------------------------------------------------------




--- 2016

Declare @PrevFiscalYear INT
Declare @NewFiscalYear INT
   
SET @PrevFiscalYear = 2015
SET @NewFiscalYear = 2016

Update new
	Set 
		new.WorkDays = new.PaidDays,
		new.StartDate = (select  
								DateAdd(yy, 1, Cast(old.StartDate As datetime)) 
						from tblSlotCalendarByYear old where new.calendarName = old.calendarName and FiscalYear = @PrevFiscalYear),
		new.EndDate = (select  
							DateAdd(yy, 1, Cast(old.EndDate As datetime)) 
						from tblSlotCalendarByYear old where new.calendarName = old.calendarName and FiscalYear = @PrevFiscalYear),
		new.StartPayrollID = (select TOP 1 PayrollID from tblPayroll where FiscalYear = @NewFiscalYear order by PayrollID asc),
		new.EndPayrollID = (select TOP 1 PayrollID from tblPayroll where FiscalYear = @NewFiscalYear order by PayrollID desc)
from tblSlotCalendarByYear new 
	where new.Fiscalyear = @NewFiscalYear 


select * from tblSlotCalendarByYear where FiscalYear = 2016

---------------------------------------------------------------------------------

WIP





select HireDate from tblEmployee where EmployeeID in (
		select EmployeeID from tblEmployee where ClassificationId = 6 and TerminateDate is null -- 198 rows
	)

	
	
insert into tblSubstituteAssignment 
	(
		EmployeeID,
		JobTitleID,
		EffectiveDate,
		Notes
	)
select 
	EmployeeID,
	143 as JobTitleID,
	(
		select hiredate from tblEmployee emp 
			where te.employeeID = emp.EmployeeID
	) as EffectiveDate,
	-- '07/01/2015' as EffectiveDate,
	'DS Admin Created - 03/25/2016' as Notes
from tblEmployee te 
	where ClassificationId = 6 and TerminateDate is null 
	
select * from tblSubstituteAssignment where EmployeeID = 4266



-----------------------------------------------------------------

WIP

----------------------------------------------
-- create our temporary tables
 
-- this table holds the district names
CREATE TABLE #tmpDatabases 
(
	ID INT IDENTITY(1, 1) primary key ,
	Name NVARCHAR(100),
);
 
 
 
-- this table holds the district 
-- stats for comp editor
CREATE TABLE #tmpDistrictStat
(
	ID INT IDENTITY(1, 1) primary key ,
	DistrictName NVARCHAR(100),
	DSGroupNum int,
	DSGroupName NVARCHAR(100),
	CompEditorView int,
	CompEditorEdit int,
	CompEditorUsed int
);
 
 
 
-- fill it in with the dbNames
-- avoiding global and system related dbs
insert into #tmpDatabases (Name)
select Name from master.dbo.sysdatabases where Name not in (
		'DS_Admin',
		'DS_Global',
		'DS_netdb',
		'DS_Support',
		'DS_Template', 
		'DS_Log',
		'DS_Log_Archive'
	) and Name like 'DS%'
 
 
 
------------------------------------------------------------------------------------------------------------------------------------------
-- begin the check process
 
 
 
 
-- Declare SQLString as nvarchar(4000) 
-- for instances where we are connecting to a SQL Server 2000 instance, 
-- we cannot use varchar(max) because this is a feature 
-- introduced on SQL Server 2005
 
 
Declare @SQLString as nvarchar(4000)
Declare @DS as nvarchar(100)
Declare @DistrictCount int
Declare @Looper int
 
 
 
Set @Looper = 1
 
-- get the number of sites
select @DistrictCount = COUNT(*) from #tmpDatabases;
 
-- crawl process
-- this part is where SQL is made to crawl the 
-- different sites base on the entries
-- of #tmpDatabases
WHILE (@looper <= @DistrictCount)
	 BEGIN
 
		-- only do the check if tblSecurityGroup exist
		-- could be redundant since we are already 
		-- screening out non district replated dbs
		if (EXISTS (select * 
						 from INFORMATION_SCHEMA.TABLES 
						 WHERE TABLE_NAME = 'tblSecurityGroup'))
			BEGIN
				-- process each district
				select @DS = name from #tmpDatabases where ID = @looper
 
				-- the whole SQL string should be in one block
				-- otherwise the variables will be out of scope
 
				-- get the district name, security settings 
				Set @SQLString =   'Declare @DistrictName as nvarchar(100);
									Declare @SecGroupNum as int;
									Declare @SecGroupName as nvarchar(100);
									Declare @CompEditorView as int;
									Declare @CompEditorEdit as int;
									Declare @CompEditorUsed as int;

									select @DistrictName = DistrictTitle from '+@DS+'..tblDistrict;
									select 
										@SecGroupNum = SecurityGroupNum,
										@SecGroupName = GroupName, 
										@CompEditorView = CompensationEditorView, 
										@CompEditorEdit = CompensationEditorEdit 
									from '+@DS+'..tblSecurityGroup where (CompensationEditorEdit = 1);

									select @CompEditorUsed = count(*) from '+@DS+'..CompensationHistory;

									insert into #tmpDistrictStat (
												DistrictName,
												DSGroupNum,
												DSGroupName,
												CompEditorView,
												CompEditorEdit,
												CompEditorUsed
											) 
									select 
											@DistrictName, 
											@SecGroupNum,
											@SecGroupName,
											@CompEditorView,
											@CompEditorEdit,
											@CompEditorUsed;';
 
				-- run our string as an SQL
				EXECUTE sp_executesql @SQLString
		END
	SET @looper = @looper + 1
END
 
 
 
-- select * from #tmpDatabases
select
	DistrictName,
	DSGroupNum,
	DSGroupName,
	CompEditorView,
	CompEditorEdit,
	(CASE WHEN CompEditorUsed > 0 THEN 1 ELSE 0 END) as CompEditorUsed
from #tmpDistrictStat where CompEditorEdit = 1

----------------------------------------
-- cleanup the temp tables
 
-- drop table #tmpDatabases
-- drop table #tmpDistrictStat
 
-- EOF




------------------------------------------------------------------------------------------------------------------------------------------


-----------------
-- create schedule and schedule details

-- cleanup convFullName
truncate table convFullName;

-- get the employeeID
Update ConvFullName
	Set EmployeeID = te.EmployeeID
from convFullName cv
	inner join tblEmployee te on cv.SSN = te.SocSecNo
	
-- check for NULL employeeIDs
select EmployeeID, SSN, FullName from convFullName where EmployeeID is NULL

-- get comptypeid for stipend
select * from tblCompType where CompType like '%stipend%' -- 10

-- get classification
select
	cv.EmployeeID,
	cv.FullName,
	te.ClassificationID,
	cg.[Description]
from convFullName cv
	inner join tblEmployee te on cv.EmployeeID = te.EmployeeID
	inner join tblClassifications cl on te.ClassificationID = cl.ClassificationID
	inner join ds_global..tblClassificationGroup cg on cl.ClassificationGroup = cg.ClassificationGroupID
	
-- set extra (mxGroup) as classification
Update convFullName
	Set Extra = cg.ClassificationGroupID
from convFullName cv
	inner join tblEmployee te on cv.EmployeeID = te.EmployeeID
	inner join tblClassifications cl on te.ClassificationID = cl.ClassificationID
	inner join ds_global..tblClassificationGroup cg on cl.ClassificationGroup = cg.ClassificationGroupID
	
-- set extra2(Step column) as description

-- set extra3 as smCompTypeID
update convFullName
	Set Extra3 = 10
	
-- set Extra4 as SeriesID (latest)
Update convFullName
	Set Extra4 = (select distinct top 1 seriesID from tblSalaryMatrix order by seriesID desc)
	
-- set extra5 as the value

-- set extra6 as the stipendScheduleID

-- set extra7 as colNumber
-- it must match the col (Extra8)
Update convFullName
	Set Extra7 = 1,
		Extra8 = 1
		
-- set extra9 as step
-- set extra10 as rowNumber
-- they should match
Update convFullName
	Set Extra9 = 1,
		Extra10 = 1
		
-- verify the data
-- to be imported
select
	Extra3 as smCompTypeID,
	Extra as mxGroup,
	Extra4 as SeriesID,
	Extra5 as Value,
	Extra2 as StepColumn,
	Extra7 as ColNumber,
	Extra8 as Col,
	Extra10 as RowNumber,
	Extra9 as Step,
	Extra6 as smStipendScheduleID,
	'03/30/2016' as DCreated,
	NULL as OldID,
	NULL as CoeCode,
	NULL as RetireBase
from convFullName

-- import
insert into tblSalaryMatrix (
		smCompTypeID,
		mxGroup,
		SeriesID,
		Value,
		StepColumn,
		ColNumber,
		Col,
		RowNumber,
		Step,
		smStipendScheduleID,
		DCreated,
		OldId,
		COECode,
		RetireBase
	)
select distinct
	cast(extra3 as int),
	cast(extra as int),
	cast(extra4 as int),
	cast(extra5 as decimal(10,2)),
	Extra2 as StepColumn,
	cast(extra7 as int(10)),
	Extra8 as Col,
	cast(extra10 as int),
	Extra9 as Step,
	cast(extra6 as int),
	'03/30/2016' as DCreated,
	NULL as OldID,
	NULL as CoeCode,
	NULL as RetireBase
from convFullName

-- set extra11 as salary matrixID
select distinct
	cv.EmployeeID,
	cv.FullName,
	cv.Extra2,
	sm.SalaryMatrixID
from convFullName cv
	inner join tblSalaryMatrix sm on cv.Extra2 = sm.StepColumn
	
Update convFullName
	Set Extra11 = sm.SalaryMatrixID
from convFullName cv
	inner join tblSalaryMatrix sm on cv.Extra2 = sm.StepColumn
	
-- get the positionControlID
select distinct
	cv.EmployeeID,
	cv.Fullname,
	pos.PositionControlID
from convFullName cv
inner join tblPositionControlDetails pos on cv.EmployeeID = pos.EmployeeID
where pos.InactiveDate is NULL 

update convFullName
	Set Extra12 = pos.PositionControlID
from convFullName cv
inner join tblPositionControlDetails pos on cv.EmployeeID = pos.EmployeeID
where pos.InactiveDate is NULL 

-- import to tblCompDetails
insert into tblCompDetails(
		FiscalYear,
		EmployeeID,
		cdPositionControlID,
		CompTypeID,
		SalaryMatrixID,
		CompAmount,
		Notes,
		DCreated,
		EffectiveDate,
		InactiveDate,
		OldId,
		trgDistrictId,
		COECode
	)
select distinct
	2015,
	EmployeeID,
	extra12,
	extra3,
	extra11,
	extra5,
	'DS Admin imported'as Notes,
	'03/30/2016' as DCreated,
	NULL,
	NULL,
	0,
	1018,
	NULL
from convFullName

------------------------------------------
--whack mode

-- delete from tblSalaryMatrix where DCreated = ''
-- delete from tblCompDetails where DCreated = '' and Notes = 'DS Admin Imported'

------------------------------------------------------------------------------------------------------------------------------------------
-- Find users with multiple accounts on Core Suite

select 
	te.EmployeeID,
	us.UserID,
	te.LName,
	te.Fname,
	te.MI,
	us.SecurityGroup,
	sg.GroupName,
	sg.DistrictID,
	us.SiteID,
	si.SiteName,
	us.LoginName,
	us.[Password]
from tblEmployee te
	inner join tblUsers us on te.EmployeeID = us.EmployeeID 
	inner join tblSecurityGroup sg on us.SecurityGroup = sg.SecurityGroupNum
	left join tblSite si on us.SiteID = si.SiteID
	where us.LoginName is not NULL
	and us.[Password] is not NULL
	and us.InactiveDate is NULL
	and te.employeeID in (
			select employeeID from tblUsers 
				where inactiveDate is NULL 
				and LoginName is Not NULL 
				and [Password]is not NULL 
				group by EmployeeID having count(employeeID) > 1
		) 
	order by LName asc, Fname asc, MI asc;



http://screencast.com/t/eOZ5uF8yqw21





--------------------------------
-- IMPORTING VENDORS


-- prepare convVendor
truncate table convVendor


-- sort by company NAME
-- paste the data as follows;
-- NAME = CompanyName
-- PTTOO = NAME
Update convVendor Set PTTOO = Name


----------------------------------------------------
-- VENDORS TABLE


-- get the vendor ids
-- VENDORNUM = vendor.id
select
	cv.Name
from convVendor cv
inner join Vendor v on cv.Name = SubString(v.CompanyName, 1, Len(cv.Name))

Update convVendor
	Set VendorNum = v.id
from convVendor cv
inner join Vendor v on cv.Name = SubString(v.CompanyName, 1, Len(cv.Name))


-- check for vendors w/o vendor id
select distinct vendorNum, Name from convVendor where vendorNum is NULL 

-- check if the NULLs are not part of Vendors
select distinct Name from convVendor cv 
	where Name not in (
		select SubString(v.CompanyName, 1, Len(cv.Name)) from Vendor v
	) and cv.vendorNum is NULL
	order by Name asc;

-- insert the missing vendors	
Insert Into Vendor(
	CompanyName,
	PTTOO,
	VendorStatusId,
	DateCreated,
	isVendor
)
select Distinct
	Name,
	PTTOO,
	1,
	'04/08/2016',
	1
from convVendor cv
where Name not in (
		select SubString(v.CompanyName, 1, Len(cv.Name)) from Vendor v
	) and cv.vendorNum is NULL
	order by Name asc;
	
-- get again the vendor ids
-- VENDORNUM = vendor.id
select
	cv.Name
from convVendor cv
inner join Vendor v on cv.Name = SubString(v.CompanyName, 1, Len(cv.Name))

Update convVendor
	Set VendorNum = v.id
from convVendor cv
inner join Vendor v on cv.Name = SubString(v.CompanyName, 1, Len(cv.Name)) and cv.VendorNum is NULL

-- check for vendors w/o vendor id
select distinct vendorNum, Name from convVendor where vendorNum is NULL 

-- get vendorID and address
select Vendor from convVendor

----------------------------------------------------
-- ADDRESS TABLE

Insert Into [Address] (
		Address1,
		City,
		[State],
		Zip
	)
select distinct
	LTrim(RTrim(cv.Address1 )),
	cv.City1,
	cv.State1,
	cv.Zip1
from convVendor cv 
inner join [Address] a on cv.Address1 != LTrim(rtrim(SubString(a.[Address1],1,Len(cv.Address1))))

select * from [Address]

----------------------------------------------------
-- VENDOR ADDRESS TABLE

select 
	cv.Name,
	cv.address1,
	NULL as addressID
into #tempDatabase
from convVendor cv
inner join [Address] a on cv.Address1 = LTrim(rtrim(SubString(a.[Address1],1,Len(cv.Address1)))) 
where cv.VendorNum not in (select distinct VendorID from VendorAddress)
group by 
	cv.Name,
	cv.address1
order by Name asc;


Update #tempDatabase
	Set AddressID = (select top 1 id from [address] where address1 = t.address1)
from #tempDatabase t


Insert Into VendorAddress (
		VendorId,
		AddressId
	)
select Distinct
	(Select top 1 id from Vendor where t.Name = SubString(CompanyName, 1, Len(t.Name))),
	t.AddressID
from #tempDatabase t 


select * from VendorAddress

----------------------------------------------------
-- VENDOR TABLE 
--fix purchase / remit

select * from convVendor
	
-- drop table #tempDatabase

select * from address

select VendorNum, Name, address21 from convVendor where name = '100 PERCENT LEARNING FUN, '


----------------------------------------------------

select
	tu.DistrictID,
	td.DistrictTitle,
	tsi.SiteName,
	tu.SecurityGroup,
	ts.GroupName,
	tu.EmployeeID,
	te.FullName,
	tu.IsKeyContact,
	tu.IsPrimaryContact,
	(Case When te.TerminateDate is not Null Then 'Yes' Else 'No' End) as Terminated
from tblUsers tu
inner join tblEmployee te on tu.EmployeeID = te.EmployeeID
inner join tblSecurityGroup ts on tu.SecurityGroup = ts.SecurityGroupNum
inner join tblDistrict td on tu.DistrictID = td.DistrictID
left join tblSite tsi on tu.SiteID = tsi.SiteID
where (tu.IsKeyContact = 1 or tu.IsPrimaryContact =1)

----------------------------------------------------





SELECT [Employee].[Fullname] AS [Fullname]
	,[ClassificationEmployee].[ClassDescription] AS [ClassDescription]
	,[StatusEmployee].[Status] AS [Status]
	,[JobTitlePosition].[JobTitle] AS [JobTitle]
	,CONVERT(NVARCHAR(20), [Employee].[HireDate], 101) AS [HireDate]
	,[Evaluation].[DDue] AS [CurrentEvalDue]
	,[Evaluation].[DReceived] AS [CurrentEvalRecd]
	,[EvaluationResult].[EvalResult] AS [EvalResult]
	,[Evaluation].[Notes] AS [Notes]
	,[Evaluation].[EvaluationID] AS [EvaluationID]
	,[EvaluationType].[EvalType] AS [EvalType]
	,[StatusEmployee].[StatusID] AS [StatusID]
	,[ClassificationEmployee].[ClassificationID] AS [ClassificationID]
	,[Employee].[EmployeeID] AS [EmployeeID]
	,[Employee_Evaluation].[Fullname] AS [Evaluator]
	,[Employee_Evaluation].[EmployeeID] AS [EvaluatorID]
	,[Evaluation].[EvaluationTypeID] AS [EvaluationTypeID]
	,[JobTitlePosition].[JobTitleID] AS [JobTitleID]
	,[Site_Evaluation].[SiteName] AS [EvalSiteName]
	,[SiteWork].[SiteName] AS [WorkSiteName]
	,[SiteWarrant].[SiteName] AS [WarrantSiteName]
	,[Site_Evaluation].[SiteCode] AS [EvalSiteCode]
	,[SiteWork].[SiteCode] AS [WorkSiteCode]
	,[SiteWarrant].[SiteCode] AS [WarrantSiteCode]
	,[Site_Evaluation].[SiteID] AS [EvalSiteID]
	,[SiteWork].[SiteID] AS [WorkSiteID]
	,[SiteWarrant].[SiteID] AS [WarrantSiteID]
FROM [tblEmployee] [EMPLOYEE]
INNER JOIN [tblClassifications] [CLASSIFICATIONEMPLOYEE] ON ([EMPLOYEE].[ClassificationId] = [CLASSIFICATIONEMPLOYEE].[ClassificationID])
RIGHT JOIN [tblEvaluation] [EVALUATION]
LEFT JOIN [tblEmployee] [EMPLOYEE_EVALUATION] ON ([EVALUATION].[evaluatorEmployeeID] = [EMPLOYEE_EVALUATION].[EmployeeID])
LEFT JOIN [tblEvaluationResult] [EVALUATIONRESULT] ON ([EVALUATION].[Result] = [EVALUATIONRESULT].[EvaluationResultID])
INNER JOIN [tblEvaluationType] [EVALUATIONTYPE] ON ([EVALUATION].[EvaluationTypeID] = [EVALUATIONTYPE].[EvaluationTypeID])
LEFT JOIN [tblSite] [SITE_EVALUATION] ON ([EVALUATION].[SiteID] = [SITE_EVALUATION].[SiteID]) ON ([EMPLOYEE].[EmployeeID] = [EVALUATION].[EmployeeID]) INNER JOIN [tblPositionControlDetails] [POSITION]
INNER JOIN [tblJobTitles] [JOBTITLEPOSITION] ON ([POSITION].[pcJobTitleID] = [JOBTITLEPOSITION].[JobTitleID])
INNER JOIN [tblSite] [SITEWORK] ON ([POSITION].[SiteID] = [SITEWORK].[SiteID]) ON ([EMPLOYEE].[EmployeeID] = [POSITION].[EmployeeID]) LEFT JOIN [tblSite] [SITEWARRANT] ON ([EMPLOYEE].[WarrantSiteID] = [SITEWARRANT].[SiteID]) LEFT JOIN [tblStatus] [STATUSEMPLOYEE] ON ([EMPLOYEE].[StatusID] = [STATUSEMPLOYEE].[StatusID]) INNER JOIN (
	SELECT [Position].[PositionControlID] AS [PositionID]
	FROM [tblPositionControlDetails] [POSITION]
	INNER JOIN [tblJobTitles] [JOBTITLEPOSITION] ON ([POSITION].[pcJobTitleID] = [JOBTITLEPOSITION].[JobTitleID])
	WHERE ([JobTitlePosition].[Type] = 0)
		AND (
			(
				(
					POSITION.EffectiveDate IS NULL
					OR POSITION.EffectiveDate <= getdate()
					)
				AND (
					POSITION.InactiveDate IS NULL
					OR POSITION.InactiveDate >= getdate()
					)
				)
			)
	) [baseepositionFuncc] ON [baseepositionFuncc].[PositionID] = [Position].[PositionControlID] WHERE (
		(
			(
				[Evaluation].[FiscalYear] = ~ FiscalYear ~
				AND ~ DistrictID ~ IN (3)
				)
			OR (~ DistrictID ~ <> 3)
			)
		)
	AND ([Evaluation].[DDue] >= '04/30/2016')
	AND (
		(
			(
				EMPLOYEE_EVALUATION.HireDate IS NULL
				OR EMPLOYEE_EVALUATION.HireDate < '7/1/2016'
				)
			AND (
				EMPLOYEE_EVALUATION.TerminateDate IS NULL
				OR EMPLOYEE_EVALUATION.TerminateDate > '6/30/2015'
				)
			)
		AND (
			(
				POSITION.EffectiveDate IS NULL
				OR POSITION.EffectiveDate < '7/1/2016'
				)
			AND (
				POSITION.InactiveDate IS NULL
				OR POSITION.InactiveDate > '6/30/2015'
				)
			)
		)
ORDER BY [Employee_Evaluation].[Fullname]
	,[EvaluationType].[EvalType]
	,[Employee].[Fullname]



-----------------------



select * from tblEmployee where lName = 'Acosta' -- 1577



select distinct
	pcb.EmployeeID,
	pcb.LastName,
	pcb.FirstName,
	pcb.StartDate,
	pcb.EndDate,
	(select top 1 Payrate from PersPayrollContrib where EmployeeID = pcb.EmployeeID and PayrollId = 976 and startdate = pcb.StartDate and endDate = pcb.EndDate order by payrate desc) as PayRate,
	(select (select top 1 Earnings from PersPayrollContrib where EmployeeID = pcb.EmployeeID and PayrollId = 976 and startdate = pcb.StartDate and endDate = pcb.EndDate order by earnings desc)+(select top 1 Earnings from PersPayrollContrib where EmployeeID = pcb.EmployeeID and PayrollId = 976 and startdate = pcb.StartDate and endDate = pcb.EndDate order by earnings asc)) as Earnings,
	(select (select top 1 TaxDeferredMemberPaidContrib from PersPayrollContrib where EmployeeID = pcb.EmployeeID and PayrollId = 976 and startdate = pcb.StartDate and endDate = pcb.EndDate order by TaxDeferredMemberPaidContrib desc)+(select top 1 TaxDeferredMemberPaidContrib from PersPayrollContrib where EmployeeID = pcb.EmployeeID and PayrollId = 976 and startdate = pcb.StartDate and endDate = pcb.EndDate order by TaxDeferredMemberPaidContrib asc)) as TaxDeferredMemberPaidContrib,
	(select (select top 1 DistrictAmount from PersPayrollContrib where EmployeeID = pcb.EmployeeID and PayrollId = 976 and startdate = pcb.StartDate and endDate = pcb.EndDate order by TaxDeferredMemberPaidContrib desc)+(select top 1 DistrictAmount from PersPayrollContrib where EmployeeID = pcb.EmployeeID and PayrollId = 976 and startdate = pcb.StartDate and endDate = pcb.EndDate order by TaxDeferredMemberPaidContrib asc)) as DistrictAmount
from PersPayrollContrib pcb 
where 
	PayrollId = 976 
	and StartDate != '04/01/2016'
	and EmployeeId = 1577 
order by 
	StartDate asc,
	ID asc;
	
select * from PersPayrollContrib where  PayrollId = 976 --and EmployeeId = 1577
order by 
	StartDate asc,
	ID asc;


select * into #tempdatabases from PersPayrollContrib pcb 
where 
	PayrollId = 976 
	and StartDate != '04/01/2016'
	and EmployeeId != 1577 
	and PayRateType NOT IN ('DLY','MTY')
	
delete from PersPayrollContrib where id in(
select Id from #tempdatabases)

truncate table #tempdatabases

drop table #tempdatabases

select * from PersPayrollContrib where PayRateType = 'MTY' and EndDate = '04/30/2016' -- PayRateType HRY

select EmployeeID into #tempHourly from PersPayrollContrib where PayRateType = 'MTY' and EndDate = '04/30/2016' -- PayRateType HRY

select * from PersPayrollContrib where EmployeeID in (
	select EmployeeID from #tempHourly
)and PayrollId = 976 order by lastname

select * from PersPayrollContrib where EmployeeID in (
	select EmployeeID from #tempHourly
)and PayrollId = 976 and PayRateType = 'HRY' and StartDate != '04/01/2016' order by lastname


Update PersPayrollContrib 
	Set PayRateType = 'MTY',
		TransactionType = 'RSA'
where EmployeeID in (
	select EmployeeID from #tempHourly
)and PayrollId = 976 and PayRateType = 'HRY' and StartDate != '04/01/2016' order by lastname




insert into PersPayrollContrib(
	PayrollId,
	EmployeeId,
	EmployerCalPERSId,
	RecordType,
	ReportType,
	CalPERSId,
	FirstName,
	MiddleName,
	LastName,
	StartDate,
	EndDate,
	AppointmentId,
	PayRateType,
	PayRate,
	TransactionType,
	Earnings,
	FullTimeDaysPerWeek,
	FullTimeHoursPerWeek,
	SpecialCompCategory,
	SpecialCompType,
	SpecialCompAmount,
	TaxedMemberPaidContrib,
	TaxDeferredMemberPaidContrib,
	TaxDeferredEPMC,
	TaxedMemberPaidAdditionalContrib,
	PyPositionId,
	PyCompensationTypeId,
	TaxDeferredMemberPaidAdditionalContrib,
	HoursWorked,
	DistrictRate,
	DistrictAmount,
	SurvivorContribution
)
-- Without a crash
-- Without a bang
-- This process might make
-- the server hang... xD

select distinct
	976,
	pcb.EmployeeID,
	pcb.EmployerCalPERSId,
	pcb.RecordType,
	pcb.ReportType,
	pcb.CalPERSId,
	pcb.FirstName,
	pcb.MiddleName,	
	pcb.LastName,
	pcb.StartDate,
	pcb.EndDate,
	pcb.AppointmentId,
	pcb.PayRateType,
	(select top 1 Payrate from PersPayrollContrib where EmployeeID = pcb.EmployeeID and PayrollId = 976 and startdate = pcb.StartDate and endDate = pcb.EndDate order by payrate desc) as PayRate,
	'RSA',
	(select (select top 1 Earnings from PersPayrollContrib where EmployeeID = pcb.EmployeeID and PayrollId = 976 and startdate = pcb.StartDate and endDate = pcb.EndDate order by earnings desc)+(select top 1 Earnings from PersPayrollContrib where EmployeeID = pcb.EmployeeID and PayrollId = 976 and startdate = pcb.StartDate and endDate = pcb.EndDate order by earnings asc)) as Earnings,
	pcb.FullTimeDaysPerWeek,
	pcb.FullTimeHoursPerWeek,
	pcb.SpecialCompCategory,
	pcb.SpecialCompType,
	pcb.SpecialCompAmount,
	pcb.TaxedMemberPaidContrib,
	(select (select top 1 TaxDeferredMemberPaidContrib from PersPayrollContrib where EmployeeID = pcb.EmployeeID and PayrollId = 976 and startdate = pcb.StartDate and endDate = pcb.EndDate order by TaxDeferredMemberPaidContrib desc)+(select top 1 TaxDeferredMemberPaidContrib from PersPayrollContrib where EmployeeID = pcb.EmployeeID and PayrollId = 976 and startdate = pcb.StartDate and endDate = pcb.EndDate order by TaxDeferredMemberPaidContrib asc)) as TaxDeferredMemberPaidContrib,
	pcb.TaxDeferredEPMC,
	pcb.TaxedMemberPaidAdditionalContrib,
	pcb.PyPositionId,
	pcb.PyCompensationTypeId,
	pcb.TaxDeferredMemberPaidAdditionalContrib,
	pcb.HoursWorked,
	pcb.DistrictRate,
	(select (select top 1 DistrictAmount from PersPayrollContrib where EmployeeID = pcb.EmployeeID and PayrollId = 976 and startdate = pcb.StartDate and endDate = pcb.EndDate order by TaxDeferredMemberPaidContrib desc)+(select top 1 DistrictAmount from PersPayrollContrib where EmployeeID = pcb.EmployeeID and PayrollId = 976 and startdate = pcb.StartDate and endDate = pcb.EndDate order by TaxDeferredMemberPaidContrib asc)) as DistrictAmount,
	pcb.SurvivorContribution
from PersPayrollContrib pcb 
where 
	PayrollId = 976 
	and StartDate != '04/01/2016'
	and EmployeeId != 1577 
	and PayRateType NOT IN ('DLY','MTY')
	
select * from PersPayrollContrib



-- 976

sp_columns STRSPayrollContrib

Id
PayrollId
EmployeeId
FiscalYear
SSN
LastName
FirstName
MiddleInitial
MemberCode
AssignmentCode
PayRate
PayCode
Earnings
MemberContributionRatePostTax
ContributionCode
MemberContributionAmountPostTax
ServicePeriodBegin
ServicePeriodEnd
SourceCode



------------------------------------------------------------------------------------------------------------------------------------------


----------------------------

select * from convFullName

truncate table convFullName 

-- extra = plan name
-- extra2 = policy
-- extra3 = policy cost
-- extra4 = District Contribution
-- extra5 = Employee Contribution
-- extra6 = Notes
-- extra7 = effective payroll
-- extra8 = inactive payroll
-- extra9 = planid
-- extra10 = policyid 
-- extra11 = pyEmployeeID
-- extra12 = PayrollRunID

-------
-- get LName, FName, MI, FullName and EmployeeID
update convFullName
	Set 	
		EmployeeID = te.EmployeeID,
		LName = te.LName,
		FName = te.FName,
		MI = te.MI,
		FullName = te.FullName
from convFullName cv
inner join tblEmployee te on cv.SSN = te.SocSecNo


-------
-- get the planID

-- check for wrong spellings
select * from pyDeductionPlan where DeductionPlan in (select distinct extra from convFullName)

Update convFullName
	Set 
		extra9 = pln.id
from convFullName cv
inner join pyDeductionPlan pln on cv.extra = pln.DeductionPlan

-------
-- get the policy id

select * from pyDeductionTemplate where inactivepayrollid is null and pyDeductionPlanID = 124order by employeeID

Update convFullName
	Set 
		extra10 = pol.PyDeductionPolicyId
from convFullName cv
inner join pyDeductionTemplate pol on cv.extra9 = pol.pyDeductionPlanID

-------
-- get the pyEmployeeID

select * from PayrollRun where [Description] = 'MAY 2016' -- 70

Update convFullName
	Set Extra11 = pye.ID
from convFullName cv
inner join pyEmployee pye on cv.EmployeeID = pye.ReferenceKey and cv.SSN = pye.SSN and pye.PayrollRunId = 70

-- extra = plan name
-- extra2 = policy
-- extra3 = policy cost
-- extra4 = District Contribution
-- extra5 = Employee Contribution
-- extra6 = Notes
-- extra7 = effective payroll
-- extra8 = inactive payroll
-- extra9 = planid
-- extra10 = policyid 
-- extra11 = pyEmployeeID
-- extra12 = PayrollRunID


insert into pyDeduction(
	PyEmployeeId,
	ReferenceKey,
	ReferenceSource,
	ReferenceExtra,
	Code,
	PyDeductionPlanId,
	PyDeductionCycleId,
	PyDeductionMethodId,
	PayrollRunId,
	DistrictAmount,
	EmployeeAmount,
	DistrictPayrollCap,
	DistrictFiscalYearCap,
	DistrictCalendarYearCap,
	EmployeePayrollCap,
	EmployeeCalendarYearCap,
	IsOverridden,
	OverridesId
)
select
	cast(Extra11 as dec(10,0)),
	Null,
	Null,
	Null,
	Null,
	cast(Extra9 as dec(10,0)),
	0,
	0,
	70,
	cast(extra4 as dec(10,2)),
	cast(extra5 as dec(10,2)),
	0,
	0,
	0,
	0,
	0,
	1,
	Null
from convFullName

-----
-- add to employee/benefits tab

insert into pyDeductionTemplate(
	EmployeeId,
	EffectivePayrollId,
	InactivePayrollId,
	PyDeductionPlanId,
	Amount,
	Percentage,
	TypeId,
	PayrollCap,
	FiscalYearCap,
	CalendarYearCap,
	PyDeductionPolicyId,
	DistrictAmount,
	Note
)
select 
	EmployeeID,
	cast(986 as dec(10,0)),
	cast(986 as dec(10,0)),
	cast(extra9 as dec(10,0)),
	cast(extra3 as dec(10,2)),
	NULL,
	1,
	0.00,
	0.00,
	0.00,
	Null,
	0.00,
	'Imported DS Admin - 05/24 - '+ extra6
from convFullName cv


select * from pyDeductionTemplate where Note like 'Imported DS Admin - 05/24 -%'
Select * 
from pyDeduction pyd 
where pyd.PayrollRunID = 70 and pyd.pyEmployeeID in (select extra11 from convFullName) and pyd.ReferenceKey is Null and pyd.IsOverridden = 1 and pyd.PyDeductionPlanId = 124

select * from convFullName
select * from pyEmployee
select * from pyDeductionTemplate where employeeID = 291
select * from tblPayroll where payrollid = 986


--- whack mode
--- because i messed up
delete from pyDeduction where PayrollRunID = 70 and pyEmployeeID in (select extra11 from convFullName) and ReferenceKey is Null and IsOverridden = 1 and PyDeductionPlanId = 124
delete from pyDeductionTemplate where Note like 'Imported DS Admin - 05/24 -%'

select * from pyDeduction where PayrollRunID = 70 and pyEmployeeID = 35823
select * from dbo.PyDeductionTemplate where EmployeeID = 291 and PyDeductionPlanId = 124
select * from pyDeductionPlan where ID = 127






(select PayrollID from tblPayroll where PayPeriod = REPLACE(pr.[Description], Substring(pr.[Description],8,1), convert(varchar,Cast(Substring(pr.[Description],8,1)+1 as decimal(10,0)),






WIP




-- get the PayrollID
select PayrollId, FiscalYear, PayPeriod from tblPayroll where PayPeriod = 'MAY 2016' -- 2382

-- get the employeeid 
select EmployeeID, FullName from tblEmployee where LName = 'Zapata' -- 32431

-- get sub hourly timetype
select * from tblTimeType -- 8

-- get the time sheet id
select * from tblTimeSheets where tsEmployeeID = 32431 and tsPayroll = 2382 and tsTimeType = 8

-- get time sheet details
select * from tblTimeSheetsDetails where tsTimeSheetID in (1319118, 1319136) and tsDate = '05/04/2016'

-- find the correct one to remove
select * from tblTimeSheetsDetails where TimeSheetDetailID in (1244323, 1245505) and tsDate = '05/04/2016'

-- 
select * from tblTimeSheets where TimeSheetID in (1318020, 1312935) -- 1318020

select EmployeeID, FullName from tblEmployee where EmployeeID = 166


select * from tblTimeSheetsDetails where tsTimeSheetID in (1318020) and tsDate = '05/04/2016' -- 1244323

select * from tblTimeSheetsDetails where xRefSubTSDetailId = 1244323






---------------------------------------------------------------

WIP San Dieguito Actid import



-- insert the modified columns 

-- verify they are the same on both tables
select * from AccountColumn
select * from tblAccountColumn

-- whack convFullName so we can use it
select * from convFullName
truncate table convFullName

-- extra to extra7 = columns
-- extra8 = string (new)
-- extra9 to extra18 = old columns
-- extra19 = old acct string

-- get the account string from the columns (new)
select 
	extra+'-'+extra2+'-'+extra3+'-'+extra4+'-'+extra5+'-'+extra6+'-'+extra7
from convFullName cv

Update convFullName 
	Set Extra8 = extra+'-'+extra2+'-'+extra3+'-'+extra4+'-'+extra5+'-'+extra6+'-'+extra7
from convFullName cv

-- verify
select extra8 from convFullName cv

-- get the account string from the columns (old)
select 
	extra9+'-'+extra10+'-'+extra11+'-'+extra12+'-'+extra13+'-'+extra14+'-'+extra15+'-'+extra16+'-'+extra17+'-'+extra18
from convFullName cv

Update convFullName 
	Set Extra19 = extra9+'-'+extra10+'-'+extra11+'-'+extra12+'-'+extra13+'-'+extra14+'-'+extra15+'-'+extra16+'-'+extra17+'-'+extra18
from convFullName cv

-- verify
select extra19 from convFullName cv

-- extra20 = acctid
select 
	cv.extra19,
	ta.accountstring,
	ta.accountid,
	extra8
from convFullName cv
inner join tblAccount ta on cv.extra19 = ta.AccountString



select * from tblAccount where inactive = 0


Update convFullName 
	Set extra20 = ta.accountid
from convFullName cv
inner join tblAccount ta on cv.extra19 = ta.AccountString

-- find nulls
select extra19 from convFullName where extra20 is null

insert into tblAccount(accountid, districtid, accountstring, inactive)
select  (select count(*) from tblAccount)+1, 17, extra19, -1 from convFullName where extra19 not in (select accountstring from tblAccount) group by extra19




select accountstring from tblAccount where accountstring in (select extra19 from convFullName)



select accountstring from GeneralLedger where accountstring in (select extra19 from convFullName)



select
	cv.id,
	cv.extra19,
	ta.accountstring,
	cv.extra20,
	cv.extra8,
	ta.accountid
from convFullName cv
inner join tblAccount ta on cv.extra19 = ta.accountstring and cast(cv.extra20 as dec(10,0)) = ta.accountid
where cv.extra19 = '06-00-9025-005-7110-1000-000-2100-001-001'


select * from convfullname where extra20 is null and extra19 is not null

--exec spbudgetimport 0,0,0


select * from pkdispenser


(select SalaryMatrixID from tblSalaryMatrix where StepColumn = (REPLACE ( StepColumn , substring(StepColumn, len(StepColumn),1) , string_replacement )  ))




-------------------------------





select EmployeeID, FullName from tblEmployee where LName = 'Collins' and FName = 'Elaine' -- 18848

select PositionControlID, slotNum from tblPositionControlDetails where EmployeeID = 18848 and inactiveDate is NULL -- 53920, AA633

select PositionControlID, slotNum from tblPositionControlDetails where slotNum = 'aa633' order by PositionControlID desc; -- 53920,53902,26232

select CompTypeID,CompType from tblCompType where CompType = 'Base Pay'

select top 1 FiscalYear,EmployeeID,cdPositionControlID,CompTypeID,SalaryMatrixID from tblCompDetails where CompTypeID = 112 and cdPositionControlID in (53920,53902,26232) order by CompDetailsID desc;

insert into tblCompDetails(FiscalYear,EmployeeID,cdPositionControlID,CompTypeID,SalaryMatrixID)
select top 1 FiscalYear,EmployeeID,cdPositionControlID,CompTypeID,SalaryMatrixID from tblCompDetails where CompTypeID = 112 and cdPositionControlID in (53920,53902,26232) order by CompDetailsID desc;



WIP 



select ClassificationID from tblClassifications where ClassDescription in (
	'Certificated',
	'Certificated Management',
	'Classified',
	'Classified Management',
	'Confidential'
)

select Distinct
	te.EmployeeID,
	te.FullName, 
	tc.ClassDescription,
	convert(varchar, te.HireDate, 101) as hireDate,
	te.Longevity as FY15_16,
	te.Longevity+1 as FY16_17
from tblEmployee te
inner join tblClassifications tc on te.ClassificationId = tc.ClassificationId
inner join tblCompDetails tpt on te.employeeid = tpt.employeeid and tpt.fiscalyear = 2015 and tpt.InactiveDate is null
where te.ClassificationID in (
	select ClassificationID from tblClassifications where ClassDescription in (
		'Certificated',
		'Certificated Management',
		'Classified',
		'Classified Management',
		'Confidential'
	)
)


select * from tblCompDetails
select * from tblEmployee



---------------------------------------------------------------------------

WIP 


select * from tblSalaryMatrixSeries


set identity_insert tblSalaryMatrixSeries on

insert into tblSalaryMatrixSeries (mxSeriesID,DistrictID,Series,ApprovedDate,EffectiveDate,InactiveDate,mxpayrollID,Comments,OldId)
select
	7, 76, 'G', NULL, '07/01/2016', NULL, 0, 'Effective date 07/01/2016', 0

set identity_insert tblSalaryMatrixSeries off

select * from tblSalaryMatrix where SeriesID = 7

update tblSalaryMatrix set seriesid = 7 where SeriesID = 8

select * from tblSalaryMatrix where mxGroup = 15 and seriesid in (6,7) and StepColumn ='iv-17' and smCompTypeID = 1


select * from tblCompDetails where compdetailsid = 29149


select * from tblactiontype where TypeDesc like '%salary%' -- 2


select distinct
	te.EmployeeID,
	te.FullName,
	tc1.CompTypeID,
	tm1.mxGroup,
	tc1.salarymatrixid,
	tm1.Stepcolumn,
	tc2.CompTypeID,
	tc2.salarymatrixid,
	tm2.Stepcolumn,
	(REPLACE ( tm1.Stepcolumn, substring(tm1.Stepcolumn,len(tm1.Stepcolumn),1), cast(substring(tm1.Stepcolumn,len(tm1.Stepcolumn),1) as dec (10,0))+1 )  ) as NewStep,
	(select salarymatrixid from tblSalaryMatrix where Stepcolumn = REPLACE ( tm1.Stepcolumn, substring(tm1.Stepcolumn,len(tm1.Stepcolumn),1), cast(substring(tm1.Stepcolumn,len(tm1.Stepcolumn),1) as dec (10,0))+1 )  and seriesid = 7 and mxGroup = tm1.mxGroup and smCompTypeID = tm1.smCompTypeID)
	from tblActionDue ad
inner join tblEmployee te on ad.adEmployeeID = te.EmployeeID
inner join tblCompDetails tc1 on te.employeeid = tc1.EmployeeID and tc1.fiscalyear = 2015 and tc1.CompTypeID =1 
inner join tblCompDetails tc2 on te.employeeid = tc2.EmployeeID and tc2.fiscalyear = 2016 and tc2.CompTypeID =1 
inner join tblSalaryMatrix tm1 on tc1.SalaryMatrixID = tm1.SalaryMatrixID
inner join tblSalaryMatrix tm2 on tc2.SalaryMatrixID = tm2.SalaryMatrixID
inner join tblpositioncontroldetails pc on tc1.cdPositionControlID = pc.PositionControlID
where 
	ad.actionTypeID = 2 
	and ad.DateNext = '07/01/2016' 
	and pc.trgClassificationId in (1, 15, 2, 7, 6)
	and te.terminatedate is null
	--and te.EmployeeID = 6409
	order by FullName asc;


select * from tblSalaryMatrix where stepColumn like '48-7' and seriesID = 7 and smCompTypeID = 1

select * from tblSalaryMatrix where stepColumn like '49-1' and seriesID = 7 


select * from tblClassifications where classificationid = 6

select * from tblCOmpDetails where employeeID = 6409 and CompTypeID1

select * from tblActionDue where adEmployeeID = 6409

select * from tblpositioncontroldetails where positioncontrolid = 5821

-------------



select * from convFullName
 
-- Whack ConvFullName
truncate table convfullname;
--------------------------------------------------------------------------------------
   
-- paste on convFullName
--      LName, FName, SSN, EmployeeID, FullName, Classification, Position Description, PensionID, Comp Desc,
   
   
-- Locate the PayrollRunID
select * from PayrollRun Where [Description] like 'JULY 2016'
	-- 90 1006
	
--------------------------------------------------------------------------------------
-- DO THIS ONLY 
-- if the employees do not exist on pyEmployee 
-- Paste the employee id in ConvFullName
-- Create pyEmployee entries base on the employee id on convFullname
insert into pyEmployee 
	(
		ReferenceKey, 
		ReferenceSource,
		ReferenceExtra, 
		SSN,
		LastName,
		FirstName,
		MiddleName,
		MailingAddressId,
		HomeAddressId,
		BirthDate,
		HireDate,
		TerminateDate,
		EmploymentStatusId,
		WarrantSiteID,
		IsDeferredPay,
		PayCode,
		FedMaritalStatus,
		FedExemptions,
		FedAddAmt,
		FedEIC,
		FedSpouseEICCertificateID,
		StateMaritalStatus,
		StateExemptions,
		StateAddAmt,
		PayrollRunID
	)
Select Distinct
	tblEmployee.EmployeeID,
	1,
	Null,
	tblEmployee.SocSecNo,
	tblEmployee.LName,
	tblEmployee.FName,
	tblEmployee.MI,
	tblEmployee.MailingAddressId,
	tblEmployee.HomeAddressId,
	tblEmployee.DOB,
	tblEmployee.HireDate,
	tblEmployee.TerminateDate,
	tblEmployee.StatusID,
	tblEmployee.WarrantSiteID,
	tblEmployee.IsDeferredPay,
	Null,
	tblEmployee.FedMaritalStatus,
	tblEmployee.FedExemptions,
	tblEmployee.FedAddAmt,
	tblEmployee.FedEIC,
	tblEmployee.FedSpouseEICCertificateID,
	tblEmployee.StateMaritalStatus,
	tblEmployee.StateExemptions,
	tblEmployee.StateAddAmt,
	90
from ConvFullname
	Inner Join tblEmployee
		On tblEmployee.EmployeeID = ConvFullname.EmployeeID
where Extra13 is Null;
			
--------------------------------------------------------------------------------------
-- Verify they are in pyEmployee
select
	pyEmployee.id,
	pyEmployee.ReferenceKey,
	convFullName.EmployeeID
	from pyEmployee
	inner join convFullName
		on pyEmployee.ReferenceKey = convFullName.EmployeeID
	Where (pyEmployee.PayrollRunID = 90)
	Group by
		pyEmployee.id,
		pyEmployee.ReferenceKey,
		convFullName.EmployeeID
	Order by convFullName.EmployeeID asc;
		
-- in ConvFullname, Set Extra13 = pyEmployeeID
update cf set Extra13 = py.id from pyEmployee py
	inner join convfullname cf
		on cf.employeeid = py.ReferenceKey
		where (py.PayrollRunID = 90);
		   
		   
-- check for null in pyEmployeeID = Extra13
select * from convFullName where Extra13 is Null
			
--------------------------------------------------------------------------------------
-- create inserts for pyPosition
-- set extra20 as classification id
Update convfullname
Set Extra20 = tc.classificationID
From convfullname cf
	inner join tblClassifications tc
		on cf.extra = tc.ClassDescription
		 
		 
		 
-- insert them into pyPosition
Insert Into pyPosition
	(
		pyEmployeeID,
		ReferenceKey,
		ReferenceSource,
		ReferenceExtra,
		ClassificationId,
		[Description],
		PensionID,
		HasBenefitsDeducted,
		PayPercent,
		PayrollRunID,
		IsOverRidden,
		SiteID,
		Months
	)
Select Distinct
	convFullName.Extra13,
	Null,
	-1,
	Null,
	convFullName.Extra20,
	convFullName.extra2,
	convFullName.Extra3,
	1,
	1,
	90,
	1,
	tblEmployee.WarrantSiteID,
	tblEmployee.PayCycle
from convFullName
	inner join tblEmployee
		on convFullName.employeeID = tblEmployee.EmployeeID 
		   
	   
Update cf 
	set Extra15 = pp.id -- pyPositionID
	from pyPosition pp
	inner join convFullName cf
		on cf.extra13 = pp.pyEmployeeID
		and cf.extra2 = pp.[description]
		and cf.extra20 = pp.ClassificationID
	where pp.payrollrunid = 90 
		and pp.referencesource = -1
		
--- create inserts from pyCompensation
		
select * from ds_global..pyCompensationType -- 9 Other = Stipend

   
-- Locate fields we need in pyCompensation
Select * from pyCompensation
-- Rate = Extra6
-- Amount = Extra9
-- from date = extra10
-- to date  = extra11
-- Referencesource = -1
-- ReferenceKey = Null
-- ReferenceExtra = Null
-- IsOverriden = 1
-- PayrollRunID = 62
-- Description = Extra4
-- Link to ConvFullName
		   
-- do the insert
Insert into pyCompensation
	(
		pyEmployeeID,
		pyPositionID,
		pyCompensationTypeID,
		PensionCode,
		HasBenefitsDeducted,
		PayPercent,
		Rate ,
		ReferenceKey,
		ReferenceSource,
		ReferenceExtra,
		Amount,
		FromDate,
		ToDate,
		IsOverRidden,
		PayrollRunID,
		[Description]
	)
Select
	ConvFullName.Extra13,
	ConvFullName.Extra15,
	Extra27,
	ConvFullName.Extra14,
	1,
	1,
	ConvFullName.Extra6,
	Null,
	-1,
	Null,
	ConvFullName.Extra9,
	ConvFullName.Extra10,
	ConvFullName.Extra11,
	1,
	90,
	ConvFullName.Extra4
from ConvFullName
	inner join tblEmployee
		on ConvFullName.EmployeeID = tblEmployee.EmployeeID
			
-- verify
select * from pyCompensation 
	where PayrollRunID = 90 and ReferenceKey is Null and FromDate is null
	 
delete from pyCompensation 
	where PayrollRunID = 90 and ReferenceKey is Null and FromDate is null   
	  
   
	  
	  
-- Update convFullName
-- extra16 = pyCompensationID
		 
		   
Update cf 
	set Extra16 = pc.id -- pyCompensationID
	from pyCompensation pc
	inner join convFullName cf
	on cf.extra13 = pc.pyEmployeeID
		and cf.extra15 = pc.pyPositionID
	where pc.payrollrunid = 90 
		and pc.referencesource = -1
			
-- pyPositionFunding
--      Extra15 = pyPositionID
--      AccountID = Extra17
--      Percentage = 1
--      ReferenceKey = Null
--      ReferenceSource = -1
--      IsOverriden = 1
--      PayrollRunID = 67
  
Update convFullName
	set Extra17 = ta.AccountID
from convFullName
	inner join tblAccount ta
		on convFullName.extra12 = ta.accountstring;
			
-- check for Nulls in ConvFullName.Extra17
select * from ConvFullName 
	Where Extra17 is Null
		
update convfullname set extra19 = (case when sums.sumValue >= 1 then cf.extra7 else '1' END)
--select * 
from convfullname cf inner join
(
select extra15,sum(cast(extra7 as decimal(10,2))) as sumValue from convfullname 
group by extra15
) sums
on cf.extra15 = sums.extra15


-- Insert them into pyPositionFunding
Insert into pyPositionFunding
	(
		pyPositionID,
		AccountID,
		Percentage,
		ReferenceKey,
		ReferenceSource,
		IsOverridden,
		PayrollRunID
	)
select
	cv.Extra15,
	cv.Extra17,
	--cast((select Cast(extra9 as dec(10,2))/(select sum(Cast(extra9 as dec(10,2))) from ConvFullName where Extra15 = cv.Extra15)) as dec(10,2)),
	extra7,
	Null,
	-1,
	1,
	90
from ConvFullName cv
			   
select * from pyPosition
select * from pyPositionFunding
	where PayrollRunID = 67
		
select * from pyEmployee
	where ReferenceKey = 55
		
Select * from pyEmployee
	where PayrollRunId= 67
	and FedExemptions = 0
	   
Update pyEmployee
	Set FedExemptions = Null
	where PayrollRunId= 67
	and FedExemptions = 0
		
select * from PayrollRun
update PayrollRun
	Set DateToBePrinted = '12/31/2015' -- should be in same year
	Where ID = 61
		
-- Try Calculating Net for one employee
	
--***************************
-- MISC FUNCTIONS
--***************************

-- get paytype

select 
	cv.fname,
	ptype.[Description],
	ptype.ID
from convfullname cv
inner join ds_global..pyCompensationType ptype on cv.fname = ptype.[Description]

Update convfullname
	Set 
		Extra27 = ptype.ID
from convfullname cv
inner join ds_global..pyCompensationType ptype on cv.fname = ptype.[Description]
 
-- get the employeeid
Update convFullName
Set EmployeeID = te.EmployeeID
from convFullName cv
inner join tblEmployee te on cv.SSN = te.SocSecNo
 
-- look for null empids
select * from convfullname where employeeid is null
 
-- Get the FullName
-- Plug 'em in ConvFullName
update cf set FullName = em.FullName from tblEmployee em
	inner join convfullname cf
		on cf.employeeid = em.EmployeeID
	
-- Get the PensionID
select
cv.extra,
rc.RetireClass,
rc.RetireClassID
from convfullName cv
inner join tblRetireClass rc on cv.extra = rc.RetireClass
 
			
-- Plug 'em in ConvFullName
Update  convfullName
Set Extra3 = rc.RetireClassID
from convfullName cv
inner join tblRetireClass rc on cv.extra = rc.RetireClass
		   
-- Get the Job Description
select * from pyCompensation
	where PayrollRunID = 62
	   
	   
sp_columns tblEmployee
sp_columns tblPositionControlDetails
sp_columns tblJobTitles
Select
	cf.employeeid,
	job.JobTitle
from convFullName cf
	inner join tblPositionControlDetails pos
		on cf.employeeid = pos.EmployeeID
	inner join tblJobTitles job
		on pos.pcJobTitleID = job.JobTitleID
	where pos.inActiveDate is Null
		
-- Plug 'em in ConvFullName
update cf set Extra = job.JobTitle from convFullName cf
	inner join tblPositionControlDetails pos
		on cf.employeeid = pos.EmployeeID
	inner join tblJobTitles job
		on pos.pcJobTitleID = job.JobTitleID
	where pos.inActiveDate is Null
	   
	   
--- find address ID
select * from tblEmployee where employeeid = 2891
   
-- locate retirementClass
Select * from tblRetireClass rc
-- in case we make a mess
   
select * from pyCompensation
	where ReferenceKey is Null
	and ReferenceSource = -1
	and PayrollRunID = 67
	   
select * from pyPositionFunding
	where ReferenceKey is Null
	and ReferenceSource = -1
	and PayrollRunID = 67
	  
	  
select * from pyPosition 
	where ReferenceKey is Null
	and ReferenceSource = -1
	and PayrollRunID = 67
	  
		  
select * from convfullname where extra20 is null and extra in ('Teacher, Middle School','Teacher, ROP')
select * from tblClassifications -- 19
Update convfullname 
	Set Extra20 = 2
	where extra20 is null and and extra in ('Teacher, Middle School','Teacher, ROP')
	  
	  
	  
select * from pyPosition where PayrollRunID = 67 
	and ReferenceKey is Null
	and ReferenceSource = -1
	  
Update pyPosition 
	Set PensionID = cf.extra3
From pyPosition pp inner join convfullname cf
	on pp.id = cf.extra15
	where PayrollRunID = 67 
	and ReferenceKey is Null
	and ReferenceSource = -1
	  
select * from pyCompensation where PayrollRunID = 67 
	and ReferenceKey is Null
	and ReferenceSource = -1
	  
Update pyCompensation 
	Set PensionCode  = cf.extra14
From pyCompensation pc inner join convfullname cf
	on pc.id = cf.extra16
	where PayrollRunID = 67 
	and ReferenceKey is Null
	and ReferenceSource = -1
	  
--**********************************************************************************
	   
	   
--- delete them
Select * from pyCompensation
	where ReferenceKey is Null
	and ReferenceSource = -1
	and PayrollRunID = 67
	and Description = '3% Retro for Ad Ed 7/01-1/30/16'
	  
Select * from pyPositionFunding
	where ReferenceKey is Null
	and ReferenceSource = -1
	and PayrollRunID = 67
	and pyPositionId in (
		Select pyPositionId from pyCompensation
			where ReferenceKey is Null
			and ReferenceSource = -1
			and PayrollRunID = 67
			and Description = '3% Retro for Ad Ed 7/01-1/30/16'
	)
	  
------------------------------------------------------------------------------------------------------------------------
delete from pyCompensation
	where ReferenceKey is Null
	and ReferenceSource = -1
	and PayrollRunID = 51
	   
Delete from pyPositionFunding
   where ReferenceKey is Null
	and ReferenceSource = -1
	and PayrollRunID = 51
	  
Delete from pyPosition 
	where ReferenceKey is Null
	and ReferenceSource = -1
	and PayrollRunID = 51
 
 
 
  
Delete from pyCompensation
	where ReferenceKey is Null
	and ReferenceSource = -1
	and PayrollRunID = 67
	   
Delete from pyPositionFunding
	where ReferenceKey is Null
	and ReferenceSource = -1
	and PayrollRunID = 67
	  
Delete from pyPosition 
	where ReferenceKey is Null
	and ReferenceSource = -1
	and PayrollRunID = 67
 
-- EOF


Insert into pyPositionFunding
	(
		pyPositionID,
		AccountID,
		Percentage,
		ReferenceKey,
		ReferenceSource,
		IsOverridden,
		PayrollRunID
		
select pypositionid, sum(percentage) from pyPositionFunding where PayrollRunID = 90 group by pypositionid

select * from pyPositionFunding where PayrollRunID = 90 and pypositionid = 73797





select * from pyPosition where id = 74272




select * from pyposition where payrollrunid = 90 and referencesource = -1










-------------------------
WIP 


-- locate 
select distinct
	 reqh.AuthorizationRequestTypePk,
	 reqd.AuthorizationRequestId,
	 (select top 1 ar2.id from AuthorizationRequest  ar2 where ar2.AuthorizationRequestTYpePK = reqh.AuthorizationRequestTypePk and ar2.AuthorizationRequestTypeId = 8 order by ar2.id desc),
	 (select ar1.AuthorizationRequestStatusId from AuthorizationRequest ar1 where ar1.AuthorizationRequestTypePk = reqh.AuthorizationRequestTypePk and ar1.AuthorizationRequestTypeId = 8),
	 reqh.AuthorizationRequestStatusId,
	 (select sum(cast(isnext as dec(10,0))) from AuthorizationRequestDetail where AuthorizationRequestId = reqd.authorizationRequestID) as showsindashboard,
	 (select top 1 id from AuthorizationRequestDetail looper where looper.actionedbyuserid is null and looper.isnext = 0 and looper.AuthorizationRequestId = reqd.authorizationRequestID and looper.[priority] > 0 ) as FlipID
from AuthorizationRequest reqh
inner join AuthorizationRequestDetail reqd on reqh.id = reqd.authorizationRequestID
inner join tblWorkAgreement wa on reqh.AuthorizationRequestTypePk = wa.workagreementid and wafiscalyear = 2016
where 
	--reqh.AuthorizationRequestTYpePK = 16378 
	reqh.AuthorizationRequestTypeId = 8
	and reqh.AuthorizationRequestStatusId = 3
	and (select sum(cast(isnext as dec(10,0))) from AuthorizationRequestDetail where AuthorizationRequestId = reqd.authorizationRequestID) = 0


-- flip
update AuthorizationRequestDetail  
	set IsNext = 1
where id in (
	select distinct
		 (select top 1 id from AuthorizationRequestDetail looper where looper.actionedbyuserid is null and looper.isnext = 0 and looper.AuthorizationRequestId = reqd.authorizationRequestID and looper.[priority] > 0 )
	from AuthorizationRequest reqh
	inner join AuthorizationRequestDetail reqd on reqh.id = reqd.authorizationRequestID
	where 
		--reqh.AuthorizationRequestTYpePK = 16378 
		reqh.AuthorizationRequestTypeId = 8
		and reqh.AuthorizationRequestStatusId = 3
		and (select sum(cast(flip.isnext as dec(10,0))) from AuthorizationRequestDetail flip where flip.AuthorizationRequestId = reqd.authorizationRequestID) = 0
)and [priority] > 0


select * from AuthorizationRequest  where AuthorizationRequestTYpePK = 14902

select * from AuthorizationRequestDetail where authorizationREquestID = 3610

select tblEmployee.employeeid, tblEmployee.fullname, tblEmployee.email, tblEmployee.[password] 
	from tblemployee
	inner join tblUsers
		on tblUsers.Employeeid = tblEmployee.employeeid
	where tblUsers.UserID = 3 -- plug the UserID here
	
	
select * from AuthorizationRequest  where id = 42000




------------------------------

WIP



select * from tblemployee where employeeid = 42


select distinct
	cd.employeeid,
	cd.salarymatrixid,
	sx.mxseriesid,
	sx.series,
	(select cd2.salarymatrixid from tblcompdetails cd2 where cd2.employeeid = cd.employeeid and cd2.fiscalyear = 2015 and cd2.comptypeid = 1)
from tblcompdetails cd
inner join tblsalarymatrix sm on cd.salarymatrixid = sm.salarymatrixid
inner join tblsalarymatrixseries sx on sm.seriesid = sx.mxseriesid
where cd.fiscalyear = 2016

select
	pcd.employeeid,
	pcd.positioncontrolid,
	pcd.slotnum,
	-- 2016 old
	cd.fiscalyear,
	cd.salarymatrixid,
	sx.series,
	sm.stepcolumn,
	sm.value,
	-- 2015
	--(select cd2.fiscalyear from tblcompdetails cd2 where cd2.employeeid = pcd.employeeid and cd2.cdpositioncontrolid = pcd.positioncontrolid and cd2.fiscalyear = 2015 and cd2.comptypeid = 1) as FY2015,
	--(select cd2.salarymatrixid from tblcompdetails cd2 where cd2.employeeid = pcd.employeeid and cd2.cdpositioncontrolid = pcd.positioncontrolid and cd2.fiscalyear = 2015 and cd2.comptypeid = 1) as salarymatrixid2,
	--(select sm3.series from tblsalarymatrixseries sm3 where sm3.mxseriesid in (select sm2.seriesid from tblsalarymatrix sm2 where sm2.salarymatrixid in (select cd2.salarymatrixid from tblcompdetails cd2 where cd2.employeeid = pcd.employeeid and cd2.cdpositioncontrolid = pcd.positioncontrolid and cd2.fiscalyear = 2015 and cd2.comptypeid = 1)) ),
	-- E series
	(select serE.salarymatrixid from tblsalarymatrix serE where serE.stepColumn = sm.stepcolumn and serE.seriesID =  5),
	(select serE.stepcolumn from tblsalarymatrix serE where serE.stepColumn = sm.stepcolumn and serE.seriesID =  5),
	(select serE.value from tblsalarymatrix serE where serE.stepColumn = sm.stepcolumn and serE.seriesID =  5)
from tblpositioncontroldetails pcd
inner join tblcompdetails cd on pcd.employeeid = cd.employeeid and pcd.positioncontrolid = cdpositioncontrolid and cd.fiscalyear = 2016 and cd.comptypeid = 1
inner join tblsalarymatrix sm on cd.salarymatrixid = sm.salarymatrixid
inner join tblsalarymatrixseries sx on sm.seriesid = sx.mxseriesid
where pcd.inactivedate is null
order by pcd.employeeid


select * from tblsalarymatrix where stepcolumn = '1-ENG1' and seriesid = 5


select * from tblsalarymatrixseries





WIP --

select distinct
	cd1.employeeid,
	te1.fullname,
	sx.mxGroup,
	sx.seriesid,
	-- 2015
	(select cd2.salarymatrixid from tblcompdetails cd2
		where cd2.employeeid = cd1.employeeid
		and cd2.fiscalyear = 2015
		and cd2.CompTypeID = 19
		and cd2.inactivedate is null) as salarymatrixid,
	(select sm1.StepColumn from tblsalarymatrix sm1
		where sm1.salarymatrixid = (
			select cd2.salarymatrixid from tblcompdetails cd2
				where cd2.employeeid = cd1.employeeid
				and cd2.fiscalyear = 2015
				and cd2.CompTypeID = 19
				and cd2.inactivedate is null)) as stepcolumn,
	(select sm2.RowNumber from tblsalarymatrix sm2
		where sm2.salarymatrixid = (
			select cd2.salarymatrixid from tblcompdetails cd2
				where cd2.employeeid = cd1.employeeid 
				and cd2.fiscalyear = 2015 
				and cd2.CompTypeID = 19 
				and cd2.inactivedate is null)) as rownumber, 
	(select sm2.col from tblsalarymatrix sm2
		where sm2.salarymatrixid = (
			select cd2.salarymatrixid from tblcompdetails cd2 
				where cd2.employeeid = cd1.employeeid 
				and cd2.fiscalyear = 2015 
				and cd2.CompTypeID = 19 
				and cd2.inactivedate is null)) as col,
	-- 2016
	(select sm3.RowNumber+1 from tblsalarymatrix sm3
		where sm3.salarymatrixid = (
			select cd2.salarymatrixid from tblcompdetails cd2 
				where cd2.employeeid = cd1.employeeid 
				and cd2.fiscalyear = 2015 
				and cd2.CompTypeID = 19 
				and cd2.inactivedate is null)) as rownumbernew,
	(select stuff(sm3.col, len(sm3.col),1, char(ascii(substring(sm3.col, len(sm3.col),1))+1)) from tblsalarymatrix sm3
		where sm3.salarymatrixid = (
			select cd2.salarymatrixid from tblcompdetails cd2 
				where cd2.employeeid = cd1.employeeid 
				and cd2.fiscalyear = 2015 
				and cd2.CompTypeID = 19 
				and cd2.inactivedate is null)) as col2,
	(select top 1 sm4.stepcolumn from tblsalarymatrix sm4 where sm4.seriesid = (select top 1 mxSeriesID from tblsalarymatrixseries order by mxSeriesID desc) and sm4.rownumber = (select sm3.RowNumber+1 from tblsalarymatrix sm3
		where sm3.salarymatrixid = (
			select cd2.salarymatrixid from tblcompdetails cd2 
				where cd2.employeeid = cd1.employeeid 
				and cd2.fiscalyear = 2015 
				and cd2.CompTypeID = 19 
				and cd2.inactivedate is null)) 
		and sm4.col = (select stuff(sm3.col, len(sm3.col),1, char(ascii(substring(sm3.col, len(sm3.col),1))+1)) from tblsalarymatrix sm3
		where sm3.salarymatrixid = (
			select cd2.salarymatrixid from tblcompdetails cd2 
				where cd2.employeeid = cd1.employeeid 
				and cd2.fiscalyear = 2015 
				and cd2.CompTypeID = 19 
				and cd2.inactivedate is null))) as newStepcolumn
into #tempotable 
from tblcompdetails cd1
inner join tblemployee te1 on cd1.employeeid = te1.employeeid and cd1.inactivedate is null and cd1.CompTypeID = 19
inner join tblpositioncontroldetails pos1 on te1.employeeid = pos1.employeeid and pos1.inactivedate is null
inner join tblsalarymatrix sx on cd1.salarymatrixid = sx.salarymatrixid
where cd1.CompTypeID = 19 and cd1.inactivedate is null and cd1.fiscalyear = 2016
and te1.classificationid in (select classificationid from tblClassifications where ClassificationGroup = 2)
order by te1.fullname

drop table #tempotable


select 
	tmp.employeeid,
	tmp.fullname,
	tmp.salarymatrixid,
	tmp.stepcolumn,
	tmp.mxgroup,
	tmp.newStepcolumn,
	(case
		when tmp.newStepcolumn is null then (select tmp.salarymatrixid from #tempotable tmp2 where tmp2.employeeid = tmp.employeeid)
	else
		(select top 1 salarymatrixid from tblsalarymatrix where stepcolumn = tmp.newStepcolumn and seriesid = 5 and mxgroup = tmp.mxgroup)
	end
	) as newSalMatid
from #tempotable tmp
inner join tblsalarymatrix sx on tmp.salarymatrixid = sx.salarymatrixid

select 
	tmp.employeeid,
	tmp.fullname,
	(select top 1 compdetailsid from tblcompdetails where employeeid = tmp.employeeid and comptypeid = 19 and fiscalyear = 2016) as compdetailsid16,
	tmp.salarymatrixid,
	tmp.stepcolumn,
	tmp.mxgroup,
	tmp.newStepcolumn,
	(case
		when tmp.newStepcolumn is null then (select tmp.salarymatrixid from #tempotable tmp2 where tmp2.employeeid = tmp.employeeid)
	else
		(select top 1 salarymatrixid from tblsalarymatrix where stepcolumn = tmp.newStepcolumn and seriesid = 5 and mxgroup = tmp.mxgroup)
	end
	) as newSalMatid
into #tempotable2
from #tempotable tmp
inner join tblsalarymatrix sx on tmp.salarymatrixid = sx.salarymatrixid where tmp.employeeid = 575


select * from tblcompdetails where employeeid = 575 and salarymatrixid = 12672

drop table #tempotable3



update tblcompdetails 
	set salarymatrixid = t2.newSalMatid
from tblcompdetails corr
inner join #tempotable2 t2 on corr.compdetailsid = t2.compdetailsid16



select 
	cdd.employeeid,
	cdd.compdetailsid,
	cdd.comptypeid,
	cdd.salarymatrixid,
	tm2.newSalMatId
into #tempotable3
from tblcompdetails cdd
inner join #tempotable2 tm2 on cdd.employeeid = tm2.employeeid and cdd.salarymatrixid = tm2.salarymatrixid  

update  tblcompdetails
	set salarymatrixid = tm2.newSalMatId
from tblcompdetails cdd
inner join #tempotable2 tm2 on cdd.employeeid = tm2.employeeid and cdd.salarymatrixid = tm2.salarymatrixid  and cdd.compdetailsid = 

select * from tblemployee where employeeid = 575


select * from tblcompdetails where comptypeid = 19 and fiscalyear in (2015, 2016) and employeeid = 575


select * from DSSCLiveOak2..tblcompdetails where comptypeid = 19 and fiscalyear in (2015, 2016) and employeeid = 575




select * from tblemployee where employeeid = 587



select * from DSSCLiveOak2..tblcompdetails where fiscalyear = 2016 and employeeid in (select employeeid from #tempotable2)

select 
	orig.employeeid,
	orig.fiscalyear,
	orig.comptypeid,
	orig.compdetailsid,
	orig.salarymatrixid,
	bak.salarymatrixid
from tblcompdetails orig
inner join #tempotable2 tempo2 on orig.employeeid = tempo2.employeeid
inner join DSSCLiveOak2..tblcompdetails bak on orig.compdetailsid = bak.compdetailsid
where bak.fiscalyear = 2016


update tblcompdetails
	set salarymatrixid = bak.salarymatrixid
from tblcompdetails orig
inner join #tempotable2 tempo2 on orig.employeeid = tempo2.employeeid
inner join DSSCLiveOak2..tblcompdetails bak on orig.compdetailsid = bak.compdetailsid
where bak.fiscalyear = 2015


select * from tblsalarymatrixgroup
select * from tblsalarymatrix where stepcolumn = '14 days - yr 7'

select * from tblsalarymatrix where RowNumber = 8 and 	Step = 'VH' and mxGroup = 7


select 
cd45.compdetailsid,
	cd45.salarymatrixid,
	t33.newSalMatId
from tblcompdetails cd45
inner join #tempotable3 t33 on cd45.compdetailsid = t33.compdetailsid 


update tblcompdetails
	Set salarymatrixid = t33.newSalMatId
from tblcompdetails cd45
inner join #tempotable3 t33 on cd45.compdetailsid = t33.compdetailsid 


select * from #tempotable3



--------------------


-- duplicated names

select * from tblemployee 

------------

UPDATE tblemployee
SET 
	dob = extn.dob,
	gender = extn.gender,
	lname = extn.lname,
	fname = extn.fname,
	mi = extn.mi,
	fullname = extn.fullname,
	nickname = extn.nickname,
	previouslastname = extn.previouslastname,
	certretireid = extn.certretireid,
	classretireid = extn.classretireid,
	retirementaccountid = extn.retirementaccountid,
	retirementnote = extn.retirementnote,
	certretirenum = extn.certretirenum,
	classretirenum = extn.classretirenum,
	certretireplandate = extn.certretireplandate,
	certretireplandate2 = extn.certretireplandate2,
	certqualification = extn.certqualification,
	classretireplandate = extn.classretireplandate,
	classretireplandate2 = extn.classretireplandate2,
	classqualification = extn.classqualification,
	certretirementdate = extn.certretirementdate,
	classretirementdate = extn.classretirementdate,
	payrollgroupid = extn.payrollgroupid
FROM dsscexternal..tblemployee extn
INNER JOIN tblemployee orig ON orig.socsecno = extn.socsecno
WHERE extn.socsecno = orig.socsecno

-----------------------

select * from tblemployee 


------------------


UPDATE tblemployee
SET 
	dob = extn.dob,
	gender = extn.gender,
	lname = extn.lname,
	fname = extn.fname,
	mi = extn.mi,
	fullname = extn.fullname,
	nickname = extn.nickname,
	previouslastname = extn.previouslastname,
	certretireid = extn.certretireid,
	classretireid = extn.classretireid,
	retirementaccountid = extn.retirementaccountid,
	retirementnote = extn.retirementnote,
	certretirenum = extn.certretirenum,
	classretirenum = extn.classretirenum,
	certretireplandate = extn.certretireplandate,
	certretireplandate2 = extn.certretireplandate2,
	certqualification = extn.certqualification,
	classretireplandate = extn.classretireplandate,
	classretireplandate2 = extn.classretireplandate2,
	classqualification = extn.classqualification,
	certretirementdate = extn.certretirementdate,
	classretirementdate = extn.classretirementdate,
	payrollgroupid = extn.payrollgroupid
FROM DSSCExternal..tblemployee extn
INNER JOIN tblemployee orig ON orig.socsecno = extn.socsecno
WHERE extn.socsecno = orig.socsecno and orig.employeeid in (select employeeid from tblemployee where lName = 'rice' and fname = 'jordan')


------------------------------------------------------------------


select live.employeeid,live.fullname from DSSCBonnyDoon2..tblemployee bkup
inner join DSSCBonnyDoon..tblemployee live on (bkup.employeeid=live.employeeid)
where 
	bkup.certretireid <> live.certretireid or
	bkup.classretireid <> live.classretireid or
	bkup.retirementaccountid <> live.retirementaccountid or
	bkup.retirementnote <> live.retirementnote or
	bkup.certretirenum <> live.certretirenum or
	bkup.classretirenum <> live.classretirenum or
	bkup.certretireplandate <> live.certretireplandate or
	bkup.certretireplandate2 <> live.certretireplandate2 or
	bkup.certqualification <> live.certqualification or
	bkup.classretireplandate <> live.classretireplandate or
	bkup.classretireplandate2 <> live.classretireplandate2 or
	bkup.classqualification <> live.classqualification or
	bkup.certretirementdate <> live.certretirementdate or
	bkup.classretirementdate <> live.classretirementdate or
	bkup.payrollgroupid <> live.payrollgroupid or
	bkup.dob <> live.dob or
	bkup.gender <> live.gender or
	bkup.lname <> live.lname or
	bkup.fname <> live.fname or
	bkup.mi <> live.mi or
	bkup.fullname <> live.fullname or
	bkup.nickname <> live.nickname or
	bkup.previouslastname <> live.previouslastname




update live 
	set
		live.certretireid = bkup.certretireid,
		live.classretireid = bkup.classretireid,
		live.retirementaccountid = bkup.retirementaccountid,
		live.retirementnote = bkup.retirementnote,
		live.certretirenum = bkup.certretirenum,
		live.classretirenum = bkup.classretirenum,
		live.certretireplandate = bkup.certretireplandate,
		live.certretireplandate2 = bkup.certretireplandate2,
		live.certqualification = bkup.certqualification,
		live.classretireplandate = bkup.classretireplandate,
		live.classretireplandate2 = bkup.classretireplandate2,
		live.classqualification = bkup.classqualification,
		live.certretirementdate = bkup.certretirementdate,
		live.classretirementdate = bkup.classretirementdate,
		live.payrollgroupid = bkup.payrollgroupid,
		live.dob = bkup.dob,
		live.gender = bkup.gender,
		live.lname = bkup.lname,
		live.fname = bkup.fname,
		live.mi = bkup.mi,
		live.fullname = bkup.fullname,
		live.nickname = bkup.nickname,
		live.previouslastname = bkup.previouslastname
from DSSCBonnyDoon2..tblemployee bkup inner join DSSCBonnyDoon..tblemployee live on (bkup.employeeid=live.employeeid)
where 
	bkup.certretireid <> live.certretireid or
	bkup.classretireid <> live.classretireid or
	bkup.retirementaccountid <> live.retirementaccountid or
	bkup.retirementnote <> live.retirementnote or
	bkup.certretirenum <> live.certretirenum or
	bkup.classretirenum <> live.classretirenum or
	bkup.certretireplandate <> live.certretireplandate or
	bkup.certretireplandate2 <> live.certretireplandate2 or
	bkup.certqualification <> live.certqualification or
	bkup.classretireplandate <> live.classretireplandate or
	bkup.classretireplandate2 <> live.classretireplandate2 or
	bkup.classqualification <> live.classqualification or
	bkup.certretirementdate <> live.certretirementdate or
	bkup.classretirementdate <> live.classretirementdate or
	bkup.payrollgroupid <> live.payrollgroupid or
	bkup.dob <> live.dob or
	bkup.gender <> live.gender or
	bkup.lname <> live.lname or
	bkup.fname <> live.fname or
	bkup.mi <> live.mi or
	bkup.fullname <> live.fullname or
	bkup.nickname <> live.nickname or
	bkup.previouslastname <> live.previouslastname


----------- get tables

SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME like '%report%'


select name from master.dbo.sysdatabases where (name not like 'DS[_]%' and name not like '%demo%' and name not like 'm%' and name not like '%temp%' and name not like '%2')



---------------------------



CREATE procedure #updatedatabase
@dbname VARCHAR(100)
AS
 DECLARE @sql VARCHAR(2000)

 SET @sql = N'USE ' + @dbname + '
-- Your SQL goes between these lines. Don''t forget to double up your single quotes! --
delete ar
from authorizationrequest ar
  left join PO  on po.authorizationid = ar.id               AND ar.AuthorizationRequestTypeId = 5 
  left join PCA on pca.authid = ar.id                       AND ar.AuthorizationRequestTypeId = 6 
  left join WASBAuthorizationDetail wa on wa.authid = ar.id AND ar.AuthorizationRequestTypeId in (7,8)
where po.id is null and pca.id is null and wa.id is null
GO
CREATE UNIQUE INDEX AuthorizationRequest_UK ON authorizationrequest (AuthorizationRequestTypeId, AuthorizationRequestTypePk);
---------------------------------------------------------------------------------------
 '
 EXECUTE (@sql)
GO

Use master
--This will affect all DS* dbs on aws servers
--DECLARE dbnamecursor CURSOR FOR select name from sys.databases where database_id > 4 and (name like 'ds[^_]%' OR name = 'DS_Template')

-- This will affect all DS dbs on legacy servers. If you need to manually exclude some districts, you can check for the db name explicitly (see commented example below).
--DECLARE dbnamecursor CURSOR FOR select name from sysdatabases where dbid > 4 and (name like 'ds[^_]%' OR name = 'DS_Template') and name not in('dssandbox2','dssandbox4','dssandbox6')
--DECLARE dbnamecursor CURSOR FOR select name from sysdatabases where dbid > 4 and (name like 'ds[^_]%' OR name = 'DS_Template')

-- This uses DS_Admin..Admin_Districts to find all the dbs on the server (the system tables are exposed through sys. or sys, depending on the SQLServer version.Â  The two 
-- statements below are equivalent, just use the one that works.
DECLARE dbnamecursor CURSOR FOR select databasename from ds_admin..admin_districts where coalesce(releaseto, 0) != 0 and coalesce(disabledistrict, 0) != 1 and databasename in (select name from sys.databases where database_id > 4)
--DECLARE dbnamecursor CURSOR FOR select databasename from ds_admin..admin_districts where coalesce(releaseto, 0) != 0 and coalesce(disabledistrict, 0) != 1 and databasename in (select name from sysdatabases where dbid > 4)

DECLARE @name NVARCHAR(200)
DECLARE @msg VARCHAR(8000)
DECLARE @ecode INT

SET NOCOUNT ON
OPEN dbnamecursor
FETCH NEXT FROM dbnamecursor INTO @name
WHILE @@FETCH_STATUS = 0 
BEGIN
 select 'Updating ' + @name
 EXECUTE #updatedatabase @name;
 FETCH NEXT FROM dbnamecursor INTO @name
END
CLOSE dbnamecursor
DEALLOCATE dbnamecursor
PRINT @msg
SET NOCOUNT OFF
GO
DROP PROCEDURE #updatedatabasiS


------------------------

WIP - 5911


select * from tblpositioncontroldetails

select 
 cv.extra,
 cv.extra2,
 cv.extra3,
 cv.extra4,
 cv.extra5,
 cv.extra6,
 cv.extra7,
 cv.extra8,
 cv.extra9,
 cv.extra10,
 cv.extra11
from convfullname cv
inner join tblpositioncontroldetails pos on cv.Extra = pos.PositionControlID and cv.extra3 = pos.employeeid

insert into tblpositioncontroldetails(
	positioncontrolid,
	SlotNum,
	EmployeeID,
	FiscalYear,
	pcFiscalAcc,
	pcJobTitleID,
	SiteID,
	PayrollSiteID,
	StatusID,
	MaxHours,
	FTE,
	Mon,
	Tue,
	Wed,
	Thu,
	Fri,
	Sat,
	Sun,
	Schedule,
	TPL,
	pcWATitleID,
	Comments,
	CalcPayByHours,
	IsSixthPeriodOption,
	pcSlotCalendarID,
	AvailableForSub,
	VacantDescription,
	PopulateCalendar,
	AuthBy,
	AuthCode,
	AuthDate,
	SalaryIncrementDate,
	SalaryIncrementMatrixID,
	EffectiveDate,
	ProjectedInactiveDate,
	InactiveDate,
	refPositionControlID,
	DCreated,
	OldId,
	trgClassificationId,
	trgDistrictId,
	COECode,
	SupervisorEmployeeID,
	CreateTimeSheet,
	CreatedBy
)
select 
	--(select Max(positioncontrolid)+1 from tblpositioncontroldetails),
	pos.SlotNum,
	pos.EmployeeID,
	pos.FiscalYear,
	pos.pcFiscalAcc,
	pos.pcJobTitleID,
	pos.SiteID,
	pos.PayrollSiteID,
	pos.StatusID,
	pos.MaxHours,
	pos.FTE,
	pos.Mon,
	pos.Tue,
	pos.Wed,
	pos.Thu,
	pos.Fri,
	pos.Sat,
	pos.Sun,
	pos.Schedule,
	pos.TPL,
	pos.pcWATitleID,
	'ds admin import - 8/10/16',
	pos.CalcPayByHours,
	pos.IsSixthPeriodOption,
	pos.pcSlotCalendarID,
	pos.AvailableForSub,
	pos.VacantDescription,
	pos.PopulateCalendar,
	pos.AuthBy,
	pos.AuthCode,
	pos.AuthDate,
	pos.SalaryIncrementDate,
	pos.SalaryIncrementMatrixID,
	pos.EffectiveDate,
	pos.ProjectedInactiveDate,
	pos.InactiveDate,
	cv.extra,
	'8/10/16',
	pos.OldId,
	pos.trgClassificationId,
	pos.trgDistrictId,
	pos.COECode,
	pos.SupervisorEmployeeID,
	pos.CreateTimeSheet,
	-1
from tblpositioncontroldetails pos
inner join convfullname cv on cv.Extra = pos.PositionControlID and cv.extra3 = pos.employeeid



---------------------------------------------------------------------------------------------------------------

/* ---------------------------------------------------------------------------------------------------------------------------------------

	This code is created to loop through every districts to get users who has DS 0 and has either a 2X username or login to the
	old webiste to authorize requests.

--------------------------------------------------------------------------------------------------------------------------------------- */

CREATE TABLE #tmpDatabases
(
 ID INT IDENTITY(1, 1) primary key ,
 Name NVARCHAR(100),
);

-- fill it in with the dbNames
-- avoiding global and system related dbs
insert into #tmpDatabases (Name)
select Name from master.dbo.sysdatabases where Name not in (
	 'DS_Admin',
	 'DS_Global',
	 'DS_netdb',
	 'DS_Support',
	 'DS_Template', 
	 'DS_Log',
	 'DS_Log_Archive',
	 'DSCOE-XDemo',
	 'msdb2000',
	 'DSSCPajaro_jun29',
	 'DSCODistrictDemo1',
	 'DSCODistrictDemo2',
	 'DSCOEDemo'
 ) and Name like 'DS%'


--select * from #tmpDatabases
------------------------------------------------------------------------------------------------------------------------------------------
-- begin the check process


-- Declare SQLString as nvarchar(4000) 
-- for instances where we are connecting to a SQL Server 2000 instance, 
-- we cannot use varchar(max) because this is a feature 
-- introduced on SQL Server 2005


Declare @SQLString as nvarchar(4000)
Declare @DS as nvarchar(100)
Declare @DistrictCount int
Declare @Looper int



Set @Looper = 1

-- get the number of sites
select @DistrictCount = COUNT(*) from #tmpDatabases;

-- crawl process
-- this part is where SQL is made to crawl the 
-- different sites base on the entries
-- of #tmpDatabases
WHILE (@looper <= @DistrictCount)
	BEGIN

	 -- only do the check if tblSecurityGroup exist
	 -- could be redundant since we are already 
	 -- screening out non district replated dbs
		 if (EXISTS (select * 
		 from INFORMATION_SCHEMA.TABLES 
		 WHERE TABLE_NAME = 'tblSecurityGroup'))
		 BEGIN
		 -- process each district
		 select @DS = name from #tmpDatabases where ID = @looper

		 -- the whole SQL string should be in one block
		 -- otherwise the variables will be out of scope

		 -- get the district name, security settings 
		 Set @SQLString = 'select
								di.DistrictID,
								di.DistrictTitle,
								si.SiteID,
								si.SiteCode,
								si.SiteName
							from tblSite si
							inner join '+@DS+'..tblDistrict di on si.DistrictID = di.DistrictID
							order by SiteID asc;

		 -- run our string as an SQL
		 EXECUTE sp_executesql @SQLString
		 END
		 SET @looper = @looper + 1
END

--select * from tblusers


-- whack the temps
truncate table #tmpDatabases
drop table #tmpDatabases

-- EOF

------------------------------------------------------------------------------------------------------





select 
	SalaryMatrixID,
	smCompTypeID,
	mxGroup,
	SeriesID,
	Value,
	StepColumn,
	ColNumber,
	Col,
	RowNumber,
	Step 
from tblSalaryMatrix where smCompTypeid = 34
and seriesID in (6,7)
and mxgroup = 15
order by seriesid asc,
		ColNumber asc,
		RowNumber asc;


-------------------------------------------------------------------------------------------------------
-- The code below was used to move 


SELECT *
FROM convFullName

-- Whack ConvFullName
TRUNCATE TABLE convfullname;

/*

Definition
----------

FullName = Fullname
Classification = extra
SlotNum = extra2
JobTitle = extra3
SalaryMatrixGroup = extra4
SalaryMatrixSeries = extra5
SalaryMatrixValue =  extra 6
SalaryPlacement = extra7


*/
-- get the employeeid using the fullname
UPDATE convFullName
SET EmployeeID = te.EmployeeID
FROM convFullName cv
INNER JOIN tblEmployee te ON cv.Fullname = te.Fullname

------------------------------------
-- get seriesID
-- extra8 = seriesID
UPDATE convFullName
SET extra8 = (
  SELECT mxSeriesID
  FROM tblSalaryMatrixSeries
  WHERE series = 'H'
  )

------------------------------------
-- get the groupID
-- extra9 = oldGroupID
UPDATE convFullName
SET extra9 = (
  SELECT SalaryMatrixGroupID
  FROM tblSalaryMatrixGroup
  WHERE groupName = 'CLNPER'
  )

-- extra10 = newGroupID
UPDATE convFullName
SET extra10 = (
  SELECT SalaryMatrixGroupID
  FROM tblSalaryMatrixGroup
  WHERE groupName = 'CLPERS'
  )

------------------------------------
-- get old and new salary matrix id
SELECT DISTINCT cv.employeeid
 ,cv.fullname
 ,ct.compType
 ,cd.salaryMatrixID
 ,sm.stepcolumn
 ,sm.Value
 ,(
  SELECT newSM1.salaryMatrixID
  FROM tblSalaryMatrix newSM1
  WHERE newSM1.stepcolumn = sm.stepcolumn
	  AND newSM1.SeriesID = (
	SELECT DISTINCT extra8
	FROM convfullname
	)
	  AND newSM1.mxGroup = (
	SELECT DISTINCT extra10
	FROM convfullname
	)
  ) AS newSalMat
 ,(
  SELECT newSM2.stepcolumn
  FROM tblSalaryMatrix newSM2
  WHERE newSM2.stepcolumn = sm.stepcolumn
	  AND newSM2.SeriesID = (
	SELECT DISTINCT extra8
	FROM convfullname
	)
	  AND newSM2.mxGroup = (
	SELECT DISTINCT extra10
	FROM convfullname
	)
  ) AS newStepCol
 ,(
  SELECT newSM3.Value
  FROM tblSalaryMatrix newSM3
  WHERE newSM3.stepcolumn = sm.stepcolumn
	  AND newSM3.SeriesID = (
	SELECT DISTINCT extra8
	FROM convfullname
	)
	  AND newSM3.mxGroup = (
	SELECT DISTINCT extra10
	FROM convfullname
	)
  ) AS newVal
FROM convFullName cv
INNER JOIN tblCompDetails cd ON cv.employeeid = cd.employeeid
 AND cd.fiscalyear = 2016
 AND (cd.inactivedate IS NULL)
INNER JOIN tblCompType ct ON cd.compTypeID = ct.CompTypeID
INNER JOIN tblSalaryMatrix sm ON cd.salaryMatrixID = sm.salaryMatrixID
 AND sm.seriesid = (
  SELECT DISTINCT extra8
  FROM convfullname
  )
 AND sm.mxGroup = (
  SELECT DISTINCT extra9
  FROM convfullname
  )
 AND sm.stepcolumn = cv.extra7
INNER JOIN tblpositioncontroldetails pc ON cv.extra2 = pc.slotnum
 AND pc.inactivedate IS NULL
WHERE cv.fullname = 'Aceves Gagne, Marina A'

---------------------------------------
-- get old and new salmatID
-- extra11 = oldsalmatid
-- extra12 = newsalmatid
UPDATE convFullname
SET extra11 = cd.salaryMatrixID
 ,-- old salarymatrixID
 -- new salary matrixID code below
 extra12 = (
  SELECT newSM1.salaryMatrixID
  FROM tblSalaryMatrix newSM1
  WHERE newSM1.stepcolumn = sm.stepcolumn
	  AND newSM1.SeriesID = (
	SELECT DISTINCT extra8
	FROM convfullname
	)
	  AND newSM1.mxGroup = (
	SELECT DISTINCT extra10
	FROM convfullname
	)
  )
-- end of new salary matrixID code
FROM convFullName cv
INNER JOIN tblCompDetails cd ON cv.employeeid = cd.employeeid
 AND cd.fiscalyear = 2016
 AND (cd.inactivedate IS NULL)
INNER JOIN tblCompType ct ON cd.compTypeID = ct.CompTypeID
INNER JOIN tblSalaryMatrix sm ON cd.salaryMatrixID = sm.salaryMatrixID
 AND sm.seriesid = (
  SELECT DISTINCT extra8
  FROM convfullname
  )
 AND sm.mxGroup = (
  SELECT DISTINCT extra9
  FROM convfullname
  )
 AND sm.stepcolumn = cv.extra7
INNER JOIN tblpositioncontroldetails pc ON cv.extra2 = pc.slotnum
 AND pc.inactivedate IS NULL

-- WHERE cv.fullname = 'Aceves Gagne, Marina A'
-- verify
SELECT employeeid
 ,fullname
 ,extra11
 ,extra12
FROM convfullname

--WHERE fullname = 'Aceves Gagne, Marina A'
------------------------------------
-- locate Nulls
SELECT *
FROM convfullname
WHERE (
  extra11 IS NULL
  OR extra12 IS NULL
  )

-- isolate
SELECT cv.employeeid
 ,cv.fullname
 ,cv.extra7
 ,(
  SELECT salarymatrixID
  FROM tblSalaryMatrix
  WHERE stepcolumn = cv.extra7
	  AND seriesid = 8
	  AND mxgroup = 2
  )
 ,(
  SELECT salarymatrixID
  FROM tblSalaryMatrix
  WHERE stepcolumn = cv.extra7
	  AND seriesid = 8
	  AND mxgroup = 4
  )
FROM convfullname cv
WHERE (
  extra11 IS NULL
  OR extra12 IS NULL
  ) -

UPDATE

UPDATE convfullname
SET extra11 = (
  SELECT salarymatrixID
  FROM tblSalaryMatrix
  WHERE stepcolumn = cv.extra7
	  AND seriesid = 8
	  AND mxgroup = 2
  )
 ,extra12 = (
  SELECT salarymatrixID
  FROM tblSalaryMatrix
  WHERE stepcolumn = cv.extra7
	  AND seriesid = 8
	  AND mxgroup = 4
  )
FROM convfullname cv
WHERE (
  extra11 IS NULL
  OR extra12 IS NULL
  )

-- flip to the new group
UPDATE tblCompDetails
SET salaryMatrixID = cv.extra12
FROM tblCompDetails cd
INNER JOIN convFullname cv ON cd.employeeid = cv.employeeid
 AND cv.extra11 = cd.salaryMatrixID
WHERE cd.fiscalyear = 2016
 AND cd.inactivedate IS NULL

-- verify

-- eof






TRUNCATE TABLE convfullname

SELECT *
FROM convfullname

/*
	Extra = Plan Name
	Extra2 = Policy name
	Extra3 = Policy cost
	Extra4 = Dist cost
	Extra5 = Employee cost
	
	Extra6 = planid
	Extra7 = policyid
	
*/

-- locate the plan ids
SELECT cv.extra
	,dplan.deductionplan
	,dplan.id
FROM convfullname cv
INNER JOIN pyDeductionPlan dplan ON cv.Extra = dplan.deductionplan

-- update extra6 = planid
Update convFullname
	Set Extra6 = dplan.id
FROM convfullname cv
INNER JOIN pyDeductionPlan dplan ON cv.Extra = dplan.deductionplan


-- locate the policy ids
SELECT cv.extra2
	,cv.extra6
	,dpol.pyDeductionPlanId
	,dpol.Policy
	,dpol.id
FROM convfullname cv
LEFT JOIN pyDeductionPolicy dpol ON cv.extra2 = dpol.policy
	AND cv.extra6 = dpol.pyDeductionPlanId

UPDATE convfullname
SET Extra7 = dpol.id
FROM convfullname cv
LEFT JOIN pyDeductionPolicy dpol ON cv.extra2 = dpol.policy
	AND cv.extra6 = dpol.pyDeductionPlanId
	
	
	
-- pyDeductionTemplate
SELECT pded.employeeid
	,pded.effectivePayrollID
	,pded.InactivePayrollID
	,pded.pyDeductionPlanID
	,cv.Extra6
	,pded.pyDeductionPolicyID
	,cv.extra7
	,pded.Amount
	,cv.extra3
	,pded.DistrictAmount
	,cv.extra4
FROM pyDeductionTemplate pded
INNER JOIN convFullname cv ON pded.pyDeductionPlanID = cv.extra6
	AND pded.pyDeductionPolicyID = cv.extra7
	AND pded.inactivepayrollid IS NULL
	AND (pded.effectivepayrollid != 1026 or pded.effectivepayrollid is Null)

-- inactivate old
Update pyDeductionTemplate
	Set inActivePayrollID = 1016,
		Note = 'DS Admin - ZD 6711'
FROM pyDeductionTemplate pded
INNER JOIN convFullname cv ON pded.pyDeductionPlanID = cv.extra6
	AND pded.pyDeductionPolicyID = cv.extra7
	AND pded.inactivepayrollid IS NULL
	AND (pded.effectivepayrollid != 1026 or pded.effectivepayrollid is Null)






select * from pyDeductionTemplate

select * from tblPayroll where payperiod = 'sept 2016' -- 1026
select * from tblPayroll where payperiod = 'Aug 2016' -- 1016

select Employeeid, fullname  from tblEmployee where employeeid = 3886


-----------------------------'



select
	Strs.PayrollId,
	Strs.EmployeeId,
	Strs.FiscalYear,
	Strs.SSN,
	Strs.LastName,
	Strs.FirstName,
	Strs.MiddleInitial,
	Strs.AssignmentCode as OldAssignmentCode,
	(Case
		When Strs.PayRate = 43552.80 and Strs.AssignmentCode = 55 Then 54
		Else
			Strs.AssignmentCode
	END
	) as newAssignmentCode,
	Strs.MemberCode,
	Strs.PayRate as OldPayRate,
	(Case
		When Strs.PayRate = 43552.80 and Strs.AssignmentCode = 55 Then 44026.20
		When Strs.PayRate = 43552.80 and Strs.AssignmentCode = 57 Then 44026.20
		Else
			Strs.PayRate
	END
	) as newPayRate
from STRSPayrollContrib Strs
where 
	Strs.PayrollId = 1016
	and Strs.PayRate = 43552.80
	

-------------------WIP


/*Declare @appMgr int

Set @appMgr = (select SecurityGroup from tblUsers tu where IsPrimaryContact = 1)

-- flip UnrestrictedPCAMgrView if set as 0
update tblSecurityGroup set UnrestrictedPCAMgrView = 1 where SecurityGroupNum in (1000, 2000, @appMgr) and UnrestrictedPCAMgrView = 0 

-- verify
select 
	di.DistrictTitle,
	di.DistrictAbbrev,
	sg.SecurityGroupNum,
	sg.GroupName,
	sg.UnrestrictedPCAMgrView
from tblSecurityGroup sg
left join tblDistrict di on sg.DistrictID = di.DistrictID
where sg.SecurityGroupNum in (1000, 2000, @appMgr)*/

CREATE TABLE #tmpDatabases (
 ID INT IDENTITY(1, 1) PRIMARY KEY
 ,NAME NVARCHAR(100)
 ,
 );

-- fill it in with the dbNames
-- avoiding global and system related dbs
INSERT INTO #tmpDatabases (NAME)
SELECT NAME
FROM master.dbo.sysdatabases
WHERE NAME NOT IN (
  'DS_Admin'
  ,'DS_Global'
  ,'DS_netdb'
  ,'DS_Support'
  ,'DS_Template'
  ,'DS_Log'
  ,'DS_Log_Archive'
  ,'DSCOE-XDemo'
  ,'msdb2000'
  ,'DSSCPajaro_jun29'
  ,'DSCODistrictDemo1'
  ,'DSCODistrictDemo2'
  ,'DSCOEDemo'
  ,'DSCarlsbad810'
  ,'DSCarlsbad820'
  ,'DSCarlsbad831'
  ,'DSNCNVUSD625'
  ,'DSNCNVUSD715'
  ,'DSNCNVUSD922'
  ,'DSNCNVUSDnoon'
  ,'DSSalinasUnion2pm'
  ,'DSACOE'
  ,'DSAntelopeValley'
  ,'DSBurbank'
  ,'DSCeres'
  ,'DSHart'
  ,'DSJefferson'
  ,'DSLancaster'
  ,'DSMonterey'
  ,'DSSMHigh'
  ,'DSTurlock'
  ,'DSSunnyvale'
  ,'DSCarlsbad1013'
  ,'DSNCNVUSD922'
  ,'NetwrixSQLCRAudit'
  ,'DSStaff'
  ,'DSCarlsbad1013'
  ,'DSSanDieguito1010'
  )
 AND NAME LIKE 'DS%'

--select * from #tmpDatabases
-- drop table #tmpDatabases


------------------------------------------------------------------------------------------------------------------------------------------
-- begin the check process
-- Declare SQLString as nvarchar(4000) 
-- for instances where we are connecting to a SQL Server 2000 instance, 
-- we cannot use varchar(max) because this is a feature 
-- introduced on SQL Server 2005
DECLARE @SQLString AS NVARCHAR(4000)
DECLARE @DS AS NVARCHAR(100)
DECLARE @DistrictCount INT
DECLARE @Looper INT

SET @Looper = 1

-- get the number of sites
SELECT @DistrictCount = COUNT(*)
FROM #tmpDatabases;

-- crawl process
-- this part is where SQL is made to crawl the 
-- different sites base on the entries
-- of #tmpDatabases
WHILE (@looper <= @DistrictCount)
BEGIN
 -- only do the check if tblSecurityGroup exist
 -- could be redundant since we are already 
 -- screening out non district replated dbs
 IF (
	  EXISTS (
	SELECT *
	FROM INFORMATION_SCHEMA.TABLES
	WHERE TABLE_NAME = 'tblSecurityGroup'
	)
	  )
 BEGIN
  -- process each district
  SELECT @DS = NAME
  FROM #tmpDatabases
  WHERE ID = @looper

  -- the whole SQL string should be in one block
  -- otherwise the variables will be out of scope
  -- get the district name, security settings 
  SET @SQLString = '
					
					update ' + @DS + '..tblSecurityGroup set UnrestrictedPCAMgrView = 1 where (SecurityGroupNum in (select SecurityGroup from tblUsers tu where IsPrimaryContact = 1) or SecurityGroupNum in (1000, 2000)) and (UnrestrictedPCAMgrView != 1 or UnrestrictedPCAMgrView is NULL)


					select 
						di.DistrictId,
						di.DistrictTitle,
						di.DistrictAbbrev,
						sg.SecurityGroupNum,
						sg.GroupName,
						te.FullName,
						sg.UnrestrictedPCAMgrView,
						tu.IsPrimaryContact as AppManager,
						tu.IsKeyContact as TierOne
					from ' + @DS + '..tblSecurityGroup sg
					left join ' + @DS + '..tblUsers tu on sg.SecurityGroupNum = tu.SecurityGroup and tu.inactiveDate is NULL
					left join ' + @DS + '..tblDistrict di on tu.DistrictID = di.DistrictID
					left join ' + @DS + '..tblEmployee te on tu.EmployeeId = te.EmployeeId and te.terminateDate is NULL
					where (sg.SecurityGroupNum in (select SecurityGroup from ' + @DS + '..tblUsers tu where IsPrimaryContact = 1) or sg.SecurityGroupNum in (1000, 2000)) and tu.DistrictID is NOT NULL;';

  -- run our string as an SQL
  EXECUTE sp_executesql @SQLString
 END

 SET @looper = @looper + 1
END



---------------


oregon
14,23,29,34,57,62,104,109,139,134,170,174

--------------------------------



BEGIN

declare @SearchStr nvarchar(100)

SET @SearchStr = '('

CREATE TABLE #Results (ColumnName nvarchar(370), ColumnValue nvarchar(3630))

SET NOCOUNT ON

DECLARE @TableName nvarchar(256), @ColumnName nvarchar(128), @SearchStr2 nvarchar(110)
SET  @TableName = ''
SET @SearchStr2 = QUOTENAME('%' + @SearchStr + '%','''')


WHILE (@TableName IS NOT NULL OR @TableName not LIKE '%PY%' OR @TableName not LIKE '%TBLTIME%' OR @TableName not LIKE '%AUTH%' OR @TableName not LIKE '%aca%' OR @TableName not LIKE 'po%' OR @TableName not LIKE 'PCA%' OR @TableName not LIKE '%WORKA%' OR @TableName not LIKE '%WAS%')
BEGIN
	SET @ColumnName = ''
	SET @TableName = 
	(
		SELECT MIN(QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME))
		FROM    INFORMATION_SCHEMA.TABLES
		WHERE       TABLE_TYPE = 'BASE TABLE'
			AND QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME) > @TableName
			AND OBJECTPROPERTY(
					OBJECT_ID(
						QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME)
						 ), 'IsMSShipped'
						   ) = 0
	)

	WHILE (@TableName IS NOT NULL OR @TableName not LIKE '%PY%' OR @TableName not LIKE '%TBLTIME%' OR @TableName not LIKE '%AUTH%' OR @TableName not LIKE '%aca%' OR @TableName not LIKE 'po%' OR @TableName not LIKE 'PCA%' OR @TableName not LIKE '%WORKA%' OR @TableName not LIKE '%WAS%' OR @TableName not LIKE '%adm%' ) AND (@ColumnName IS NOT NULL)
	BEGIN
		SET @ColumnName =
		(
			SELECT MIN(QUOTENAME(COLUMN_NAME))
			FROM    INFORMATION_SCHEMA.COLUMNS
			WHERE       TABLE_SCHEMA    = PARSENAME(@TableName, 2)
				AND TABLE_NAME  = PARSENAME(@TableName, 1)                  
				AND QUOTENAME(COLUMN_NAME) > @ColumnName
		)

		IF @ColumnName IS NOT NULL
		BEGIN
			INSERT INTO #Results
			EXEC
			(
				'SELECT DISTINCT''' + @TableName + '.' + @ColumnName + ''', LEFT(CONVERT(varchar(max), ' + @ColumnName + '), 3630) 
				FROM ' + @TableName + ' (NOLOCK) ' +
				' WHERE CONVERT(varchar(max), ' + @ColumnName + ') LIKE ' + @SearchStr2 
			)
		END
	END 
END

SELECT ColumnName, ColumnValue FROM #Results
END


-----------------

SELECT 
	DistrictAbbrev,
	DistrictTitle
FROM tblDistrict
SELECT 
	CL.ClassDescription,
	POS.PositionControlID,
	FUND.fPositionControlID,
	POS.SLOTNUM,
	JOBS.JobTitle,
	FUND.fsAccountID
FROM tblPositionControlDetails POS
LEFT JOIN tblFundingSlotDetails FUND ON POS.PositionControlID = FUND.fPositionControlID
INNER JOIN tblClassifications CL ON POS.trgClassificationId = CL.ClassificationID
INNER JOIN tblJobTitles JOBS ON POS.pcJobTitleID = JOBS.JobTitleID
WHERE 
	FUND.fPositionControlID IS NULL
	AND JOBS.JobTitle LIKE '%AB 1522%' AND CL.ClassDescription NOT LIKE  'AB%'




---------------------
POP Test
---------------------


--POP testing
/*
Works with spreadsheet named "POP Phase 1 Testing" and utilizing the UI to run through the motions
*/
/*
This is only needed if there is for some reason no access to the screens in the UI
*/
SELECT *
FROM tblSecurityGroup
WHERE SecurityGroupNum >= 100

UPDATE tblSecurityGroup
SET PayrollAdminView = 1,
	PayrollAdminEdit = 1
WHERE SecurityGroupNum >= 100

SELECT *
FROM tblPayroll
WHERE fiscalyear = 2016 --846 = MAR 2017

SELECT *
FROM payrollrun
WHERE payrollid = 846 
	--21 //Scroll down and paste the PayrollRunID throughout the different queries where annotated

/*
Run through Robb's SQL before updating to get current payroll info pasted into excel file then run this SQL
In the UI assign the default Profile to the payroll run selected after you turn the setting on then generate and run through 
Robb's SQL again and paste the new results in the spreadsheet and the formulas in the spreadsheet will give you an easy 
look at the variances.
*/
SELECT *
FROM tblDistrictSetting
WHERE [name] LIKE 'PayrollOptimizationPhase'

UPDATE tblDistrictSetting
SET Setting = 1
WHERE [Name] = 'PayrollOptimizationPhase'

/*
This returns total payroll amounts for the payrollrun you are analyzing  

*****Excel #2 cell E2 for old total and M2 for POP total******
note: this total will most likely match the total from the amounts in Rene's SQL.
*/
SELECT sum(amount)
FROM PyCompensation
WHERE payrollrunid = 21 --PayrollRunID

/*
--Inactive Comp Query from Rene // Excel #1  
*/
SELECT pcd.PositionControlID,
	PR.Description,
	PR.StartDate,
	PR.EndDate,
	E.LastName,
	e.FirstName,
	pcd.SlotNum,
	c.Description,
	c.Amount,
	pcd.InactiveDate AS PositionInactiveDate,
	cd.InactiveDate AS CompInactiveDate,
	SD.LastPayrollID,
	SD.ProjLastPayrollID
FROM PyCompensation C
INNER JOIN tblCompDetails CD
	ON CD.CompDetailsID = c.Referencekey
		AND c.ReferenceSource = 10
LEFT JOIN tblSalaryAdjustment SD
	ON SD.CompDetailsID = CD.CompDetailsID
INNER JOIN tblPositionControlDetails PCD
	ON PCD.PositionControlID = cd.cdPositionControlID
INNER JOIN PayrollRun PR
	ON PR.id = C.PayrollRunId
INNER JOIN PyEmployee e
	ON e.id = c.PyEmployeeId
WHERE c.PayrollRunId = 21 --PayrollRunID
	AND (
		ISNULL(CD.InactiveDate, PR.StartDate) < PR.StartDate
		OR ISNULL(PCD.InactiveDate, PR.StartDate) < PR.StartDate
		)
ORDER BY e.LastName

--Robb Timesheets look from here on out
/*
-- verify # of employee Records // Excel #2 - Paste cell A5 on Tab #2 for existing payroll cell and I5 for POP
*/
SELECT pye.ReferenceKey AS EmployeeID,
	pye.LastName,
	pye.FirstName,
	pye.PayrollRunID AS pyEPayrollRunId,
	pyr.id AS PayrollRunID,
	pyr.[Description]
FROM PyEmployee pye
INNER JOIN payrollRun pyr
	ON pye.PayrollRunID = pyr.id
WHERE pye.payrollRUnId = 21 --PayrollRunID

/*
-- Total Units by Employee // Excel #3 - Paste cell A3 for existing payroll cell and F3 for POP
*/
SELECT LastName,
	FirstName,
	tblemployee.employeeid,
	Sum(Units) AS [Total Units]
FROM PYCompensation
INNER JOIN pyEmployee
	ON pyEmployee.id = pyCompensation.pyEmployeeid
INNER JOIN tblemployee
	ON tblemployee.Employeeid = pyEmployee.Referencekey
WHERE pyCompensationTypeid NOT IN (
		3,
		4,
		9,
		300,
		301
		)
	AND pyCompensation.payrollrunid = 21 --PayrollRunID
GROUP BY LastName,
	FirstName,
	tblemployee.employeeid
ORDER BY LastName,
	FirstName

/*
--Total Units by employee and compensation type // Excel #4 - Paste cell A3 for existing payroll cell and I3 for POP
*/
SELECT LastName,
	FirstName,
	pyEmployee.ReferenceKey AS EMPLID,
	PyCompensationTypeId,
	Sum(Units) AS [Total Units]
FROM PYCompensation
INNER JOIN pyEmployee
	ON pyEmployee.id = pyCompensation.pyEmployeeid
INNER JOIN tblemployee
	ON tblemployee.Employeeid = pyEmployee.Referencekey
WHERE pyCompensationTypeid NOT IN (
		3,
		4,
		9,
		300,
		301
		)
	AND pyCompensation.payrollrunid = 21 --PayrollRunID
GROUP BY LastName,
	FirstName,
	pyEmployee.ReferenceKey,
	PyCompensationTypeId
ORDER BY LastName,
	FirstName,
	PyCompensationTypeId

/*
--Total Gross by CompensationType // Excel #5 - Paste cell A3 for existing payroll cell and I3 for POP
*/
SELECT LastName,
	FirstName,
	PyEmployee.ReferenceKey AS EMPLID,
	PyCompensationTypeId,
	Sum(Amount) [Gross]
FROM PYCompensation
INNER JOIN pyEmployee
	ON pyEmployee.id = pyCompensation.pyEmployeeid
INNER JOIN tblemployee
	ON tblemployee.Employeeid = pyEmployee.Referencekey
WHERE pyCompensationTypeid NOT IN (
		3,
		4,
		9,
		300,
		301
		)
	AND pyCompensation.payrollrunid = 21 --PayrollRunID
GROUP BY LastName,
	FirstName,
	pyEmployee.ReferenceKey,
	PyCompensationTypeId
ORDER BY LastName,
	FirstName,
	PyCompensationTypeId

/*
--Total Gross by Funding Source // Excel #6 - Paste cell A4 for existing payroll cell and K4 for POP
*/
SELECT LastName,
	FirstName,
	PyEmployee.ReferenceKey AS EMPLID,
	PyCompensationTypeId AS CompTypeId,
	G.AccountId,
	G.AccountString,
	Sum(PyPositionFunding.Percentage * Pycompensation.Amount) [Gross with Funding]
FROM PyCompensation
INNER JOIN PyPositionFunding
	ON PyPositionFunding.PyPositionId = PyCompensation.PyPositionId
INNER JOIN pyEmployee
	ON pyEmployee.id = pyCompensation.pyEmployeeid
INNER JOIN GeneralLedger G
	ON G.AccountId = PyPositionFunding.AccountId
		AND G.FiscalYearId = 2016
INNER JOIN tblemployee
	ON tblemployee.Employeeid = pyEmployee.Referencekey
WHERE pyCompensationTypeid NOT IN (
		3,
		4,
		9,
		300,
		301
		)
	AND pyCompensation.payrollrunid = 21 --PayrollRunID
GROUP BY LastName,
	FirstName,
	pyEmployee.ReferenceKey,
	PyCompensationTypeId,
	G.AccountId,
	G.AccountString,
	PyPositionFunding.Percentage * Pycompensation.Amount
ORDER BY LastName,
	FirstName,
	PyCompensationTypeId,
	G.AccountId,
	G.AccountString,
	PyPositionFunding.Percentage * Pycompensation.Amount

/*
--Look at single employee --for more granular looks
*/
SELECT LastName,
	FirstName,
	EmplNo AS EMPLID,
	PyCompensationTypeId,
	PyCompensation.FromDate,
	G.AccountId,
	G.AccountString,
	Sum(PyPositionFunding.Percentage * Pycompensation.Amount) [Gross with Funding]
FROM PyCompensation
INNER JOIN PyPositionFunding
	ON PyPositionFunding.PyPositionId = PyCompensation.PyPositionId
INNER JOIN pyEmployee
	ON pyEmployee.id = pyCompensation.pyEmployeeid
INNER JOIN GeneralLedger G
	ON G.AccountId = PyPositionFunding.AccountId
		AND G.FiscalYearId = 2016
INNER JOIN tblemployee
	ON tblemployee.Employeeid = pyEmployee.Referencekey
WHERE pyCompensationTypeid NOT IN (
		3,
		4,
		9,
		300,
		301
		)
	AND pyCompensation.payrollrunid = 29 --PayrollRunID
	AND pyemployeeid = 133910 --pyemployeeID
GROUP BY LastName,
	FirstName,
	EmplNo,
	PyCompensationTypeId,
	PyCompensation.FromDate,
	G.AccountId,
	G.AccountString,
	PyPositionFunding.Percentage * Pycompensation.Amount
ORDER BY LastName,
	FirstName,
	PyCompensationTypeId,
	PyCompensation.FromDate,
	G.AccountId,
	G.AccountString,
	PyPositionFunding.Percentage * Pycompensation.Amount

SELECT *
FROM tblCompDetails
WHERE EmployeeID = 3285

SELECT *
FROM tblEmployee
WHERE LName = 'Arribas'

--------------------

SELECT pcd.EmployeeID,
	te.Fullname,
	pcd.SlotNum,
	tcd.cdPositionControlID AS OLDPCID,
	newpcd.PositionControlID AS NEWPCID
FROM tblCompDetails tcd
INNER JOIN tblPositionControlDetails pcd
	ON tcd.cdPositionControlID = pcd.PositionControlID
		AND pcd.InactiveDate IS NOT NULL
		AND tcd.FiscalYear = 2017
INNER JOIN tblPositionControlDetails newpcd
	ON pcd.SlotNum = newpcd.SlotNum
		AND newpcd.InactiveDate IS NULL
		AND newpcd.refPositionControlID = tcd.cdPositionControlID
		AND newpcd.EmployeeID = tcd.EmployeeID
INNER JOIN tblEmployee te
	ON te.EmployeeID = tcd.EmployeeID

-- FIX
UPDATE tblCompDetails
SET cdPositionControlID = newpcd.PositionControlID
FROM tblCompDetails tcd
INNER JOIN tblPositionControlDetails pcd
	ON tcd.cdPositionControlID = pcd.PositionControlID
		AND pcd.InactiveDate IS NOT NULL
		AND tcd.FiscalYear = 2017
INNER JOIN tblPositionControlDetails newpcd
	ON pcd.SlotNum = newpcd.SlotNum
		AND newpcd.InactiveDate IS NULL
		AND newpcd.refPositionControlID = tcd.cdPositionControlID
		AND newpcd.EmployeeID = tcd.EmployeeID
INNER JOIN tblEmployee te
	ON te.EmployeeID = tcd.EmployeeID



----------------------------------------------



SELECT	
	CD.CompDetailsID,
	CD.EmployeeID,
	TE.Fullname,
	PCD.SlotNum,
	PCD.InactiveDate,
	SM.StepColumn,
	CD.InactiveDate
FROM tblCompDetails CD
INNER JOIN tblPositionControlDetails PCD ON CD.cdPositionControlID = PCD.PositionControlID AND CD.FiscalYear = 2016 AND CD.InactiveDate IS NULL AND PCD.InactiveDate IS NOT NULL
INNER JOIN tblEmployee TE ON CD.EmployeeID = TE.EmployeeID
INNER JOIN tblSalaryMatrix SM ON CD.SalaryMatrixID = SM.SalaryMatrixID


SELECT * FROM tblSalaryAdjustment WHERE CompDetailsID = 27612

UPDATE tblCompDetails SET InactiveDate = '06/30/17' WHERE CompDetailsID = 27612


--------------------------------------
-- REMOVE DUPLICATES



SELECT wadWorkAgreementID,
	wadPayrollID,
	count(*)
FROM tblWorkAgreementDates
GROUP BY wadWorkAgreementID,
	wadPayrollID
HAVING count(*) > 1;


SELECT * FROM tblWorkAgreementDates WHERE wadWorkAgreementID = 175

SELECT *
FROM tblWorkAgreementDates
WHERE WorkAgreementDatesID NOT IN
(
SELECT MIN(WorkAgreementDatesID)
FROM tblWorkAgreementDates
GROUP BY wadWorkAgreementID, wadPayrollID)
AND wadWorkAgreementID = 5020

DELETE
FROM tblWorkAgreementDates
WHERE WorkAgreementDatesID NOT IN
(
SELECT MIN(WorkAgreementDatesID)
FROM tblWorkAgreementDates
GROUP BY wadWorkAgreementID, wadPayrollID)
AND wadWorkAgreementID = 5020

--------------------------------
--10802

select * from PayrollRun
where [Description]like 'Dec 2015 sup%' -- 1056

select * from PayrollRun
where [Description]like 'Jan 2016 sup%' -- 1066

-- Locate the correct PayrollId where the timesheets should be
select
	*
from tblPayroll
	where PayPeriod like 'Dec%'
	and FiscalYear = 2015
	-- 1056
 


Select
	  tsd.timesheetdetailid,
	  t.timesheetid,
	  tsd.tsTimesheetid,
	  T.tsPayroll,
	  T2.timesheetid,
	  T2.tsPayroll,
	  tsd.tsdate as SubDate,
	  AbsentE.FullName as AbsentEmployee,
	  AbsentP.slotNum as AbsentSlot,
	  se.FullName as SubEmployee,
	  ste.SiteName
FROM tbltimesheetsdetails tsd
INNER JOIN tbltimesheetsdetails tsd2 ON tsd.xrefsubtsdetailid = tsd2.timesheetdetailid
INNER JOIN tbltimesheets AbsentT ON AbsentT.timesheetid = tsd2.tstimesheetid
INNER JOIN tblPositioncontroldetails AbsentP ON AbsentP.Positioncontrolid = AbsentT.tsPositioncontrolid
LEFT JOIN tblemployee AbsentE ON AbsentE.Employeeid = AbsentT.tsEmployeeid
	  INNER JOIN tbltimesheets T 
			ON T.timesheetid = tsd.tstimesheetid 
	  INNER JOIN tblpayrollstatus P 
			ON T.Payrollstatusid = P.PayrollstatusID
	  INNER JOIN tblPayrollstatus P2 
			ON P2.siteid = P.Siteid and P2.statustype = P.statusType 
			and P.ClassificationGroup = P2.ClassificationGroup 
			and P2.Payrollid = 1056 -- PayrollID where they should be
	  LEFT JOIN tbltimesheets T2 
			ON T.tstimetype = T2.tstimetype 
			and T.tsemployeeid = T2.tsEmployeeid 
			and T2.tsPayroll = 1056 -- PayrollID where they should be
Inner Join tblEmployee se
	on t.tsemployeeID = se.EmployeeID
inner join tblPositionControlDetails pc
	on AbsentE.employeeID = pc.EmployeeID
Inner Join tblSite ste
	on pc.SiteID = ste.SiteID
where tsd.tsDate between '12/15/15' and '12/18/15' -- Date Range of the timesheets processed
	  and T.TsPayroll  = 1056 -- PayrollID where they are
	  and T.tstimetype IN(7,8)
group by
tsd.timesheetdetailid,
	  t.timesheetid,
	  tsd.tsTimesheetid,
	  T.tsPayroll,
	  T2.timesheetid,
	  T2.tsPayroll,
	  tsd.tsdate,
	  AbsentE.FullName,
	  AbsentP.slotNum,
	  se.FullName,
	  ste.SiteName
order by AbsentE.FullName,tsd.tsdate;


select 
td.timeSheetDetailId,
td.tsTimeSheetId,
td.hrs,
ts.tsTimeType,
te.FullName as [Absent],
te2.FullName as [Sub],
td.tsDate
from tblTimeSheetsDetails td
inner join tblTimeSheets ts
on td.tsTimeSheetId = ts.TimeSheetId
inner join tblEmployee te
on ts.tsEmployeeID = te.employeeID
inner join tblEmployee te2
on td.SubEmployeeID = te2.employeeID
where tsTimeSheetID in 
(
select TimeSheetID  from tblTimeSheets
where tsPayroll = 1066
and tstimetype IN(7,8)
and DCreated > '12/18/2015'
)

select * from tblTimeSheetsDetails

select 
ts.timeSheetId,
ts.tsPayroll,
ts.tsEmployeeid, 
te.fullName,
ts.dCreated,
ts.PayrollStatusID,
from tblTimeSheets ts
inner join tblEmployee te
on ts.tsEmployeeId = te.EmployeeId
where tsPayroll = 1056
and ts.tstimetype IN(7,8)
and ts.DCreated > '12/15/2015'


Update tsd
set tstimesheetid = 1066
--select *
FROM tbltimesheetsdetails tsd
INNER JOIN tbltimesheetsdetails tsd2 ON tsd.xrefsubtsdetailid = tsd2.timesheetdetailid
INNER JOIN tbltimesheets AbsentT ON AbsentT.timesheetid = tsd2.tstimesheetid
INNER JOIN tblPositioncontroldetails AbsentP ON AbsentP.Positioncontrolid = AbsentT.tsPositioncontrolid
LEFT JOIN tblemployee AbsentE ON AbsentE.Employeeid = AbsentT.tsEmployeeid
	  INNER JOIN tbltimesheets T 
			ON T.timesheetid = tsd.tstimesheetid 
	  INNER JOIN tblpayrollstatus P 
			ON T.Payrollstatusid = P.PayrollstatusID
	  INNER JOIN tblPayrollstatus P2 
			ON P2.siteid = P.Siteid and P2.statustype = P.statusType 
			and P.ClassificationGroup = P2.ClassificationGroup 
			and P2.Payrollid = 1056 -- PayrollID where they should be
	  LEFT JOIN tbltimesheets T2 
			ON T.tstimetype = T2.tstimetype 
			and T.tsemployeeid = T2.tsEmployeeid 
			and T2.tsPayroll = 1056 -- PayrollID where they should be
Inner Join tblEmployee se
	on t.tsemployeeID = se.EmployeeID
inner join tblPositionControlDetails pc
	on AbsentE.employeeID = pc.EmployeeID
Inner Join tblSite ste
	on pc.SiteID = ste.SiteID
where tsd.tsDate between '12/15/15' and '12/18/15' -- Date Range of the timesheets processed
	  and T.TsPayroll  = 1056 -- PayrollID where they are
	  and T.tstimetype IN(7,8)
	  and se.FullName in ('Liesching, Evelyn F','Kolbmann Lockwood, Karen M','Stockdale, Kristen M')
	  
select * from tblTimeSheetsDetails
where timeSheetDetailId = 18253


Update tblTimeSheetsDetails
Set tsTimeSheetId = 35599
where timeSheetDetailId = 18252



select *  from tblTimeSheetsDetails
where tsPayroll = 1056
and tstimetype IN(7,8)
and DCreated > '12/18/2015'

sp_columns tblTimeSheetsDetails
sp_columns tblTimeSheets

select 
tblTimeSheetsDetails.tsTimeSheetID,
tblTimeSheetsDetails.TimeSheetDetailID,
tblTimeSheetsDetails.SubEmployeeID,
tblTimeSheetsDetails.tsDate,
tblTimesheets.tsEmployeeId,
tblTimesheets.tsPayroll,
tblEmployee.FullName as SubEmployee,
tblTimeSheetsDetails.xRefSubTSDetailId
from tblTimeSheetsDetails
inner join tblTimesheets
on tblTimeSheetsDetails.tsTimeSheetID = tblTimesheets.TimeSheetID
inner join tblEmployee
on tblTimesheets.tsEmployeeId = tblEmployee.EmployeeID
where tblTimeSheetsDetails.tsTimeSheetID in
(
select timeSheetId  from tblTimeSheets
where tsPayroll = 1066
and tstimetype IN(7,8)
)
order by 
tblEmployee.FullName asc,
tblTimeSheetsDetails.tsDate asc;

select * from tblTimeSheets
where timeSheetId = 35599



------------
ROLL OVER 




SELECT * FROM Rollover_Tasks

UPDATE Rollover_Tasks
	SET RelatedTicketNo = 10978,
		StaffCompleted = 'TEO',
		DateCompleted = CONVERT(VARCHAR(10),GETDATE(),110),,
		Comments = 'DS ADMIN ROLLED'
WHERE ID IN (3)












-------------------------



/*
	DEPENDING ON THE NEED, YOU MAY OR YOU MAY NOT HAVE TO CREATE A NEW SERIES
*/
-- VERIFY THE DISTRICT
SELECT DistrictAbbrev,
	DistrictTitle
FROM tblDistrict

/********************************************
	CODE TO CREATE A NEW SERIES
	--  skip this over if you do not need to
		create a new series.
*/
DECLARE @SeriesName AS VARCHAR(100)
DECLARE @EffectiveDate AS DATE
DECLARE @Comments AS VARCHAR(100)

SET @SeriesName = (
		SELECT (
				SELECT CHAR(ASCII(Series) + 1)
				)
		FROM tblSalaryMatrixSeries
		WHERE mxSeriesID = (
				SELECT MAX(mxSeriesID)
				FROM tblSalaryMatrixSeries
				)
		)
SET @EffectiveDate = '07/01/2000'
SET @Comments = (
		SELECT 'DS Admin created series as of ' + 
		)
CONVERT(NVARCHAR(20), GETDATE(), 101)
INSERT INTO tblSalaryMatrixSeries (
	DistrictID,
	Series,
	ApprovedDate,
	EffectiveDate,
	InactiveDate,
	mxpayrollID,
	Comments,
	OldId
	)
VALUES (
	(
		SELECT DistrictID
		FROM tblDistrict
		),
	@SeriesName,
	NULL,
	@EffectiveDate,
	NULL,
	0,
	@Comments,
	0
	)

INSERT INTO tblSalaryMatrix (
	smCompTypeID,
	mxGroup,
	SeriesID,
	[Value],
	StepColumn,
	ColNumber,
	Col,
	RowNumber,
	Step,
	smStipendScheduleID,
	DCreated,
	OldId,
	COECode,
	RetireBase
	)
SELECT smCompTypeID,
	mxGroup,
	(
		SELECT MAX(mxSeriesID)
		FROM tblSalaryMatrixSeries
		),
	[Value],
	StepColumn,
	ColNumber,
	Col,
	RowNumber,
	Step,
	smStipendScheduleID,
	GETDATE(),
	SalaryMatrixID,
	COECode,
	RetireBase
FROM tblSalaryMatrix
WHERE SeriesID = (
		SELECT TOP 1 mxSeriesID
		FROM tblSalaryMatrixSeries
		WHERE mxSeriesID != (
				SELECT MAX(se.mxSeriesID)
				FROM tblSalaryMatrixSeries se
				)
			AND mxSeriesID > (
				SELECT MIN(de.mxSeriesID)
				FROM tblSalaryMatrixSeries de
				)
		ORDER BY mxSeriesID DESC
		)

/********************************************
	EXTRACT THE DATA WE NEED
*/
/*
	THE FOLLOWING LAYOUT IS HOW THEY SEE THE SALARY MATRIX ON
	THE DS UI ITSELF, THIS SHOULD ALLOW THEM SOME FAMILIARITY.
*/
SELECT MATRIX.SalaryMatrixID,
	MATRIX.RowNumber,
	MATRIX.ColNumber,
	SERIES.Series AS Series,
	CLS.ClassDescription AS Classification,
	SMGRP.GroupName AS Salary_Group,
	COMP.CompType AS Comp_Type,
	MATRIX.Step AS Range_Title,
	CAST(MATRIX.Col AS VARCHAR(2)) AS Step_Title,
	MATRIX.StepColumn AS Range_Step,
	MATRIX.[Value] AS [Value]
FROM tblSalaryMatrix MATRIX
INNER JOIN tblSalaryMatrixSeries SERIES
	ON MATRIX.SeriesID = SERIES.mxSeriesID
		AND SERIES.mxSeriesID = (
			SELECT MAX(mxSeriesID)
			FROM tblSalaryMatrixSeries
			)
INNER JOIN tblSalaryMatrixGroup SMGRP
	ON MATRIX.mxGroup = SMGRP.SalaryMatrixGroupID
INNER JOIN tblClassifications CLS
	ON SMGRP.ClassificationID = CLS.ClassificationID
INNER JOIN tblCompType COMP
	ON MATRIX.smCompTypeID = COMP.CompTypeID
-- SPECIFY A SPECIFIC GROUPING
ORDER BY SERIES.Series ASC,
	CLS.ClassDescription ASC,
	SMGRP.GroupName ASC,
	COMP.CompType ASC,
	MATRIX.RowNumber ASC,
	MATRIX.ColNumber ASC,
	MATRIX.StepColumn ASC

-- CHECK IF EVERYBODY IS IN SERIES 6
SELECT DISTINCT SeriesID
FROM tblSalaryMatrix
WHERE SalaryMatrixID IN (
		SELECT SalaryMatrixID
		FROM tblCompDetails
		WHERE FiscalYear = 2017
		)

-- COMP HAS BEEN ROLLED
SELECT EmployeeID,
	Fullname
FROM tblEmployee
WHERE EmployeeID IN (
		SELECT EmployeeID
		FROM tblCompDetails
		WHERE FiscalYear = 2017
			AND CompTypeID = (
				SELECT CompTypeID
				FROM tblCompType
				WHERE CompType = 'Longevity (CRH)'
				)
			AND EmployeeID IN (
				SELECT adEmployeeID
				FROM tblActionDue
				WHERE ActionTypeID = (
						SELECT ActionTypeID
						FROM tblActionType
						WHERE TypeDesc = 'Longevity Date'
							AND DateNext = '7/1/17'
						)
				)
		)

SELECT EmployeeID,
	Fullname
FROM tblEmployee
WHERE EmployeeID IN (
		SELECT EmployeeID
		FROM tblCompDetails
		WHERE FiscalYear = 2017
			AND CompTypeID = (
				SELECT CompTypeID
				FROM tblCompType
				WHERE CompType = 'Vac Pay'
				)
			AND EmployeeID IN (
				SELECT adEmployeeID
				FROM tblActionDue
				WHERE ActionTypeID = (
						SELECT ActionTypeID
						FROM tblActionType
						WHERE TypeDesc = 'Vacation Increment'
							AND DateNext = '7/1/17'
						)
				)
		)

--------------------
SELECT *
FROM tblCompType
WHERE CompType = 'Vac Pay' -- 11

SELECT TE.EmployeeID,
	TE.Fullname,
	CD.CompDetailsID,
	PCD.SlotNum,
	SM1.StepColumn,
	SM1.SalaryMatrixID AS oldSM,
	(
		SELECT SM2.StepColumn
		FROM tblSalaryMatrix SM2
		WHERE SM2.ColNumber = SM1.ColNumber + 1
			AND SM2.mxGroup = SM1.mxGroup
			AND SM2.smCompTypeID = SM1.smCompTypeID
			AND SM2.SeriesID = SM1.SeriesID
		) AS newSC,
	(
		SELECT SM2.SalaryMatrixID
		FROM tblSalaryMatrix SM2
		WHERE SM2.ColNumber = SM1.ColNumber + 1
			AND SM2.mxGroup = SM1.mxGroup
			AND SM2.smCompTypeID = SM1.smCompTypeID
			AND SM2.SeriesID = SM1.SeriesID
		) AS newSMID
INTO #WHAT
FROM tblEmployee TE
INNER JOIN tblCompDetails CD
	ON TE.EmployeeID = CD.EmployeeID
		AND CD.FiscalYear = 2017
		AND CD.CompTypeID = (
			SELECT CompTypeID
			FROM tblCompType
			WHERE CompType = 'Vac Pay'
			)
INNER JOIN tblPositionControlDetails PCD
	ON PCD.PositionControlID = CD.cdPositionControlID
INNER JOIN tblActionDue AD
	ON TE.EmployeeID = AD.adEmployeeID
		AND AD.ActionTypeID = (
			SELECT ActionTypeID
			FROM tblActionType
			WHERE TypeDesc = 'Vacation Increment'
			)
		AND AD.DateNext = '7/1/17'
INNER JOIN tblSalaryMatrix SM1
	ON CD.SalaryMatrixID = SM1.SalaryMatrixID
ORDER BY TE.Fullname ASC;

UPDATE tblCompDetails
SET SalaryMatrixID = (
		CASE 
			WHEN WHAT.newSMID IS NULL
				THEN WHAT.oldSM
			ELSE WHAT.newSMID
			END
		)
FROM #WHAT WHAT
INNER JOIN tblCompDetails CD
	ON WHAT.CompDetailsID = CD.CompDetailsID

-- DROP TABLE #WHAT
--- CHANGE THE DATE
UPDATE tblCompDetails
SET EffectiveDate = '7/1/17'
WHERE FiscalYear = 2017
	AND InactiveDate IS NULL





SELECT * FROM tblCompDetails WHERE EmployeeID = 575 AND FiscalYear = 2017 AND CompTypeID = 19 -- 20166
SELECT * FROM tblCompDetails WHERE FiscalYear = 2017 AND SalaryMatrixID =  20180



-----------------------------



SELECT CD.CompDetailsID,
	CD.EmployeeID,
	TE.Fullname,
	CT.CompType,
	PCD.SlotNum,
	PCD.PositionControlID,
	PCD.InactiveDate,
	(
		SELECT TOP 1 PCD2.SlotNum
		FROM tblPositionControlDetails PCD2
		WHERE PCD2.SlotNum = PCD.SlotNum
			AND PCD2.InactiveDate IS NULL
			AND PCD2.EmployeeID = PCD.EmployeeID
		ORDER BY PositionControlID DESC
		) AS SAMESLOT,
	(
		SELECT TOP 1 PCD2.PositionControlID
		FROM tblPositionControlDetails PCD2
		WHERE PCD2.SlotNum = PCD.SlotNum
			AND PCD2.InactiveDate IS NULL
			AND PCD2.EmployeeID = PCD.EmployeeID
		ORDER BY PositionControlID DESC
		) AS NEW_PCID
--INTO #TEMPO
FROM tblCompDetails CD
INNER JOIN tblPositionControlDetails PCD
	ON CD.cdPositionControlID = PCD.PositionControlID
		AND PCD.InactiveDate IS NOT NULL
		AND CD.FiscalYear = 2017
		AND CD.InactiveDate > CD.EffectiveDate
INNER JOIN tblEmployee TE
	ON TE.EmployeeID = CD.EmployeeID AND TE.TerminateDate IS NULL
INNER JOIN tblCompType CT
	ON CD.CompTypeID = CT.CompTypeID
WHERE 
	EXISTS (
		SELECT TOP 1 PCD2.PositionControlID
		FROM tblPositionControlDetails PCD2
		WHERE PCD2.SlotNum = PCD.SlotNum
			AND PCD2.InactiveDate IS NULL
			AND PCD2.EmployeeID = PCD.EmployeeID
		ORDER BY PositionControlID DESC
		)
ORDER BY TE.Fullname

---------------------------
-- action due dates

-- get the action type id
SELECT *
FROM tblActionType
WHERE TypeDesc = 'Child Abuse Training' -- 72

-- get those affected
SELECT EmployeeID
INTO #TEMPO
FROM tblEmployee
WHERE TerminateDate IS NULL
	AND ClassificationId IN (
		SELECT ClassificationId
		FROM tblClassifications
		WHERE ClassDescription IN (
				'Classified',
				'Classified Management',
				'Supervisory',
				'Confidential',
				'Certificated'
				)
		)
	
-- insert as requested
SP_COLUMNS tblActionDue

INSERT INTO tblActionDue (
	adEmployeeID,
	ActionTypeID,
	DateLast,
	DateNext,
	Comments,
	DCreated
	)
SELECT EmployeeID,
	72,
	NULL,
	'09/30/2018',
	'ds admin :' + CONVERT(VARCHAR(10), GETDATE(), 110),
	CONVERT(VARCHAR(10), GETDATE(), 110)
FROM #TEMPO

-- check to verify
SELECT EmployeeID,
	Fullname
FROM tblEmployee
WHERE EmployeeID IN (
		SELECT EmployeeID
		FROM #TEMPO
		)

------------------------------

-- get PCA count based on specific tasks
SELECT (
		SELECT DistrictAbbrev
		FROM tblDistrict
		) AS DistrictAbbrev,
	(
		SELECT DistrictTitle
		FROM tblDistrict
		) AS DistrictTitle,
	(
		SELECT COUNT(DISTINCT PCA.Id)
		FROM PCA
		INNER JOIN PCADetail PCAD
			ON PCAD.PCAId = PCA.Id
				AND (
					EXISTS (
						SELECT *
						FROM PCADetail
						WHERE [TypeId] = 1
							AND PCAId = PCA.Id
						)
					--AND EXISTS(SELECT * FROM PCADetail WHERE [TypeId] = 11 AND PCAId = PCA.Id )
					AND EXISTS (
						SELECT *
						FROM PCADetail
						WHERE [TypeId] = 14
							AND PCAId = PCA.Id
						)
					)
				AND PCA.StatusId = 3
				AND PCA.DCreated BETWEEN CONVERT(VARCHAR(10), DATEADD(YEAR, - 1, DATEADD(MONTH, DATEDIFF(
										MONTH, '19000101', CONVERT(VARCHAR(10), GETDATE(), 110)), 
									'19000101')), 110)
					AND CONVERT(VARCHAR(10), GETDATE(), 110)
		) AS [Count]
-- get the task
-- SELECT * FROM DS_Global..PCADetailType

----------------------------------------------------------------
----------------------------------------------------------------
-- VERIFY DISTRICT
SELECT DistrictAbbrev,
	DistrictTitle
FROM tblDistrict
-- SCCS        	Santa Cruz City Schools

-----------------------------------------------------------------
-- PREP THE SCRATCH TABLES
SELECT *
FROM convFullname

TRUNCATE TABLE convFullname

-----------------------------------------------------------------
-- GET THE BASIC INFOS
SELECT *
FROM PyDeductionPlan
WHERE DeductionPlan = 'STRS EXCESS CONTRIBUTIONS RETURN' -- 65

SELECT *
FROM PyDeductionPolicy
WHERE PyDeductionPlanId = (
		SELECT Id
		FROM PyDeductionPlan
		WHERE DeductionPlan = 'STRS EXCESS CONTRIBUTIONS RETURN'
		)

-----------------------------------------------------------------
/*
	paste the data as follows:

	EmployeeId = EmployeeId,
	SSN = SSN,
	Fullname = Employee Name,
	extra = PlanId,
	extra2 = Plan (MUST MATCH THE PLAN TEMPLATE),
	extra3 = Policy Cost,
	extra4 = District Contribution,
	extra5 = Employee Contribution,
	extra6 = Notes,
	extra7 = Effective Payroll,
	extra8 = Inactive Payroll,

	extra13 = pyemployeeId
	extra20 = classid
	extra10 = pensionid
	extra11 = pypositionid
	extra15 = acct string
	extra17 = acct id


*/
/*

-----------------------------------------------------------------
-- IF THE COL WIDTH DOESNT WORK
ALTER TABLE convFullname
ALTER COLUMN extra2 VARCHAR(100)

*/

-----------------------------------------------------------------
-- GET EMPLOYEEID
UPDATE convFullname
SET EmployeeID = TE.EmployeeID
FROM convFullname CV
INNER JOIN tblEmployee TE
	ON TE.SocSecNo = CV.SSN

-- CHECK FOR STRAGGLERS (EMPLOYEEID)
SELECT *
FROM tblEmployee
WHERE EmployeeID IS NULL

-----------------------------------------------------------------
-- UPDATE PLANID
UPDATE convFullname
SET extra = (
		SELECT ID
		FROM PyDeductionPlan
		WHERE DeductionPlan = 'STRS EXCESS CONTRIBUTIONS RETURN'
		)

-- CHECK FOR STRAGGLERS (PLANID)
SELECT *
FROM convFullname
WHERE extra IS NULL

-----------------------------------------------------------------
-- INSERT THE NEW TIMELINE ON THE BENEFITS/DEDUCTIONS TAB
-- GET THE COLUMNS WE NEED TO POPULATE
-- SP_COLUMNS PyDeductionTemplate


INSERT INTO PyDeductionTemplate (
	EmployeeId,
	EffectivePayrollId,
	InactivePayrollId,
	PyDeductionPlanId,
	Amount,
	[Percentage],
	TypeId,
	PayrollCap,
	FiscalYearCap,
	CalendarYearCap,
	PyDeductionPolicyId,
	DistrictAmount,
	Note
	)
SELECT CV.EmployeeID,
	(
		SELECT PayrollID
		FROM tblPayroll
		WHERE FiscalYear = 2017
			AND PayPeriod = CV.extra7
		),
	(
		SELECT PayrollID
		FROM tblPayroll
		WHERE FiscalYear = 2017
			AND PayPeriod = CV.extra8
		),
	CV.extra,
	CV.extra3,
	NULL,
	1,
	NULL,
	NULL,
	NULL,
	0,
	CV.extra4,
	CV.extra6 + ': ds admin import: ' + CONVERT(VARCHAR(10), GETDATE(), 110)
FROM convFullname CV

-----------------------------------------------------------------
-- GET WHOSE EXCLUDED (W/O PYEMPLOYEEID BEC THEY ARE TERMED)
SELECT DistrictAbbrev,
	DistrictTitle
FROM tblDistrict

SELECT DISTINCT PDT.EmployeeId,
	TE.Fullname
FROM PyDeductionTemplate PDT
INNER JOIN tblEmployee TE
	ON PDT.EmployeeId = TE.EmployeeID
		AND PDT.PyDeductionPlanId = (
			SELECT Id
			FROM PyDeductionPlan
			WHERE DeductionPlan = 'STRS EXCESS CONTRIBUTIONS RETURN'
			)
		AND PDT.EffectivePayrollId = (
			SELECT PayrollID
			FROM tblPayroll
			WHERE FiscalYear = 2017
				AND PayPeriod = 'OCT 2017'
			)
WHERE PDT.EmployeeId NOT IN (
		SELECT ReferenceKey
		FROM PyEmployee
		WHERE PayrollRunId = (
				SELECT Id
				FROM PayrollRun
				WHERE [Description] = 'OCT 2017'
				)
		)
ORDER BY TE.Fullname ASC

-----------------------------------------------------------------
-- MANUALLY ADD PYEMPLOYEEIDS ROUTINE

-- DO THIS ONLY 
-- if the employees do not exist on pyEmployee 
-- Paste the employee id in ConvFullName
-- Create pyEmployee entries base on the employee id on convFullname
INSERT INTO pyEmployee (
	ReferenceKey,
	ReferenceSource,
	ReferenceExtra,
	SSN,
	LastName,
	FirstName,
	MiddleName,
	MailingAddressId,
	HomeAddressId,
	BirthDate,
	HireDate,
	TerminateDate,
	EmploymentStatusId,
	WarrantSiteID,
	IsDeferredPay,
	PayCode,
	FedMaritalStatus,
	FedExemptions,
	FedAddAmt,
	FedEIC,
	FedSpouseEICCertificateID,
	StateMaritalStatus,
	StateExemptions,
	StateAddAmt,
	PayrollRunID
	)
SELECT DISTINCT tblEmployee.EmployeeID,
	1,
	NULL,
	tblEmployee.SocSecNo,
	tblEmployee.LName,
	tblEmployee.FName,
	tblEmployee.MI,
	tblEmployee.MailingAddressId,
	tblEmployee.HomeAddressId,
	tblEmployee.DOB,
	tblEmployee.HireDate,
	tblEmployee.TerminateDate,
	tblEmployee.StatusID,
	tblEmployee.WarrantSiteID,
	tblEmployee.IsDeferredPay,
	NULL,
	tblEmployee.FedMaritalStatus,
	tblEmployee.FedExemptions,
	tblEmployee.FedAddAmt,
	tblEmployee.FedEIC,
	tblEmployee.FedSpouseEICCertificateID,
	tblEmployee.StateMaritalStatus,
	tblEmployee.StateExemptions,
	tblEmployee.StateAddAmt,
	(
		SELECT Id
		FROM PayrollRun
		WHERE [Description] = 'OCT 2017'
		)
FROM ConvFullname
INNER JOIN tblEmployee
	ON tblEmployee.EmployeeID = ConvFullname.EmployeeID
WHERE ConvFullname.EmployeeID IN (
		SELECT DISTINCT PDT.EmployeeId
		FROM PyDeductionTemplate PDT
		INNER JOIN tblEmployee TE
			ON PDT.EmployeeId = TE.EmployeeID
				AND PDT.PyDeductionPlanId = (
					SELECT Id
					FROM PyDeductionPlan
					WHERE DeductionPlan = 'STRS EXCESS CONTRIBUTIONS RETURN'
					)
				AND PDT.EffectivePayrollId = (
					SELECT PayrollID
					FROM tblPayroll
					WHERE FiscalYear = 2017
						AND PayPeriod = 'OCT 2017'
					)
		WHERE PDT.EmployeeId NOT IN (
				SELECT ReferenceKey
				FROM PyEmployee
				WHERE PayrollRunId = (
						SELECT Id
						FROM PayrollRun
						WHERE [Description] = 'OCT 2017'
						)
				)
		)

--------------------------------------------------------------------------------------
-- GET THE PYEMPLOYEEID
-- in ConvFullname, Set Extra13 = pyEmployeeID
UPDATE cf
SET Extra13 = py.id
FROM pyEmployee py
INNER JOIN convfullname cf
	ON cf.employeeid = py.ReferenceKey
INNER JOIN tblEmployee TE
	ON TE.EmployeeID = CF.EmployeeID
WHERE (
		py.PayrollRunID = (
			SELECT Id
			FROM PayrollRun
			WHERE [Description] = 'OCT 2017'
			)
		)

-- check for null in pyEmployeeID = Extra13
SELECT *
FROM convFullName
WHERE Extra13 IS NULL

--------------------------------------------------------------------------------------
-- CREATE DATA FOR THE TERMED PEEPS
-- create inserts for pyPosition
-- set extra20 as classification id
UPDATE convFullname
SET extra20 = TE.ClassificationId
FROM convFullname CV
INNER JOIN tblEmployee TE
	ON CV.EmployeeID = TE.EmployeeID

-- stragglers (classification id)
SELECT *
FROM convFullName
WHERE extra20 IS NULL
-- NONE

-- Get the PensionID
UPDATE convFullname
SET extra10 = te.CertRetireId
FROM tblEmployee te
INNER JOIN convFullname cv
	ON te.EmployeeID = cv.EmployeeID

-- check for Nulls (PensionID)
SELECT *
FROM convfullname
WHERE extra10 IS NULL

-- check for STRAGGLERS (PensionID)
SELECT DISTINCT extra10
FROM convfullname
WHERE ISNUMERIC(extra10) = 0

-- GET PYPOSITIONID
UPDATE cf
SET extra11 = pp.id -- pyPositionID
FROM pyPosition pp
INNER JOIN convFullName cf
	ON cf.extra13 = pp.pyEmployeeID
		AND cf.extra20 = pp.ClassificationID
WHERE pp.payrollrunid = (
		SELECT Id
		FROM PayrollRun
		WHERE [Description] = 'OCT 2017'
		)

-- GET THE ONES TERMED (PYPOSITIONID)
SELECT *
FROM convFullname
WHERE extra11 IS NULL

-- SET A FLAG (WITHOUT PYPOSITIONID)
UPDATE convFullname
SET extra12 = - 1
WHERE extra11 IS NULL

-- MANUALLY INSERT PYPOSITIONID FOR TERMED PEEPS
INSERT INTO pyPosition (
	pyEmployeeID,
	ReferenceKey,
	ReferenceSource,
	ReferenceExtra,
	ClassificationId,
	[Description],
	PensionID,
	HasBenefitsDeducted,
	PayPercent,
	PayrollRunID,
	IsOverRidden,
	SiteID,
	Months
	)
SELECT DISTINCT convFullName.Extra13, -- pyEmployeeID
	NULL, -- ReferenceKey
	- 1, -- ReferenceSource
	NULL, -- ReferenceExtra
	convFullName.Extra20, -- ClassificationId
	convFullName.extra2, -- [Description]
	convFullName.extra10, -- PensionID
	1, -- HasBenefitsDeducted
	1, -- PayPercent
	(
		SELECT Id
		FROM PayrollRun
		WHERE [Description] = 'OCT 2017'
		), -- PayrollRunID
	1, -- IsOverRidden
	tblEmployee.WarrantSiteID, -- SiteID
	tblEmployee.PayCycle -- Months
FROM convFullName
INNER JOIN tblEmployee
	ON convFullName.employeeID = tblEmployee.EmployeeID
WHERE convFullName.extra11 IS NULL
	AND convFullname.extra12 = - 1

-- GET THE PYPOSITIONID (TERMED)
UPDATE cf
SET extra11 = pp.id -- pyPositionID
FROM pyPosition pp
INNER JOIN convFullName cf
	ON cf.extra13 = pp.pyEmployeeID
		AND cf.extra2 = pp.[description]
		AND cf.extra20 = pp.ClassificationID
WHERE pp.payrollrunid = (
		SELECT Id
		FROM PayrollRun
		WHERE [Description] = 'OCT 2017'
		) -- PayrollRunID
	AND CF.extra11 IS NULL
	AND CF.extra12 = - 1

------------------------------------------------
-- Populate pyPositionFunding

SELECT * FROM tblAccount WHERE AccountString = '01-0000-0-1100-1000-1130-000-0000'

/* 
 
 IF ACCOUNT DOESNT EXIST
 TRUNCATE TABLE CONVBUDGET
 PASTE TO CONVBUDGET

 EXEC spBudgetImport 0
 ,0
 ,0

 */

UPDATE convFullName
SET Extra17 = ta.AccountID
FROM convFullName
INNER JOIN tblAccount ta
	ON convFullName.extra15 = ta.accountstring
WHERE convFullname.extra12 = - 1
-- CHECK FOR STRAGGLERS
SELECT id,
	Lname,
	Fname,
	extra12
FROM convFullname
WHERE Extra17 IS NULL
	AND extra12 = - 1

-- Insert them into pyPositionFunding
INSERT INTO pyPositionFunding (
	pyPositionID,
	AccountID,
	Percentage,
	ReferenceKey,
	ReferenceSource,
	IsOverridden,
	PayrollRunID
	)
SELECT DISTINCT cv.Extra11, -- pyPositionID
	cv.Extra17, -- AccountID
	1, -- Percentage
	NULL, -- ReferenceKey
	- 1, -- ReferenceSource
	1, -- IsOverridden
	(
		SELECT Id
		FROM PayrollRun
		WHERE [Description] = 'OCT 2017'
		) -- PayrollRunID
FROM ConvFullName cv
WHERE CV.extra12 = - 1

-- CHANGE REFERENCE SOURCE (FUNDING)
SELECT *
FROM PyPosition
WHERE ReferenceKey IS NULL
	AND ReferenceSource = - 1
	AND PayrollRunId = (
		SELECT Id
		FROM PayrollRun
		WHERE [Description] = 'OCT 2017'
		)
ORDER BY PyEmployeeId

UPDATE PyPosition
SET ReferenceSource = 100
WHERE ReferenceKey IS NULL
	AND ReferenceSource = - 1
	AND PayrollRunId = (
		SELECT Id
		FROM PayrollRun
		WHERE [Description] = 'OCT 2017'
		)


------------------------------------------------------
-- DO THIS PART IF THEY WANT THE DESC 
-- CHANGED
UPDATE PyCompensation
SET [Description] = NULL
WHERE Id IN (
		SELECT PyCompensationId
		FROM PyResult
		WHERE PayrollRunId = (
				SELECT Id
				FROM PayrollRun
				WHERE [Description] = 'OCT 2017'
				)
			AND PyEmployeeId IN (
				SELECT PyEmployeeId
				FROM PyPosition
				WHERE ReferenceKey IS NULL
					AND ReferenceSource = 100
					AND PayrollRunId = (
						SELECT Id
						FROM PayrollRun
						WHERE [Description] = 'OCT 2017'
						)
				)
			AND (PyCompensationId > 0)
		)

-- INSERT INTO PYDEDUCTION
/*
SELECT * 
FROM PyDeduction 
WHERE
	PayrollRunId = (SELECT Id FROM PayrollRun WHERE [Description] = 'OCT 2017')

SP_COLUMNS PyDeduction

INSERT INTO PyDeduction
(
	PyEmployeeId,
	ReferenceKey,
	ReferenceSource,
	ReferenceExtra,
	Code,
	PyDeductionPlanId,
	PyDeductionCycleId,
	PyDeductionMethodId,
	PayrollRunId,
	DistrictAmount,
	EmployeeAmount,
	DistrictPayrollCap,
	DistrictFiscalYearCap,
	DistrictCalendarYearCap,
	EmployeePayrollCap,
	EmployeeCalendarYearCap,
	IsOverridden,
	OverridesId,
	LastModified
)
SELECT
	extra13,
	NULL,
	-1,
	NULL,
	NULL,
	(SELECT Id FROM PyDeductionPlan WHERE DeductionPlan = 'STRS EXCESS CONTRIBUTIONS RETURN'),
	NULL,
	NULL,
	(SELECT Id FROM PayrollRun WHERE [Description] = 'OCT 2017'),
	extra4,
	extra5,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	1,
	NULL,
	'ds import on ' + CONVERT(VARCHAR(10), GETDATE(), 110)
FROM convFullname
WHERE
	extra12 = -1
*/

----------------------------------------------
-- WHACK MODE
-- ONLY WHEN YOU REALY HAVE TO
SELECT *
FROM PyDeductionTemplate
WHERE PyDeductionPlanId = (
		SELECT Id
		FROM PyDeductionPlan
		WHERE DeductionPlan = 'STRS EXCESS CONTRIBUTIONS RETURN' -- 65
		)
	AND EffectivePayrollId = (
		SELECT PayrollID
		FROM tblPayroll
		WHERE FiscalYear = 2017
			AND PayPeriod = 'OCT 2017'
		)
	AND InactivePayrollId = (
		SELECT PayrollID
		FROM tblPayroll
		WHERE FiscalYear = 2017
			AND PayPeriod = 'OCT 2017'
		)
	AND Note LIKE '%ds admin import: 10-10-2017%'

DELETE
FROM PyDeductionTemplate
WHERE PyDeductionPlanId = (
		SELECT Id
		FROM PyDeductionPlan
		WHERE DeductionPlan = 'STRS EXCESS CONTRIBUTIONS RETURN' -- 65
		)
	AND EffectivePayrollId = (
		SELECT PayrollID
		FROM tblPayroll
		WHERE FiscalYear = 2017
			AND PayPeriod = 'OCT 2017'
		)
	AND InactivePayrollId = (
		SELECT PayrollID
		FROM tblPayroll
		WHERE FiscalYear = 2017
			AND PayPeriod = 'OCT 2017'
		)
	AND Note LIKE '%ds admin import: 10-10-2017%'

-- PYDEDUCTION
SELECT *
FROM PyDeduction
WHERE LastModified LIKE 'ds import on%'

DELETE
FROM PyDeduction
WHERE LastModified LIKE 'ds import on%'

--
SELECT *
FROM PyPosition
WHERE ReferenceKey IS NULL
	AND ReferenceSource = - 1
	AND PayrollRunId = (
		SELECT Id
		FROM PayrollRun
		WHERE [Description] = 'OCT 2017'
		)
ORDER BY PyEmployeeId

DELETE
FROM PyPosition
WHERE ReferenceKey IS NULL
	AND ReferenceSource = - 1
	AND PayrollRunId = (
		SELECT Id
		FROM PayrollRun
		WHERE [Description] = 'OCT 2017'
		)

SELECT DISTINCT convFullName.Extra13, -- pyEmployeeID
	NULL, -- ReferenceKey
	- 1, -- ReferenceSource
	NULL, -- ReferenceExtra
	convFullName.Extra20, -- ClassificationId
	convFullName.extra2, -- [Description]
	convFullName.extra10, -- PensionID
	1, -- HasBenefitsDeducted
	1, -- PayPercent
	(
		SELECT Id
		FROM PayrollRun
		WHERE [Description] = 'OCT 2017'
		), -- PayrollRunID
	1, -- IsOverRidden
	tblEmployee.WarrantSiteID, -- SiteID
	tblEmployee.PayCycle -- Months
FROM convFullName
INNER JOIN tblEmployee
	ON convFullName.employeeID = tblEmployee.EmployeeID
WHERE convFullName.extra11 IS NULL



----------
beanstalk
teoespero
6/M?U3y$





SELECT 
	USERS.EmployeeID,
	TE.Fullname,
	USERS.SecurityGroup,
	SEC.GroupName,
	REQ.[Description]
FROM [Rule] RU
INNER JOIN
	tblUsers USERS
	ON RU.UserId = USERS.UserID
	AND USERS.InactiveDate IS NULL
INNER JOIN
	tblEmployee TE
	ON TE.EmployeeID = USERS.EmployeeID
	AND TE.TerminateDate IS NULL
INNER JOIN
	tblSecurityGroup SEC
	ON USERS.SecurityGroup = SEC.SecurityGroupNum
INNER JOIN 
	DS_Global..AuthorizationRequestType REQ
	ON REQ.Id = RU.RuleGroupId
ORDER BY
	RU.RuleGroupId ASC,
	SEC.SecurityGroupNum ASC,
	TE.Fullname ASC;










Developmental Mathematics




SELECT *
FROM PKDispenser
WHERE
	TableName = 'tblEmployee'

SELECT *
FROM tblEmployee


UPDATE tblEmployee
	SET
		EmployeeID = 7
WHERE
	EmployeeID = 31

UPDATE tblUsers
	SET
		EmployeeID = 7
WHERE
	EmployeeID = 31

UPDATE PKDispenser
	SET
		NextKey = NextKey + 1
WHERE
	TableName = 'tblEmployee'


-- populate employeeid

Declare @Start int
set @Start = 8 -- decided to use the xxxx convention
 
update E set EmployeeID = (select count(*)+@start-1 from convemployee where id <= E.id) from convemployee E


SELECT * 
FROM convEmployee
WHERE
	SSN NOT IN (SELECT SocSecNo FROM tblEmployee)

	SP_COLUMNS tblEmployee

INSERT INTO tblEmployee
(
	EmployeeID,
	SocSecNo,
	EmplNo,
	DOB,
	Gender,
	LName,
	FName,
	MI,
	MaritalStatus,
	ShowAddress,
	HideAddress,
	Address,
	City,
	State,
	Zip,
	HidePhone,
	Phone,
	Email,
	HireDate,
	xInactive,
	InActiveReason,
	ToBeInactiveDate,
	TerminateDate,
	EthnicID,
	StatusID,
	Dcreated,
	ClassificationId,
	WarrantSiteID,
	PayCycle,
	Longevity,
	RetSystemID,
	DistrictId,
	OldId,
	SSNCheckDigit,
	MailSiteID,
	Password,
	WebLoginActive,
	HomeSameAsMailingAddress,
	HomeAddress,
	HomeCity,
	HomeState,
	HomeZip,
	FedMaritalStatus,
	FedExemptions,
	FedAddAmt,
	FedEIC,
	FedSpouseEICCertificateID,
	StateMaritalStatus,
	StateExemptions,
	StateAllowances,
	StateAddAmt,
	WebAdmin,
	WebLoginToken,
	HWPreTax,
	IsDeferredPay,
	StateID,
	IsHispanic,
	RaceId1,
	RaceId2,
	RaceId3,
	RaceId4,
	RaceId5,
	MailingAddressId,
	HomeAddressId,
	HomeEmail,
	StateAllowances2,
	SessionGuid,
	SessionExpirationTime,
	Nickname,
	PreviousLastName,
	CertRetireId,
	ClassRetireId,
	REtirementAccountId,
	RetirementNote,
	CertRetireNum,
	ClassRetireNum,
	ClassRetireNum2,
	CertRetirePlanDate,
	CertRetirePlanDate2,
	CertQualification,
	ClassRetirePlanDate,
	ClassRetirePlanDate2,
	ClassQualification,
	CertRetirementDate,
	ClassRetirementDate,
	PayrollGroupId,
	Locked,
	Attempts,
	PasswordChanged,
	PasswordPrior
)
SELECT
	CE.EmployeeID,
	CE.SSN,
	CE.EmplNo,
	CE.Birthdate,
	CE.Gender,
	CE.LName,
	CE.FName,
	CE.MI,
	NULL,
	1,
	0,
	CE.[Address],
	CE.City,
	CE.[State],
	CE.Zip,
	0,
	CE.Phone,
	CE.Email,
	CE.HireDate,
	0,
	NULL,
	NULL,
	NULL,
	NULL,
	(SELECT StatusID FROM tblStatus WHERE [Status] = CE.EmploymentStatus ),
	CONVERT(VARCHAR(10), GETDATE(), 110),
	NULL,
	NULL,
	0,
	0,
	NULL,
	(SELECT DistrictID FROM tblDistrict),
	0,
	0,
	NULL,
	NULL,
	NULL,
	1,
	Address,
	City,
	State,
	Zip,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	0,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	0,
	0,
	NULL,
	NULL
FROM convEmployee CE
WHERE
	SSN NOT IN (
		SELECT 
			SocSecNo
		FROM tblEmployee
	)


SP_COLUMNS tblStatus

INSERT INTO tblStatus
(
DistrictId,
[Status]
)
SELECT DISTINCT 
	(SELECT DistrictID FROM tblDistrict),
	EmploymentStatus 
FROM convEmployee 
WHERE 
	ISNULL(EmploymentStatus,'0') != '0'
	AND EmploymentStatus NOT IN (
			SELECT 
				[Status]
			FROM tblStatus
		)

UPDATE convFullname
	SET
		EmployeeID = TE.EmployeeID,
		extra8 = (SELECT ClassificationId FROM tblClassifications WHERE ClassDescription = CV.extra)
FROM convFullname CV
INNER JOIN
	tblEmployee TE
	ON TE.SocSecNo = CV.SSN
WHERE
	extra7 = 'CLASS'

SELECT DISTINCT 95, extra, 0 FROM convFullname WHERE extra7 = 'CLASS' AND EXTRA8 IS NULL

UPDATE convFullname 
	SET 
		extra = 'Supervisory'
WHERE
	EXTRA = 'Supervisor'

SELECT * FROM tblClassifications

UPDATE tblEmployee
	SET
		ClassificationId = CV.extra8
FROM tblEmployee TE
INNER JOIN
	convFullname CV
	ON CV.EmployeeID = TE.EmployeeID


SELECT * FROM tblEmployee WHERE ISNULL(ClassificationId,0) = 0

UPDATE tblEmployee 
	SET
		ClassificationId = 10
WHERE ISNULL(ClassificationId,0) = 0


UPDATE convFullname
	SET
		extra10 = JT.JobTitleID
FROM convFullname CV
INNER JOIN
	tblJobTitles JT
	ON JT.JobTitle = CV.extra9


SP_COLUMNS [Address]

INSERT INTO [Address]
(
	Address1,
	Address2,
	City,
	County,
	[State],
	Zip,
	InactiveDate,
	Country,
	PTTOO
)
SELECT 
	DISTINCT
	[Address],
	NULL,
	City,
	NULL,
	[State],
	Zip,
	NULL,
	NULL,
	NULL
FROM tblEmployee
WHERE
	([Address] IS NOT NULL)
	AND [Address] NOT IN (
		SELECT Address1 FROM [Address]
	)	

UPDATE PKDispenser
	SET
		NextKey = (SELECT MAX(EmployeeID)+1 FROM tblEmployee)
WHERE
	TableName = 'tblEmployee'


SELECT 
	TE.EmployeeID, 
	TE.Fullname, 
	TE.[Address],
	AD.Address1,
	TE.HomeAddressId, 
	TE.MailingAddressId 
FROM tblEmployee TE
INNER JOIN
	[Address] AD
	ON AD.Address1 = TE.[Address]

UPDATE tblEmployee
	SET
		HomeAddressId = AD.Id,
		MailingAddressId = AD.Id
FROM tblEmployee TE
INNER JOIN
	[Address] AD
	ON AD.Address1 = TE.[Address]

	SELECT * FROM tblPhone

	SELECT * FROM DS_Global..tblPhoneType

UPDATE tblEmployee
	SET
		HomeEmail = CE.Extra1
FROM convEmployee CE
INNER JOIN
	tblEmployee TE
	ON TE.EmployeeID = CE.EmployeeID


UPDATE convEmergContact
	SET 
		EID = TE.EmployeeID
FROM convEmergContact CE
INNER JOIN tblEmployee TE
	ON TE.SocSecNo = CE.SSN
WHERE ContactName IS NOT NULL

SP_COLUMNS tblEmergencyContact
INSERT INTO tblEmergencyContact
(
	ecEmployeeID,
	ContactTypeID,
	Name,
	Phone
)
SELECT 
	CE.EID,
	(SELECT EmergencyContactTypeID FROM DS_Global..tblEmergencyContactType WHERE [Type] = CE.ContactType ),
	CE.ContactName,
	CE.Phone
FROM convEmergContact CE
WHERE CE.ContactName IS NOT NULL


SP_COLUMNS tblRetireClass
INSERT INTO tblRetireClass
(
	RetireClass,
	DistrictID,
	OldID,
	COECode
)
SELECT 
	DISTINCT
	extra,
	95,
	0,
	NULL
FROM convFullname
WHERE
	extra7 = 'RETIRE'
	AND ISNULL(EXTRA,'') != ''
	AND extra != '???'

UPDATE convFullname
	SET
		extra12 = RET.RetireClassID
FROM convFullname CV
INNER JOIN
	tblRetireClass RET
	ON CV.extra2 = RET.RetireClass
WHERE
	CV.extra7 = 'RETIRE'
	AND ISNULL(CV.extra2,'') != ''

UPDATE tblEmployee
	SET 
		CertRetireId = CV.extra11,
		ClassRetireId = CV.extra12
FROM convFullname CV
INNER JOIN
	tblEmployee TE
	ON CV.SSN = TE.SocSecNo
WHERE
	CV.extra7 = 'RETIRE'

UPDATE tblPhone
	SET
		Private = 0
	



DECLARE @PRRunId INT
SET @PRRunId = (SELECT Id FROM payrollrun WHERE [Description] = '2017 Q3 CANCELS')

DECLARE @PRRun VARCHAR(100)
SET @PRRun = (SELECT [Description] FROM payrollrun WHERE Id = @PRRunId)

INSERT INTO pysummary (
 employeeid,
 payrollrunid,
 pysummaryruleid,
 amount,
 DCreated
 )


SELECT employeeid,
 @PRRunId,
 2,
 Cast(extra AS DECIMAL(10, 2)),
 CONVERT(VARCHAR(10), GETDATE(), 110)
FROM convfullname
WHERE employeeid IS NOT NULL
 AND Cast(extra AS DECIMAL(10, 2)) != 0.00
 AND extra23 = 'Monday' AND FNAME = @PRRun

UNION ALL

SELECT employeeid,
 @PRRunId,
 7,
 Cast(extra2 AS DECIMAL(10, 2)),
 CONVERT(VARCHAR(10), GETDATE(), 110)
FROM convfullname
WHERE employeeid IS NOT NULL
 AND Cast(extra2 AS DECIMAL(10, 2)) != 0.00
 AND extra23 = 'Monday' AND FNAME = @PRRun

UNION ALL

SELECT employeeid,
 @PRRunId,
 8,
 Cast(extra3 AS DECIMAL(10, 2)),
 CONVERT(VARCHAR(10), GETDATE(), 110)
FROM convfullname
WHERE employeeid IS NOT NULL
 AND Cast(extra3 AS DECIMAL(10, 2)) != 0.00
 AND extra23 = 'Monday' AND FNAME = @PRRun

UNION ALL

SELECT employeeid,
 @PRRunId,
 30,
 Cast(extra4 AS DECIMAL(10, 2)),
 CONVERT(VARCHAR(10), GETDATE(), 110)
FROM convfullname
WHERE employeeid IS NOT NULL
 AND Cast(extra4 AS DECIMAL(10, 2)) != 0.00
 AND extra23 = 'Monday' AND FNAME = @PRRun



UNION ALL

SELECT employeeid,
 @PRRunId,
 4,
 Cast(extra5 AS DECIMAL(10, 2)),
 CONVERT(VARCHAR(10), GETDATE(), 110)
FROM convfullname
WHERE employeeid IS NOT NULL
 AND Cast(extra5 AS DECIMAL(10, 2)) != 0.00
 AND extra23 = 'Monday' AND FNAME = @PRRun

UNION ALL

SELECT employeeid,
 @PRRunId,
 22,
 Cast(extra6 AS DECIMAL(10, 2)),
 CONVERT(VARCHAR(10), GETDATE(), 110)
FROM convfullname
WHERE employeeid IS NOT NULL
 AND Cast(extra6 AS DECIMAL(10, 2)) != 0.00
 AND extra23 = 'Monday' AND FNAME = @PRRun
 
UNION ALL

SELECT employeeid,
 @PRRunId,
 1,
 Cast(extra7 AS DECIMAL(10, 2)),
 CONVERT(VARCHAR(10), GETDATE(), 110)
FROM convfullname
WHERE employeeid IS NOT NULL
 AND Cast(extra7 AS DECIMAL(10, 2)) != 0.00
 AND extra23 = 'Monday' AND FNAME = @PRRun

UNION ALL

SELECT employeeid,
 @PRRunId,
 17,
 Cast(extra8 AS DECIMAL(10, 2)),
 CONVERT(VARCHAR(10), GETDATE(), 110)
FROM convfullname
WHERE employeeid IS NOT NULL
 AND Cast(extra8 AS DECIMAL(10, 2)) != 0.00
 AND extra23 = 'Monday' AND FNAME = @PRRun

UNION ALL

SELECT employeeid,
 @PRRunId,
 35,
 Cast(extra9 AS DECIMAL(10, 2)),
 CONVERT(VARCHAR(10), GETDATE(), 110)
FROM convfullname
WHERE employeeid IS NOT NULL
 AND Cast(extra9 AS DECIMAL(10, 2)) != 0.00
 AND extra23 = 'Monday' AND FNAME = @PRRun

UNION ALL

SELECT employeeid,
 @PRRunId,
 26,
 Cast(extra10 AS DECIMAL(10, 2)),
 CONVERT(VARCHAR(10), GETDATE(), 110)
FROM convfullname
WHERE employeeid IS NOT NULL
 AND Cast(extra10 AS DECIMAL(10, 2)) != 0.00
 AND extra23 = 'Monday' AND FNAME = @PRRun

UNION ALL

SELECT employeeid,
 @PRRunId,
 24,
 Cast(extra11 AS DECIMAL(10, 2)),
 CONVERT(VARCHAR(10), GETDATE(), 110)
FROM convfullname
WHERE employeeid IS NOT NULL
 AND Cast(extra11 AS DECIMAL(10, 2)) != 0.00
 AND extra23 = 'Monday' AND FNAME = @PRRun
 
 UNION ALL

SELECT employeeid,
 @PRRunId,
 20,
 Cast(extra12 AS DECIMAL(10, 2)),
 CONVERT(VARCHAR(10), GETDATE(), 110)
FROM convfullname
WHERE employeeid IS NOT NULL
 AND Cast(extra12 AS DECIMAL(10, 2)) != 0.00
 AND extra23 = 'Monday' AND FNAME = @PRRun
 
UNION ALL

SELECT employeeid,
 @PRRunId,
 21,
 Cast(extra13 AS DECIMAL(10, 2)),
 CONVERT(VARCHAR(10), GETDATE(), 110)
FROM convfullname
WHERE employeeid IS NOT NULL
 AND Cast(extra13 AS DECIMAL(10, 2)) != 0.00
 AND extra23 = 'Monday' AND FNAME = @PRRun


 ----------

 -- VERIFY THE DISTRICT
SELECT
	@@SERVERNAME AS ServerName,
	DB_NAME() AS DBName
   

  
-- COMP STEP
-- CLASSIFIED + 1 ON COLNUMBER
-- CERTIFICATED + 1 ON ROWNUMBER
SELECT DISTINCT CD.EmployeeID,
	TE.Fullname,
	PCD.SlotNum,
	CD.CompDetailsID,
	SM1.SeriesID,
	SM1.Step,
	SM1.Col,
	SM1.StepColumn,
	SM1.SalaryMatrixID AS oldSM,
	(
		SELECT SM2.StepColumn
		FROM tblSalaryMatrix SM2
		WHERE SM2.RowNumber = SM1.RowNumber 
			AND (ASCII(SM2.COL) = ASCII(SM1.COL+1)) 
			AND SM2.mxGroup = SM1.mxGroup
			AND SM2.smCompTypeID = SM1.smCompTypeID
			AND SM2.SeriesID = SM1.SeriesID
			AND SM2.ColNumber = SM1.ColNumber + 1
			AND SM2.Col = SM1.Col + 1
		) AS newSC,
	(
		SELECT SM2.SalaryMatrixID
		FROM tblSalaryMatrix SM2
		WHERE SM2.RowNumber = SM1.RowNumber 
			AND (ASCII(SM2.Col) = ASCII(SM1.Col+1)) 
			AND SM2.mxGroup = SM1.mxGroup
			AND SM2.smCompTypeID = SM1.smCompTypeID
			AND SM2.SeriesID = SM1.SeriesID
			AND SM2.ColNumber = SM1.ColNumber+ 1
			--AND SM2.Step = SM1.Step
		) AS newSM
--INTO #WHAT
FROM tblEmployee TE
INNER JOIN tblCompDetails CD
	ON CD.EmployeeID = TE.EmployeeID
		AND CD.FiscalYear = 2018
		AND CD.InactiveDate IS NULL
		AND CD.CompTypeID IN (
			-- SELECT CompTypeID, CompType FROM tblCompType WHERE CompType LIKE '%BASE%'
			SELECT CompTypeID
			FROM tblCompType
			WHERE CompType IN ('Longevity Pay')
			)
		AND TE.ClassificationId IN (
			-- SELECT ClassificationId, ClassDescription FROM tblClassifications WHERE ClassDescription LIKE '%%'
			SELECT ClassificationId
			FROM tblClassifications
			WHERE ClassDescription IN (
					'Classified',
					'Classified Management',
					'Confidential'
					)
			)
		AND TE.TerminateDate IS NULL
INNER JOIN tblSalaryMatrix SM1
	ON CD.SalaryMatrixID = SM1.SalaryMatrixID
INNER JOIN tblPositionControlDetails PCD
	ON PCD.PositionControlID = CD.cdPositionControlID
INNER JOIN tblActionDue AD
	ON TE.EmployeeID = AD.adEmployeeID
	AND AD.DateNext = '7/1/18'
	AND AD.ActionTypeID = 17
WHERE
	TE.HireDate < '1/1/18'
	--AND TE.EmployeeID = 24
ORDER BY TE.Fullname ASC
  
DROP TABLE #WHAT
SELECT *
FROM #WHAT WHERE EMPLOYEEID = 641
  
UPDATE tblCompDetails
SET SalaryMatrixID = (
		CASE
			WHEN WHAT.newSM IS NULL
				THEN WHAT.oldSM
			ELSE WHAT.newSM
			END
		)
FROM #WHAT WHAT
INNER JOIN tblCompDetails CD
	ON WHAT.CompDetailsID = CD.CompDetailsID
  
--*****************************************
-- FORCE MOVE EVERYONE TO THE LATEST SERIES
-- THIS IS IF THE COMP EXIST ON THE LATEST SERIES
SELECT DISTINCT CD.EmployeeID,
	TE.Fullname,
	PCD.SlotNum,
	CD.CompDetailsID,
	SM1.StepColumn,
	SM1.SalaryMatrixID AS oldSM,
	SM1.SeriesID,
	(
		SELECT SM2.StepColumn
		FROM tblSalaryMatrix SM2
		WHERE SM2.RowNumber = SM1.RowNumber
			AND SM2.mxGroup = SM1.mxGroup
			AND SM2.smCompTypeID = (
				SELECT MAX(mxSeriesID)
				FROM tblSalaryMatrixSeries
				)
			AND SM2.SeriesID = SM1.SeriesID
			AND SM2.ColNumber = SM1.ColNumber
			AND SM2.Col = SM1.Col
			AND SM2.Step = SM1.Step
		) AS newSC,
	(
		SELECT SM2.SalaryMatrixID
		FROM tblSalaryMatrix SM2
		WHERE SM2.RowNumber = SM1.RowNumber
			AND SM2.mxGroup = SM1.mxGroup
			AND SM2.smCompTypeID = SM1.smCompTypeID
			AND SM2.SeriesID = (
				SELECT MAX(mxSeriesID)
				FROM tblSalaryMatrixSeries
				)
			AND SM2.ColNumber = SM1.ColNumber
			AND SM2.Col = SM1.Col
			AND SM2.Step = SM1.Step
		) AS newSM,
	(
		SELECT SM2.SeriesID
		FROM tblSalaryMatrix SM2
		WHERE SM2.RowNumber = SM1.RowNumber
			AND SM2.mxGroup = SM1.mxGroup
			AND SM2.smCompTypeID = SM1.smCompTypeID
			AND SM2.SeriesID = (
				SELECT MAX(mxSeriesID)
				FROM tblSalaryMatrixSeries
				)
			AND SM2.ColNumber = SM1.ColNumber
			AND SM2.Col = SM1.Col
			AND SM2.Step = SM1.Step
		) AS newSeries
INTO #WHAT
FROM tblEmployee TE
INNER JOIN tblCompDetails CD
	ON CD.EmployeeID = TE.EmployeeID
		AND CD.FiscalYear = 2017
		AND CD.InactiveDate IS NULL
		--AND CD.CompTypeID IN (
		-- SELECT CompTypeID, CompType FROM tblCompType WHERE CompType LIKE '%BASE%'
		--SELECT CompTypeID
		--FROM tblCompType
		--WHERE CompType IN ('Base Pay')
		--)
		--AND TE.ClassificationId IN (
		-- SELECT ClassificationId, ClassDescription FROM tblClassifications WHERE ClassDescription LIKE '%%'
		--SELECT ClassificationId
		--FROM tblClassifications
		--WHERE ClassDescription IN (
		--'Classified',
		--'Confidential',
		--'Classified Management',
		--'Classified Cabinet'
		--)
		--)
		AND TE.TerminateDate IS NULL
INNER JOIN tblSalaryMatrix SM1
	ON CD.SalaryMatrixID = SM1.SalaryMatrixID
--INNER JOIN tblActionDue AD
--ON TE.EmployeeID = AD.adEmployeeID
--AND AD.ActionTypeID = (
-- SELECT ActionTypeID, TypeDesc FROM tblActionType WHERE TypeDesc LIKE '%INCRE%'
--SELECT ActionTypeID
--FROM tblActionType
--WHERE TypeDesc = 'Increment Date'
--)
--AND AD.DateNext = '7/1/17'
INNER JOIN tblPositionControlDetails PCD
	ON PCD.PositionControlID = CD.cdPositionControlID
WHERE SM1.SeriesID != (
		SELECT MAX(mxSeriesID)
		FROM tblSalaryMatrixSeries
		)
ORDER BY TE.Fullname ASC
  
SELECT *
FROM #WHAT
WHERE EmployeeID = 13207
  
UPDATE tblCompDetails
SET SalaryMatrixID = (
		CASE
			WHEN WHAT.newSM IS NULL
				THEN WHAT.oldSM
			ELSE WHAT.newSM
			END
		)
--EffectiveDate = '7/1/17'
FROM #WHAT WHAT
INNER JOIN tblCompDetails CD
	ON WHAT.CompDetailsID = CD.CompDetailsID
  
  
-- DROP TABLE #WHAT
-- (╯°□°)╯︵ ┻━┻


SELECT *
FROM tblCompDetails
WHERE
	FiscalYear = 2017


select *
from tblActionDue
where
	DateNext = '7/1/18'
	and ActionTypeID = 17

SELECT *
FROM tblEmployee
WHERE
	EmployeeID = 24

-------------------------------



-- where are we
select
	UPPER(@@SERVERNAME) as ServerName,
	DB_NAME() as DBName

-- check the current tblPayrollAcctModify and 
-- tblPayrollAcctModifyDetails settings
select 
	hed.ModifierID,
	clg.ClassificationGroupID,
	clg.[Description] as ClassGroup,
	hed.[Description] as ModName,
	hed.[Start],
	hed.[Length],
	det.Modification,
	cl.ClassDescription
from tblPayrollAcctModify hed
inner join 
	tblPayrollAcctModifyDetails det
	on hed.ModifierID = det.ModifierID
left join
	tblClassificationGroup clg
	on hed.ClassificationGroup = clg.ClassificationGroupID
left join
	tblClassifications cl
	on clg.ClassificationGroupID = cl.ClassificationGroup
order by
	clg.ClassificationGroupID

-- get random employee to test
-- get random employee to test
-- An employee was randomly selected from tblEmployee, the employee needs to have 
-- the following conditions return TRUE;
--      Employee is active
--      Employee has an active regular position
--      The employee's position should fall under class group 1 (cerificated) or 2 (classified)
--      The position should allow a sub to be assigned in case of the employee's absence
--      Has a timesheet created for the latest open payroll period
--      Does not have any leave transaction in the current open pay period (for testing purposes, this is preferred)
select 
	top 1
	te.EmployeeID,
	te.Fullname,
	pcd.SlotNum,
	jt.JobTitle,
	ts.TimeSheetID,
	tsd.TimeSheetDetailID
from tblEmployee te
inner join
	tblPositionControlDetails pcd
	on te.EmployeeID = pcd.EmployeeID
	and te.TerminateDate is null
	and pcd.InactiveDate is null
	and pcd.AvailableForSub = 1
	and pcd.trgClassificationId in (select ClassificationGroup from tblClassifications where ClassificationGroup in (1,2))
inner join
	tblJobTitles jt
	on pcd.pcJobTitleID = jt.JobTitleID
inner join
	tblTimesheets ts
	on ts.tsEmployeeId = te.EmployeeID
	and ts.tsPayroll = (select min(PayrollID) from tblPayroll where FiscalYear = 2017 and Closed = 0)
	and ts.tsPositionControlID = (select max(PositionControlID) from tblPositionControlDetails where SlotNum = pcd.SlotNum and InactiveDate is null)
left join
	tblTimeSheetsDetails tsd
	on tsd.tsTimeSheetID = null
order by
	NEWID()

-- get me the timesheet id
select 
	te.EmployeeID,
	te.Fullname,
	ts.TimeSheetID,
	pr.PayPeriod
from tblTimesheets ts
inner join
	tblEmployee te
	on te.EmployeeID = ts.tsEmployeeId
	and ts.tsPositionControlID = (select max(PositionControlID) from tblPositionControlDetails where SlotNum = 'AA412' and InactiveDate is null)
inner join
	tblPayroll pr
	on ts.tsPayroll = pr.PayrollID
	and pr.FiscalYear = 2017
	and pr.Closed = 0
	and pr.PayrollID = (select min(PayrollID) from tblPayroll where FiscalYear = 2017 and Closed = 0)
where 
	ts.tsEmployeeId = 588

-- insert timesheet transactions
declare @FromDate date = '2018-05-01'
declare @ToDate date = '2018-05-31'
declare @classGroup as int
declare @timeSheetID as int
declare @tsdate as date
declare @leavetypeid as int
declare @subemp as int


set @timeSheetID = 452922
set @classGroup =  3
set @tsdate = (select dateadd(day, rand(checksum(newid()))*(1+datediff(day, @FromDate, @ToDate)), @FromDate))
set @leavetypeid = (select top 1 LeaveTypeID from tblLeaveType where LeaveType = 'sick leave' and Inactive = 0)
set @subemp = (select top 1 EmployeeID from tblEmployee where EmployeeID in (select tsEmployeeId from tblTimesheets where tsPayroll = (select min(PayrollID) from tblPayroll where FiscalYear = 2017 and Closed = 0) and tsTimeType = 7) and ClassificationId in (select ClassificationId from tblClassifications where ClassificationGroup = @classGroup) and TerminateDate is null and EmployeeID in (select EmployeeID from tblSubstituteAssignment where InactiveDate is null) order by NEWID())

-- insert leave and assign a sub
insert into tblTimeSheetsDetails
(
	tsTimeSheetID,
	xtsActionTypeID,
	Hrs,
	tsLeaveTypeID,
	xtsSlotDetailsID,
	xtsWorkAgreementID,
	xRefSubTSDetailId,
	tsDate,
	Checkin,
	NeedSub,
	InLieu,
	Substitute,
	SubEmployeeID,
	SubJobNo,
	Comments,
	DEntered,
	Finalized,
	UserEntered,
	Units,
	IsDays,
	Verified,
	Approved
)
select 
	@timeSheetID,
	null,
	6,
	@leavetypeid,
	null,
	null,
	null,
	@tsdate,
	0,
	1,
	0,
	null,
	@subemp,
	null,
	'DS-5910 test bucket',
	CONVERT(VARCHAR(10), GETDATE(), 110),
	0,
	null,
	null,
	null,
	0,
	0

-- insert sub transaction
insert into tblTimeSheetsDetails
(
	tsTimeSheetID,
	xtsActionTypeID,
	Hrs,
	tsLeaveTypeID,
	xtsSlotDetailsID,
	xtsWorkAgreementID,
	xRefSubTSDetailId,
	tsDate,
	Checkin,
	NeedSub,
	InLieu,
	Substitute,
	SubEmployeeID,
	SubJobNo,
	Comments,
	DEntered,
	Finalized,
	UserEntered,
	Units,
	IsDays,
	Verified,
	Approved
)
select
	(select top 1 TimeSheetID from tblTimesheets where tsEmployeeId = @subemp and tsPayroll = (select min(PayrollID) from tblPayroll where FiscalYear = 2017 and Closed = 0) and tsTimeType = 7),
	xtsActionTypeID,
	6,
	1,
	null,
	null,
	(select max(TimeSheetDetailID) from tblTimeSheetsDetails where tsTimeSheetID = @timeSheetID),
	@tsdate,
	0,
	0,
	0,
	null,
	null,
	null,
	'DS-5910 test bucket',
	CONVERT(VARCHAR(10), GETDATE(), 110),
	0,
	null,
	null,
	null,
	0,
	0
from tblTimeSheetsDetails tsd
where
	tsd.TimeSheetDetailID = (select max(TimeSheetDetailID) from tblTimeSheetsDetails) 
	and tsd.tsTimeSheetID = @timeSheetID


-- 
select 
	ass.EmployeeID,
	te.Fullname,
	jt.JobTitle,
	ass.InactiveDate
from tblEmployee te
inner join
	tblSubstituteAssignment ass
	on te.EmployeeID = ass.EmployeeID
	and te.EmployeeID = 1402		
inner join
	tblJobTitles jt
	on jt.JobTitleID = ass.JobTitleID
	and jt.JobTitle like 'cert%'

-- get sub transactions
select 
	ts.tsEmployeeId,
	(select PayPeriod from tblPayroll where PayrollID = ts.tsPayroll) as PayrollPeriod,
	te.Fullname,
	ts.TimeSheetID,
	tsd.TimeSheetDetailID,
	CONVERT(VARCHAR(10), tsd.tsDate, 110) as TSDate,
	tsd.Hrs,
	(select Fullname from tblEmployee where EmployeeID = tsd.SubEmployeeID) as SubEmployee
from tblTimesheets ts
inner join
	tblTimeSheetsDetails tsd
	on tsd.tsTimeSheetID = ts.TimeSheetID
inner join
	tblEmployee te
	on te.EmployeeID = ts.tsEmployeeId
where
	ts.tsEmployeeId = 588
	and ts.tsPayroll = (select min(PayrollID) from tblPayroll where FiscalYear = 2017 and Closed = 0)

-- get original funding for absent employee
select 
	te.EmployeeID,
	te.Fullname,
	pcd.SlotNum,
	acc.AccountString,
	fpos.[Percent]
from tblEmployee te
inner join
	tblPositionControlDetails pcd
	on te.EmployeeID = pcd.EmployeeID
	and te.EmployeeID = 588
	and pcd.InactiveDate is null
inner join
	tblFundingSlotDetails fpos
	on fpos.fPositionControlID = pcd.PositionControlID
inner join
	tblAccount acc
	on acc.AccountID = fpos.fsAccountID
	and fpos.Inactive = 0
	and pcd.SlotNum = 'AA412'
	and fpos.InactivePayrollId is null

-- insert a new modifier for cert subs
sp_columns tblPayrollAcctModify

select *
from tblPayrollAcctModify
where
	ModifierID = 1

insert into tblPayrollAcctModify
(
	DistrictID,
	TransType,
	[Description],
	ClassificationGroup,
	ClassificationID,
	WorkSiteID,
	SubClassificationGroup,
	[Start],
	[Length],
	Multiplier,
	is_lt,
	SubClassificationID,
	JobTitleID
)
select
	DistrictID,
	1,
	'cert sub DS-5910 bucket',
	1,
	null,
	null,
	null,
	1,
	2,
	null,
	null,
	null,
	null
from tblPayrollAcctModify
where
	ModifierID = 1




-- insert new modify details
sp_columns tblPayrollAcctModifyDetails

insert into tblPayrollAcctModifyDetails
(
	ModifierID,
	[Description],
	Category,
	LeaveTypeID,
	AcctStringValue,
	Modification
)
select
	(select top 1 ModifierID from tblPayrollAcctModify where [Description] like '%ds-5910%' order by ModifierID desc),
	'Object Code',
	14,
	null,
	null,
	44

select *
from tblPayrollAcctModifyDetails
where
	ModifierID = 1



-- check new tblPayrollAcctModify and 
-- tblPayrollAcctModifyDetails settings
select 
	hed.ModifierID,
	clg.ClassificationGroupID,
	clg.[Description] as ClassGroup,
	hed.[Description] as ModName,
	hed.[Start],
	hed.[Length],
	det.Modification,
	cl.ClassDescription
from tblPayrollAcctModify hed
inner join 
	tblPayrollAcctModifyDetails det
	on hed.ModifierID = det.ModifierID
	and hed.[Description] = 'cert sub DS-5910 bucket'
inner join
	tblClassificationGroup clg
	on hed.ClassificationGroup = clg.ClassificationGroupID
inner join
	tblClassifications cl
	on clg.ClassificationGroupID = cl.ClassificationGroup
	and clg.ClassificationGroupID = 1
order by
	clg.ClassificationGroupID


-----------------------------



SELECT DISTINCT CD.EmployeeID,
    TE.Fullname,
    PCD.SlotNum,
    CD.CompDetailsID,
    SM1.StepColumn,
    SM1.SalaryMatrixID AS oldSM,
    (
        SELECT SM2.StepColumn
        FROM tblSalaryMatrix SM2
        WHERE SM2.RowNumber = SM1.RowNumber
            AND SM2.mxGroup = SM1.mxGroup
            AND SM2.smCompTypeID = SM1.smCompTypeID
            AND SM2.SeriesID = SM1.SeriesID
            --AND SM2.ColNumber - 1 = SM1.ColNumber
            --AND SM2.Col = SM1.Col
			AND SM2.StepColumn = (SUBSTRING(SM1.StepColumn,1,3)+'5')
        ) AS newSC,
    (
        SELECT SM2.SalaryMatrixID
        FROM tblSalaryMatrix SM2
        WHERE SM2.RowNumber = SM1.RowNumber
            AND SM2.mxGroup = SM1.mxGroup
            AND SM2.smCompTypeID = SM1.smCompTypeID
            AND SM2.SeriesID = SM1.SeriesID
            --AND SM2.ColNumber - 1 = SM1.ColNumber 
			            --AND SM2.Col = SM1.Col
			AND SM2.StepColumn = (SUBSTRING(SM1.StepColumn,1,3)+'5')
        ) AS newSM
INTO #WHAT
FROM tblEmployee TE
INNER JOIN tblCompDetails CD
    ON CD.EmployeeID = TE.EmployeeID
        AND CD.FiscalYear = 2018
        AND CD.InactiveDate IS NULL
        AND CD.CompTypeID IN (
            -- SELECT CompTypeID, CompType FROM tblCompType WHERE CompType LIKE '%BASE%'
            SELECT CompTypeID
            FROM tblCompType
            WHERE CompType IN ('Base Pay')
            )
        AND TE.ClassificationId IN (
            --SELECT ClassificationId, ClassDescription, ClassificationGroup FROM tblClassifications WHERE ClassDescription LIKE '%%'
            SELECT ClassificationId
            FROM tblClassifications
            WHERE ClassDescription IN (
                    'Classified',
                    'Confidential',
                    'Classified Management'
                    )
            )
        AND TE.TerminateDate IS NULL
INNER JOIN tblSalaryMatrix SM1
    ON CD.SalaryMatrixID = SM1.SalaryMatrixID
INNER JOIN tblPositionControlDetails PCD
    ON PCD.PositionControlID = CD.cdPositionControlID
WHERE
	TE.EmployeeID IN (
	SELECT DISTINCT	
	cd.EmployeeID
FROM tblCompDetails cd
WHERE
	cd.FiscalYear = 2018
	AND cd.CompTypeID = (7)
	)
ORDER BY TE.Fullname ASC
  
SELECT *
FROM #WHAT
WHERE
	EmployeeID = 78
  
UPDATE tblCompDetails
SET SalaryMatrixID = (
        CASE
            WHEN WHAT.newSM IS NULL
                THEN WHAT.oldSM
            ELSE WHAT.newSM
            END
        )
FROM #WHAT WHAT
INNER JOIN tblCompDetails CD
    ON WHAT.CompDetailsID = CD.CompDetailsID

DROP TABLE #WHAT


SELECT *
FROM tblSalaryMatrix
WHERE
	SalaryMatrixID IN (43208,43163)



-----------------------------------------------



